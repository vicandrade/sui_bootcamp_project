import { fromBase64 } from "@mysten/bcs";
import init, {
  BlobEncoder,
  bls12381_min_pk_aggregate,
  bls12381_min_pk_verify
} from "@mysten/walrus-wasm";
import { BlobId, blobIdFromBytes } from "./utils/bcs.js";
async function getWasmBindings(url) {
  await init({ module_or_path: url });
  function encodeBlob(nShards, bytes, encodingType = "RS2") {
    const encoder = new BlobEncoder(nShards);
    if (encodingType !== "RS2") {
      throw new Error(`Unsupported encoding type: ${encodingType}`);
    }
    const [sliverPairs, metadata, rootHash] = encoder.encode_with_metadata(bytes);
    return {
      sliverPairs,
      blobId: blobIdFromBytes(new Uint8Array(metadata.blob_id)),
      metadata: metadata.metadata,
      rootHash: new Uint8Array(rootHash.Digest)
    };
  }
  function combineSignatures(confirmations, signerIndices) {
    const signature = bls12381_min_pk_aggregate(
      confirmations.map((confirmation) => fromBase64(confirmation.signature))
    );
    return {
      signers: signerIndices,
      serializedMessage: fromBase64(confirmations[0].serializedMessage),
      signature
    };
  }
  function decodePrimarySlivers(blobId, nShards, size, slivers, encodingType = "RS2") {
    const encoder = new BlobEncoder(nShards);
    if (encodingType !== "RS2") {
      throw new Error(`Unsupported encoding type: ${encodingType}`);
    }
    const [bytes] = encoder.decode(
      BlobId.serialize(blobId).toBytes(),
      BigInt(size),
      slivers.map((sliver) => ({
        ...sliver,
        _sliver_type: void 0
      }))
    );
    return new Uint8Array(bytes);
  }
  function getVerifySignature() {
    return (confirmation, publicKey) => bls12381_min_pk_verify(
      fromBase64(confirmation.signature),
      publicKey,
      fromBase64(confirmation.serializedMessage)
    );
  }
  function computeMetadata(nShards, bytes, encodingType = "RS2") {
    const encoder = new BlobEncoder(nShards);
    const [metadata, rootHash] = encoder.compute_metadata(bytes);
    if (encodingType !== "RS2") {
      throw new Error(`Unsupported encoding type: ${encodingType}`);
    }
    return {
      ...metadata,
      blobId: blobIdFromBytes(new Uint8Array(metadata.blob_id)),
      rootHash: new Uint8Array(rootHash.Digest)
    };
  }
  return {
    encodeBlob,
    combineSignatures,
    decodePrimarySlivers,
    getVerifySignature,
    computeMetadata
  };
}
export {
  getWasmBindings
};
//# sourceMappingURL=wasm.js.map
