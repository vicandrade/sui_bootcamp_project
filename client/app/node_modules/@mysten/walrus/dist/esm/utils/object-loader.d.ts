import type { BcsType } from '@mysten/bcs';
import type { PureTypeName, ShapeFromPureTypeName } from '@mysten/sui/bcs';
import type { SuiObjectData } from '@mysten/sui/client';
import type { Experimental_BaseClient, Experimental_SuiClientTypes } from '@mysten/sui/experimental';
import DataLoader from 'dataloader';
export declare class SuiObjectDataLoader extends DataLoader<string, Experimental_SuiClientTypes.ObjectResponse> {
    #private;
    constructor(suiClient: Experimental_BaseClient);
    load<T = SuiObjectData>(id: string, schema?: BcsType<T, any>): Promise<T>;
    loadMany<T = SuiObjectData>(ids: string[], schema?: BcsType<T, any>): Promise<(T | Error)[]>;
    loadManyOrThrow<T>(ids: string[], schema: BcsType<T, any>): Promise<T[]>;
    clearAll(): this;
    clear(key: string): this;
    loadFieldObject<K extends PureTypeName, T>(parent: string, name: {
        type: K;
        value: ShapeFromPureTypeName<K>;
    }, type: BcsType<T, any>): Promise<T>;
}
