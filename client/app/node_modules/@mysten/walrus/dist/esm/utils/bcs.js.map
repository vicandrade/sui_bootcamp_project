{
  "version": 3,
  "sources": ["../../../src/utils/bcs.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType } from '@mysten/sui/bcs';\nimport { bcs } from '@mysten/sui/bcs';\n\nconst MerkleNode = bcs.enum('MerkleNode', {\n\tEmpty: null,\n\tDigest: bcs.bytes(32),\n});\n\nconst SliverPairMetadata = bcs.struct('SliverPairMetadata', {\n\tprimary_hash: MerkleNode,\n\tsecondary_hash: MerkleNode,\n});\n\nexport const EncodingType = bcs\n\t.enum('EncodingType', {\n\t\tRedStuff: null,\n\t\tRS2: null,\n\t})\n\t.transform({\n\t\tinput: (\n\t\t\tencodingType:\n\t\t\t\t| { RedStuff: boolean | object | null }\n\t\t\t\t| { RS2: boolean | object | null }\n\t\t\t\t| 'RedStuff'\n\t\t\t\t| 'RS2',\n\t\t) =>\n\t\t\ttypeof encodingType === 'string'\n\t\t\t\t? ({ [encodingType]: null } as Exclude<typeof encodingType, string>)\n\t\t\t\t: encodingType,\n\t\toutput: (encodingType) => encodingType,\n\t});\n\nexport const BlobMetadataV1 = bcs.struct('BlobMetadataV1', {\n\tencoding_type: EncodingType,\n\tunencoded_length: bcs.u64(),\n\thashes: bcs.vector(SliverPairMetadata),\n});\n\nexport const BlobMetadata = bcs.enum('BlobMetadata', {\n\tV1: BlobMetadataV1,\n});\n\nexport const BlobId = bcs.u256().transform({\n\tinput: (blobId: string | bigint) => (typeof blobId === 'string' ? blobIdToInt(blobId) : blobId),\n\toutput: (id: string) => blobIdFromInt(id),\n});\n\nexport function blobIdFromInt(blobId: bigint | string): string {\n\treturn bcs\n\t\t.u256()\n\t\t.serialize(blobId)\n\t\t.toBase64()\n\t\t.replace(/=*$/, '')\n\t\t.replaceAll('+', '-')\n\t\t.replaceAll('/', '_');\n}\n\nexport function blobIdFromBytes(blobId: Uint8Array): string {\n\treturn blobIdFromInt(bcs.u256().parse(blobId));\n}\n\nexport function blobIdToInt(blobId: string): bigint {\n\treturn BigInt(bcs.u256().fromBase64(blobId.replaceAll('-', '+').replaceAll('_', '/')));\n}\n\nexport const BlobMetadataWithId = bcs.struct('BlobMetadataWithId', {\n\tblobId: BlobId,\n\tmetadata: BlobMetadata,\n});\n\nconst Symbols = bcs.struct('Symbols', {\n\tdata: bcs.vector(bcs.u8()),\n\tsymbol_size: bcs.u16(),\n});\n\nexport const SliverData = bcs.struct('SliverData', {\n\tsymbols: Symbols,\n\tindex: bcs.u16(),\n});\n\nexport const Sliver = bcs.enum('Sliver', {\n\tPrimary: SliverData,\n\tSecondary: SliverData,\n});\n\nexport const SliverPair = bcs.struct('SliverPair', {\n\tprimary: SliverData,\n\tsecondary: SliverData,\n});\n\nexport enum IntentType {\n\tPROOF_OF_POSSESSION_MSG = 0,\n\tBLOB_CERT_MSG = 1,\n\tINVALID_BLOB_ID_MSG = 2,\n\tSYNC_SHARD_MSG = 3,\n}\n\nexport const Intent = bcs\n\t.struct('Intent', {\n\t\ttype: bcs.u8().transform({\n\t\t\tinput: (type: IntentType) => type,\n\t\t\toutput: (type: number) => type as IntentType,\n\t\t}),\n\t\tversion: bcs.u8(),\n\t\tappId: bcs.u8(),\n\t})\n\t.transform({\n\t\tinput: (intent: IntentType) => ({\n\t\t\ttype: intent,\n\t\t\tversion: 0,\n\t\t\tappId: 3,\n\t\t}),\n\t\toutput: (intent) => intent.type,\n\t});\n\nexport function ProtocolMessage<T extends BcsType<any>>(messageContents: T) {\n\treturn bcs.struct(`ProtocolMessage<${messageContents.name}>`, {\n\t\tintent: Intent,\n\t\tepoch: bcs.u32(),\n\t\tmessageContents,\n\t});\n}\n\nexport const BlobPersistenceType = bcs.enum('BlobPersistenceType', {\n\tPermanent: null,\n\tDeletable: bcs.struct('Deletable', {\n\t\tobjectId: bcs.Address,\n\t}),\n});\nexport const StorageConfirmationBody = bcs.struct('StorageConfirmationBody', {\n\tblobId: BlobId,\n\tblobType: BlobPersistenceType,\n});\n\nexport const StorageConfirmation = ProtocolMessage(StorageConfirmationBody);\n\nexport function Field<T0 extends BcsType<any>, T1 extends BcsType<any>>(\n\t...typeParameters: [T0, T1]\n) {\n\treturn bcs.struct('Field', {\n\t\tid: bcs.Address,\n\t\tname: typeParameters[0],\n\t\tvalue: typeParameters[1],\n\t});\n}\n\nexport const QuiltPatchTags = bcs.map(bcs.string(), bcs.string()).transform({\n\t// tags is a BTreeMap, so we need to sort entries before serializing\n\tinput: (tags: Record<string, string> | Map<string, string>) =>\n\t\tnew Map(\n\t\t\t[...(tags instanceof Map ? tags : Object.entries(tags))].sort(([a], [b]) =>\n\t\t\t\t// TODO: sorting for map keys should be moved into @mysten/bcs\n\t\t\t\tcompareBcsBytes(bcs.string().serialize(a).toBytes(), bcs.string().serialize(b).toBytes()),\n\t\t\t),\n\t\t),\n\toutput: (tags: Map<string, string>) => Object.fromEntries(tags),\n});\n\nexport const QuiltPatchV1 = bcs.struct('QuiltPatchV1', {\n\tendIndex: bcs.u16(),\n\tidentifier: bcs.string(),\n\ttags: QuiltPatchTags,\n});\n\nfunction compareBcsBytes(a: Uint8Array, b: Uint8Array) {\n\t// sort by length first, because bcs bytes prefix length\n\tif (a.length !== b.length) {\n\t\treturn a.length - b.length;\n\t}\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn a[i] - b[i];\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nexport const QuiltIndexV1 = bcs.struct('QuiltIndexV1', {\n\tpatches: bcs.vector(QuiltPatchV1),\n});\n\nexport const QuiltPatchId = bcs.struct('QuiltPatchId', {\n\tquiltId: BlobId,\n\tpatchId: bcs.struct('InternalQuiltPatchId', {\n\t\tversion: bcs.u8(),\n\t\tstartIndex: bcs.u16(),\n\t\tendIndex: bcs.u16(),\n\t}),\n});\n\nexport const QuiltPatchBlobHeader = bcs.struct('QuiltPatchBlobHeader', {\n\tversion: bcs.u8(),\n\tlength: bcs.u32(),\n\tmask: bcs.u8(),\n});\n"],
  "mappings": "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",
  "names": ["IntentType"]
}
