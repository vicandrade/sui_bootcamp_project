import type { BcsType } from '@mysten/sui/bcs';
export declare const EncodingType: BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    RedStuff: true;
    RS2: true;
}, "RedStuff" | "RS2">, "RedStuff" | "RS2" | {
    RedStuff: boolean | object | null;
} | {
    RS2: boolean | object | null;
}, "EncodingType">;
export declare const BlobMetadataV1: import("@mysten/sui/bcs").BcsStruct<{
    encoding_type: BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
        RedStuff: true;
        RS2: true;
    }, "RedStuff" | "RS2">, "RedStuff" | "RS2" | {
        RedStuff: boolean | object | null;
    } | {
        RS2: boolean | object | null;
    }, "EncodingType">;
    unencoded_length: BcsType<string, string | number | bigint, "u64">;
    hashes: BcsType<{
        primary_hash: import("@mysten/bcs").EnumOutputShapeWithKeys<{
            Empty: true;
            Digest: Uint8Array<ArrayBufferLike>;
        }, "Empty" | "Digest">;
        secondary_hash: import("@mysten/bcs").EnumOutputShapeWithKeys<{
            Empty: true;
            Digest: Uint8Array<ArrayBufferLike>;
        }, "Empty" | "Digest">;
    }[], Iterable<{
        primary_hash: import("@mysten/bcs").EnumInputShape<{
            Empty: boolean | object | null;
            Digest: Iterable<number>;
        }>;
        secondary_hash: import("@mysten/bcs").EnumInputShape<{
            Empty: boolean | object | null;
            Digest: Iterable<number>;
        }>;
    }> & {
        length: number;
    }, string>;
}, string>;
export declare const BlobMetadata: import("@mysten/sui/bcs").BcsEnum<{
    V1: import("@mysten/sui/bcs").BcsStruct<{
        encoding_type: BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
            RedStuff: true;
            RS2: true;
        }, "RedStuff" | "RS2">, "RedStuff" | "RS2" | {
            RedStuff: boolean | object | null;
        } | {
            RS2: boolean | object | null;
        }, "EncodingType">;
        unencoded_length: BcsType<string, string | number | bigint, "u64">;
        hashes: BcsType<{
            primary_hash: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                Empty: true;
                Digest: Uint8Array<ArrayBufferLike>;
            }, "Empty" | "Digest">;
            secondary_hash: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                Empty: true;
                Digest: Uint8Array<ArrayBufferLike>;
            }, "Empty" | "Digest">;
        }[], Iterable<{
            primary_hash: import("@mysten/bcs").EnumInputShape<{
                Empty: boolean | object | null;
                Digest: Iterable<number>;
            }>;
            secondary_hash: import("@mysten/bcs").EnumInputShape<{
                Empty: boolean | object | null;
                Digest: Iterable<number>;
            }>;
        }> & {
            length: number;
        }, string>;
    }, string>;
}, "BlobMetadata">;
export declare const BlobId: BcsType<string, string | bigint, "u256">;
export declare function blobIdFromInt(blobId: bigint | string): string;
export declare function blobIdFromBytes(blobId: Uint8Array): string;
export declare function blobIdToInt(blobId: string): bigint;
export declare const BlobMetadataWithId: import("@mysten/sui/bcs").BcsStruct<{
    blobId: BcsType<string, string | bigint, "u256">;
    metadata: import("@mysten/sui/bcs").BcsEnum<{
        V1: import("@mysten/sui/bcs").BcsStruct<{
            encoding_type: BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
                RedStuff: true;
                RS2: true;
            }, "RedStuff" | "RS2">, "RedStuff" | "RS2" | {
                RedStuff: boolean | object | null;
            } | {
                RS2: boolean | object | null;
            }, "EncodingType">;
            unencoded_length: BcsType<string, string | number | bigint, "u64">;
            hashes: BcsType<{
                primary_hash: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                    Empty: true;
                    Digest: Uint8Array<ArrayBufferLike>;
                }, "Empty" | "Digest">;
                secondary_hash: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                    Empty: true;
                    Digest: Uint8Array<ArrayBufferLike>;
                }, "Empty" | "Digest">;
            }[], Iterable<{
                primary_hash: import("@mysten/bcs").EnumInputShape<{
                    Empty: boolean | object | null;
                    Digest: Iterable<number>;
                }>;
                secondary_hash: import("@mysten/bcs").EnumInputShape<{
                    Empty: boolean | object | null;
                    Digest: Iterable<number>;
                }>;
            }> & {
                length: number;
            }, string>;
        }, string>;
    }, "BlobMetadata">;
}, string>;
export declare const SliverData: import("@mysten/sui/bcs").BcsStruct<{
    symbols: import("@mysten/sui/bcs").BcsStruct<{
        data: BcsType<number[], Iterable<number> & {
            length: number;
        }, string>;
        symbol_size: BcsType<number, number, "u16">;
    }, string>;
    index: BcsType<number, number, "u16">;
}, string>;
export declare const Sliver: import("@mysten/sui/bcs").BcsEnum<{
    Primary: import("@mysten/sui/bcs").BcsStruct<{
        symbols: import("@mysten/sui/bcs").BcsStruct<{
            data: BcsType<number[], Iterable<number> & {
                length: number;
            }, string>;
            symbol_size: BcsType<number, number, "u16">;
        }, string>;
        index: BcsType<number, number, "u16">;
    }, string>;
    Secondary: import("@mysten/sui/bcs").BcsStruct<{
        symbols: import("@mysten/sui/bcs").BcsStruct<{
            data: BcsType<number[], Iterable<number> & {
                length: number;
            }, string>;
            symbol_size: BcsType<number, number, "u16">;
        }, string>;
        index: BcsType<number, number, "u16">;
    }, string>;
}, "Sliver">;
export declare const SliverPair: import("@mysten/sui/bcs").BcsStruct<{
    primary: import("@mysten/sui/bcs").BcsStruct<{
        symbols: import("@mysten/sui/bcs").BcsStruct<{
            data: BcsType<number[], Iterable<number> & {
                length: number;
            }, string>;
            symbol_size: BcsType<number, number, "u16">;
        }, string>;
        index: BcsType<number, number, "u16">;
    }, string>;
    secondary: import("@mysten/sui/bcs").BcsStruct<{
        symbols: import("@mysten/sui/bcs").BcsStruct<{
            data: BcsType<number[], Iterable<number> & {
                length: number;
            }, string>;
            symbol_size: BcsType<number, number, "u16">;
        }, string>;
        index: BcsType<number, number, "u16">;
    }, string>;
}, string>;
export declare enum IntentType {
    PROOF_OF_POSSESSION_MSG = 0,
    BLOB_CERT_MSG = 1,
    INVALID_BLOB_ID_MSG = 2,
    SYNC_SHARD_MSG = 3
}
export declare const Intent: BcsType<IntentType, IntentType, string>;
export declare function ProtocolMessage<T extends BcsType<any>>(messageContents: T): import("@mysten/sui/bcs").BcsStruct<{
    intent: BcsType<IntentType, IntentType, string>;
    epoch: BcsType<number, number, "u32">;
    messageContents: T;
}, string>;
export declare const BlobPersistenceType: import("@mysten/sui/bcs").BcsEnum<{
    Permanent: null;
    Deletable: import("@mysten/sui/bcs").BcsStruct<{
        objectId: BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    }, string>;
}, "BlobPersistenceType">;
export declare const StorageConfirmationBody: import("@mysten/sui/bcs").BcsStruct<{
    blobId: BcsType<string, string | bigint, "u256">;
    blobType: import("@mysten/sui/bcs").BcsEnum<{
        Permanent: null;
        Deletable: import("@mysten/sui/bcs").BcsStruct<{
            objectId: BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        }, string>;
    }, "BlobPersistenceType">;
}, string>;
export declare const StorageConfirmation: import("@mysten/sui/bcs").BcsStruct<{
    intent: BcsType<IntentType, IntentType, string>;
    epoch: BcsType<number, number, "u32">;
    messageContents: import("@mysten/sui/bcs").BcsStruct<{
        blobId: BcsType<string, string | bigint, "u256">;
        blobType: import("@mysten/sui/bcs").BcsEnum<{
            Permanent: null;
            Deletable: import("@mysten/sui/bcs").BcsStruct<{
                objectId: BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
            }, string>;
        }, "BlobPersistenceType">;
    }, string>;
}, string>;
export declare function Field<T0 extends BcsType<any>, T1 extends BcsType<any>>(...typeParameters: [T0, T1]): import("@mysten/sui/bcs").BcsStruct<{
    id: BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    name: T0;
    value: T1;
}, string>;
export declare const QuiltPatchTags: BcsType<{
    [k: string]: string;
}, Map<string, string> | Record<string, string>, "Map<string, string>">;
export declare const QuiltPatchV1: import("@mysten/sui/bcs").BcsStruct<{
    endIndex: BcsType<number, number, "u16">;
    identifier: BcsType<string, string, "string">;
    tags: BcsType<{
        [k: string]: string;
    }, Map<string, string> | Record<string, string>, "Map<string, string>">;
}, string>;
export declare const QuiltIndexV1: import("@mysten/sui/bcs").BcsStruct<{
    patches: BcsType<{
        endIndex: number;
        identifier: string;
        tags: {
            [k: string]: string;
        };
    }[], Iterable<{
        endIndex: number;
        identifier: string;
        tags: Map<string, string> | Record<string, string>;
    }> & {
        length: number;
    }, string>;
}, string>;
export declare const QuiltPatchId: import("@mysten/sui/bcs").BcsStruct<{
    quiltId: BcsType<string, string | bigint, "u256">;
    patchId: import("@mysten/sui/bcs").BcsStruct<{
        version: BcsType<number, number, "u8">;
        startIndex: BcsType<number, number, "u16">;
        endIndex: BcsType<number, number, "u16">;
    }, string>;
}, string>;
export declare const QuiltPatchBlobHeader: import("@mysten/sui/bcs").BcsStruct<{
    version: BcsType<number, number, "u8">;
    length: BcsType<number, number, "u32">;
    mask: BcsType<number, number, "u8">;
}, string>;
