{
  "version": 3,
  "sources": ["../../../src/utils/index.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64, toBase64 } from '@mysten/bcs';\nimport type { InferBcsType } from '@mysten/bcs';\nimport type { SuiMoveNormalizedType } from '@mysten/sui/client';\n\nimport type { Committee } from '../contracts/walrus/committee.js';\nimport type { EncodingType } from '../types.js';\nimport { BlobId } from './bcs.js';\n\nconst DIGEST_LEN = 32;\nconst BLOB_ID_LEN = 32;\n\nexport const REQUIRED_ALIGNMENT_BY_ENCODING_TYPE = {\n\tRS2: 2,\n\tRedStuff: 2,\n};\n\nexport const MAX_SYMBOL_SIZE_BY_ENCODING_TYPE = {\n\tRS2: 2 ** 16 - 1,\n\tRedStuff: 2 ** 16 - 1,\n};\n\n// TODO: this name is kinda bad\nexport function encodedBlobLength(\n\tunencodedLength: number,\n\tnShards: number,\n\tencodingType: EncodingType = 'RS2',\n): number {\n\tconst sliverSize = encodedSliverSize(unencodedLength, nShards, encodingType);\n\tconst metadata = nShards * DIGEST_LEN * 2 + BLOB_ID_LEN;\n\treturn nShards * metadata + sliverSize;\n}\n\nexport function encodedSliverSize(\n\tunencodedLength: number,\n\tnShards: number,\n\tencodingType: EncodingType = 'RS2',\n): number {\n\tconst { primarySymbols, secondarySymbols } = getSourceSymbols(nShards, encodingType);\n\n\tlet symbolSize =\n\t\tMath.floor((Math.max(unencodedLength, 1) - 1) / (primarySymbols * secondarySymbols)) + 1;\n\n\tif (encodingType === 'RS2' && symbolSize % 2 === 1) {\n\t\tsymbolSize = symbolSize + 1;\n\t}\n\n\tconst singleShardSize = (primarySymbols + secondarySymbols) * symbolSize;\n\n\treturn singleShardSize * nShards;\n}\n\nexport function getSourceSymbols(nShards: number, encodingType: EncodingType = 'RS2') {\n\tconst safetyLimit = decodingSafetyLimit(nShards, encodingType);\n\tconst maxFaulty = getMaxFaultyNodes(nShards);\n\tconst minCorrect = nShards - maxFaulty;\n\n\treturn {\n\t\tprimarySymbols: minCorrect - maxFaulty - safetyLimit,\n\t\tsecondarySymbols: minCorrect - safetyLimit,\n\t};\n}\n\nexport function isQuorum(size: number, nShards: number): boolean {\n\tconst maxFaulty = getMaxFaultyNodes(nShards);\n\treturn size > 2 * maxFaulty;\n}\n\nexport function isAboveValidity(size: number, nShards: number): boolean {\n\tconst maxFaulty = getMaxFaultyNodes(nShards);\n\treturn size > maxFaulty;\n}\n\nexport function getMaxFaultyNodes(nShards: number): number {\n\treturn Math.floor((nShards - 1) / 3);\n}\n\nfunction decodingSafetyLimit(nShards: number, encodingType: EncodingType): number {\n\tswitch (encodingType) {\n\t\tcase 'RedStuff':\n\t\t\treturn Math.min(5, Math.floor(getMaxFaultyNodes(nShards) / 5));\n\t\tcase 'RS2':\n\t\t\treturn 0;\n\t\tdefault:\n\t\t\tthrow new Error(`Encountered unknown encoding type of ${encodingType}`);\n\t}\n}\n\nconst BYTES_PER_UNIT_SIZE = 1024 * 1024;\n\nexport function storageUnitsFromSize(size: number): number {\n\treturn Math.ceil(size / BYTES_PER_UNIT_SIZE);\n}\n\nfunction rotationOffset(bytes: Uint8Array, modulus: number): number {\n\treturn bytes.reduce((acc, byte) => (acc * 256 + byte) % modulus, 0);\n}\n\nexport function toShardIndex(sliverPairIndex: number, blobId: string, numShards: number): number {\n\tconst offset = rotationOffset(BlobId.serialize(blobId).toBytes(), numShards);\n\treturn (sliverPairIndex + offset) % numShards;\n}\n\nexport function sliverPairIndexFromSecondarySliverIndex(\n\tsliverIndex: number,\n\tnumShards: number,\n): number {\n\treturn numShards - sliverIndex - 1;\n}\n\nexport function shardIndexFromSecondarySliverIndex(\n\tsliverIndex: number,\n\tblobId: string,\n\tnumShards: number,\n): number {\n\tconst sliverPairIndex = sliverPairIndexFromSecondarySliverIndex(sliverIndex, numShards);\n\treturn toShardIndex(sliverPairIndex, blobId, numShards);\n}\n\nexport function toPairIndex(shardIndex: number, blobId: string, numShards: number): number {\n\tconst offset = rotationOffset(BlobId.serialize(blobId).toBytes(), numShards);\n\treturn (numShards + shardIndex - offset) % numShards;\n}\n\nexport function signersToBitmap(signers: number[], committeeSize: number): Uint8Array {\n\tconst bitmapSize = Math.ceil(committeeSize / 8);\n\tconst bitmap = new Uint8Array(bitmapSize);\n\n\tfor (const signer of signers) {\n\t\tconst byteIndex = Math.floor(signer / 8);\n\t\tconst bitIndex = signer % 8;\n\t\tbitmap[byteIndex] |= 1 << bitIndex;\n\t}\n\n\treturn bitmap;\n}\n\nexport function getShardIndicesByNodeId(committee: InferBcsType<typeof Committee>) {\n\tconst shardIndicesByNodeId = new Map<string, number[]>();\n\n\tfor (const node of committee[0].contents) {\n\t\tif (!shardIndicesByNodeId.has(node.key)) {\n\t\t\tshardIndicesByNodeId.set(node.key, []);\n\t\t}\n\t\tshardIndicesByNodeId.get(node.key)!.push(...node.value);\n\t}\n\n\treturn shardIndicesByNodeId;\n}\n\nexport function nodesByShardIndex(committee: InferBcsType<typeof Committee>) {\n\tconst nodesByShardIndex = new Map<number, string>();\n\n\tfor (const node of committee[0].contents) {\n\t\tfor (const shardIndex of node.value) {\n\t\t\tnodesByShardIndex.set(shardIndex, node.key);\n\t\t}\n\t}\n\n\treturn nodesByShardIndex;\n}\n\nexport function toTypeString(type: SuiMoveNormalizedType): string {\n\tif (typeof type === 'string') {\n\t\tswitch (type) {\n\t\t\tcase 'Address':\n\t\t\t\treturn 'address';\n\t\t\tcase 'Bool':\n\t\t\t\treturn 'bool';\n\t\t\tcase 'U8':\n\t\t\t\treturn 'u8';\n\t\t\tcase 'U16':\n\t\t\t\treturn 'u16';\n\t\t\tcase 'U32':\n\t\t\t\treturn 'u32';\n\t\t\tcase 'U64':\n\t\t\t\treturn 'u64';\n\t\t\tcase 'U128':\n\t\t\t\treturn 'u128';\n\t\t\tcase 'U256':\n\t\t\t\treturn 'u256';\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected type ${type}`);\n\t\t}\n\t}\n\n\tif ('Vector' in type) {\n\t\treturn `vector<${toTypeString(type.Vector)}>`;\n\t}\n\n\tif ('Struct' in type) {\n\t\tif (type.Struct.typeArguments.length > 0) {\n\t\t\treturn `${type.Struct.address}::${type.Struct.module}::${type.Struct.name}<${type.Struct.typeArguments.map(toTypeString).join(',')}>`;\n\t\t} else {\n\t\t\treturn `${type.Struct.address}::${type.Struct.module}::${type.Struct.name}`;\n\t\t}\n\t}\n\n\tif ('TypeParameter' in type) {\n\t\tthrow new Error(`Type parameters can't be converted to type strings`);\n\t}\n\n\tif ('Reference' in type) {\n\t\treturn toTypeString(type.Reference);\n\t}\n\n\tif ('MutableReference' in type) {\n\t\treturn toTypeString(type.MutableReference);\n\t}\n\n\tthrow new Error(`Unexpected type ${JSON.stringify(type)}`);\n}\n\nexport function urlSafeBase64(bytes: Uint8Array): string {\n\treturn toBase64(bytes).replace(/=*$/, '').replaceAll('+', '-').replaceAll('/', '_');\n}\n\nexport function fromUrlSafeBase64(base64: string): Uint8Array {\n\treturn fromBase64(base64.replaceAll('-', '+').replaceAll('_', '/'));\n}\n\nexport function getSizes(blobSize: number, numShards: number) {\n\tconst encodedBlobSize = encodedSliverSize(blobSize, numShards);\n\tconst { primarySymbols, secondarySymbols } = getSourceSymbols(numShards);\n\tconst totalSymbols = (primarySymbols + secondarySymbols) * numShards;\n\n\tif (encodedBlobSize % totalSymbols !== 0) {\n\t\tthrow new Error('encoded blob size should be divisible by total symbols');\n\t}\n\n\tconst symbolSize = encodedBlobSize / totalSymbols;\n\n\tif (encodedBlobSize % totalSymbols !== 0) {\n\t\tthrow new Error('blob length should be divisible by total symbols');\n\t}\n\n\tconst rowSize = symbolSize * secondarySymbols;\n\tconst columnSize = symbolSize * primarySymbols;\n\n\treturn {\n\t\tsymbolSize,\n\t\trowSize,\n\t\tcolumnSize,\n\t\tblobSize,\n\t};\n}\n"],
  "mappings": "AAGA,SAAS,YAAY,gBAAgB;AAMrC,SAAS,cAAc;AAEvB,MAAM,aAAa;AACnB,MAAM,cAAc;AAEb,MAAM,sCAAsC;AAAA,EAClD,KAAK;AAAA,EACL,UAAU;AACX;AAEO,MAAM,mCAAmC;AAAA,EAC/C,KAAK,KAAK,KAAK;AAAA,EACf,UAAU,KAAK,KAAK;AACrB;AAGO,SAAS,kBACf,iBACA,SACA,eAA6B,OACpB;AACT,QAAM,aAAa,kBAAkB,iBAAiB,SAAS,YAAY;AAC3E,QAAM,WAAW,UAAU,aAAa,IAAI;AAC5C,SAAO,UAAU,WAAW;AAC7B;AAEO,SAAS,kBACf,iBACA,SACA,eAA6B,OACpB;AACT,QAAM,EAAE,gBAAgB,iBAAiB,IAAI,iBAAiB,SAAS,YAAY;AAEnF,MAAI,aACH,KAAK,OAAO,KAAK,IAAI,iBAAiB,CAAC,IAAI,MAAM,iBAAiB,iBAAiB,IAAI;AAExF,MAAI,iBAAiB,SAAS,aAAa,MAAM,GAAG;AACnD,iBAAa,aAAa;AAAA,EAC3B;AAEA,QAAM,mBAAmB,iBAAiB,oBAAoB;AAE9D,SAAO,kBAAkB;AAC1B;AAEO,SAAS,iBAAiB,SAAiB,eAA6B,OAAO;AACrF,QAAM,cAAc,oBAAoB,SAAS,YAAY;AAC7D,QAAM,YAAY,kBAAkB,OAAO;AAC3C,QAAM,aAAa,UAAU;AAE7B,SAAO;AAAA,IACN,gBAAgB,aAAa,YAAY;AAAA,IACzC,kBAAkB,aAAa;AAAA,EAChC;AACD;AAEO,SAAS,SAAS,MAAc,SAA0B;AAChE,QAAM,YAAY,kBAAkB,OAAO;AAC3C,SAAO,OAAO,IAAI;AACnB;AAEO,SAAS,gBAAgB,MAAc,SAA0B;AACvE,QAAM,YAAY,kBAAkB,OAAO;AAC3C,SAAO,OAAO;AACf;AAEO,SAAS,kBAAkB,SAAyB;AAC1D,SAAO,KAAK,OAAO,UAAU,KAAK,CAAC;AACpC;AAEA,SAAS,oBAAoB,SAAiB,cAAoC;AACjF,UAAQ,cAAc;AAAA,IACrB,KAAK;AACJ,aAAO,KAAK,IAAI,GAAG,KAAK,MAAM,kBAAkB,OAAO,IAAI,CAAC,CAAC;AAAA,IAC9D,KAAK;AACJ,aAAO;AAAA,IACR;AACC,YAAM,IAAI,MAAM,wCAAwC,YAAY,EAAE;AAAA,EACxE;AACD;AAEA,MAAM,sBAAsB,OAAO;AAE5B,SAAS,qBAAqB,MAAsB;AAC1D,SAAO,KAAK,KAAK,OAAO,mBAAmB;AAC5C;AAEA,SAAS,eAAe,OAAmB,SAAyB;AACnE,SAAO,MAAM,OAAO,CAAC,KAAK,UAAU,MAAM,MAAM,QAAQ,SAAS,CAAC;AACnE;AAEO,SAAS,aAAa,iBAAyB,QAAgB,WAA2B;AAChG,QAAM,SAAS,eAAe,OAAO,UAAU,MAAM,EAAE,QAAQ,GAAG,SAAS;AAC3E,UAAQ,kBAAkB,UAAU;AACrC;AAEO,SAAS,wCACf,aACA,WACS;AACT,SAAO,YAAY,cAAc;AAClC;AAEO,SAAS,mCACf,aACA,QACA,WACS;AACT,QAAM,kBAAkB,wCAAwC,aAAa,SAAS;AACtF,SAAO,aAAa,iBAAiB,QAAQ,SAAS;AACvD;AAEO,SAAS,YAAY,YAAoB,QAAgB,WAA2B;AAC1F,QAAM,SAAS,eAAe,OAAO,UAAU,MAAM,EAAE,QAAQ,GAAG,SAAS;AAC3E,UAAQ,YAAY,aAAa,UAAU;AAC5C;AAEO,SAAS,gBAAgB,SAAmB,eAAmC;AACrF,QAAM,aAAa,KAAK,KAAK,gBAAgB,CAAC;AAC9C,QAAM,SAAS,IAAI,WAAW,UAAU;AAExC,aAAW,UAAU,SAAS;AAC7B,UAAM,YAAY,KAAK,MAAM,SAAS,CAAC;AACvC,UAAM,WAAW,SAAS;AAC1B,WAAO,SAAS,KAAK,KAAK;AAAA,EAC3B;AAEA,SAAO;AACR;AAEO,SAAS,wBAAwB,WAA2C;AAClF,QAAM,uBAAuB,oBAAI,IAAsB;AAEvD,aAAW,QAAQ,UAAU,CAAC,EAAE,UAAU;AACzC,QAAI,CAAC,qBAAqB,IAAI,KAAK,GAAG,GAAG;AACxC,2BAAqB,IAAI,KAAK,KAAK,CAAC,CAAC;AAAA,IACtC;AACA,yBAAqB,IAAI,KAAK,GAAG,EAAG,KAAK,GAAG,KAAK,KAAK;AAAA,EACvD;AAEA,SAAO;AACR;AAEO,SAAS,kBAAkB,WAA2C;AAC5E,QAAMA,qBAAoB,oBAAI,IAAoB;AAElD,aAAW,QAAQ,UAAU,CAAC,EAAE,UAAU;AACzC,eAAW,cAAc,KAAK,OAAO;AACpC,MAAAA,mBAAkB,IAAI,YAAY,KAAK,GAAG;AAAA,IAC3C;AAAA,EACD;AAEA,SAAOA;AACR;AAEO,SAAS,aAAa,MAAqC;AACjE,MAAI,OAAO,SAAS,UAAU;AAC7B,YAAQ,MAAM;AAAA,MACb,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO;AAAA,MACR,KAAK;AACJ,eAAO;AAAA,MACR;AACC,cAAM,IAAI,MAAM,mBAAmB,IAAI,EAAE;AAAA,IAC3C;AAAA,EACD;AAEA,MAAI,YAAY,MAAM;AACrB,WAAO,UAAU,aAAa,KAAK,MAAM,CAAC;AAAA,EAC3C;AAEA,MAAI,YAAY,MAAM;AACrB,QAAI,KAAK,OAAO,cAAc,SAAS,GAAG;AACzC,aAAO,GAAG,KAAK,OAAO,OAAO,KAAK,KAAK,OAAO,MAAM,KAAK,KAAK,OAAO,IAAI,IAAI,KAAK,OAAO,cAAc,IAAI,YAAY,EAAE,KAAK,GAAG,CAAC;AAAA,IACnI,OAAO;AACN,aAAO,GAAG,KAAK,OAAO,OAAO,KAAK,KAAK,OAAO,MAAM,KAAK,KAAK,OAAO,IAAI;AAAA,IAC1E;AAAA,EACD;AAEA,MAAI,mBAAmB,MAAM;AAC5B,UAAM,IAAI,MAAM,oDAAoD;AAAA,EACrE;AAEA,MAAI,eAAe,MAAM;AACxB,WAAO,aAAa,KAAK,SAAS;AAAA,EACnC;AAEA,MAAI,sBAAsB,MAAM;AAC/B,WAAO,aAAa,KAAK,gBAAgB;AAAA,EAC1C;AAEA,QAAM,IAAI,MAAM,mBAAmB,KAAK,UAAU,IAAI,CAAC,EAAE;AAC1D;AAEO,SAAS,cAAc,OAA2B;AACxD,SAAO,SAAS,KAAK,EAAE,QAAQ,OAAO,EAAE,EAAE,WAAW,KAAK,GAAG,EAAE,WAAW,KAAK,GAAG;AACnF;AAEO,SAAS,kBAAkB,QAA4B;AAC7D,SAAO,WAAW,OAAO,WAAW,KAAK,GAAG,EAAE,WAAW,KAAK,GAAG,CAAC;AACnE;AAEO,SAAS,SAAS,UAAkB,WAAmB;AAC7D,QAAM,kBAAkB,kBAAkB,UAAU,SAAS;AAC7D,QAAM,EAAE,gBAAgB,iBAAiB,IAAI,iBAAiB,SAAS;AACvE,QAAM,gBAAgB,iBAAiB,oBAAoB;AAE3D,MAAI,kBAAkB,iBAAiB,GAAG;AACzC,UAAM,IAAI,MAAM,wDAAwD;AAAA,EACzE;AAEA,QAAM,aAAa,kBAAkB;AAErC,MAAI,kBAAkB,iBAAiB,GAAG;AACzC,UAAM,IAAI,MAAM,kDAAkD;AAAA,EACnE;AAEA,QAAM,UAAU,aAAa;AAC7B,QAAM,aAAa,aAAa;AAEhC,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;",
  "names": ["nodesByShardIndex"]
}
