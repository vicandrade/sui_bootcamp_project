import type { InferBcsType } from '@mysten/bcs';
import type { SuiMoveNormalizedType } from '@mysten/sui/client';
import type { Committee } from '../contracts/walrus/committee.js';
import type { EncodingType } from '../types.js';
export declare const REQUIRED_ALIGNMENT_BY_ENCODING_TYPE: {
    RS2: number;
    RedStuff: number;
};
export declare const MAX_SYMBOL_SIZE_BY_ENCODING_TYPE: {
    RS2: number;
    RedStuff: number;
};
export declare function encodedBlobLength(unencodedLength: number, nShards: number, encodingType?: EncodingType): number;
export declare function encodedSliverSize(unencodedLength: number, nShards: number, encodingType?: EncodingType): number;
export declare function getSourceSymbols(nShards: number, encodingType?: EncodingType): {
    primarySymbols: number;
    secondarySymbols: number;
};
export declare function isQuorum(size: number, nShards: number): boolean;
export declare function isAboveValidity(size: number, nShards: number): boolean;
export declare function getMaxFaultyNodes(nShards: number): number;
export declare function storageUnitsFromSize(size: number): number;
export declare function toShardIndex(sliverPairIndex: number, blobId: string, numShards: number): number;
export declare function sliverPairIndexFromSecondarySliverIndex(sliverIndex: number, numShards: number): number;
export declare function shardIndexFromSecondarySliverIndex(sliverIndex: number, blobId: string, numShards: number): number;
export declare function toPairIndex(shardIndex: number, blobId: string, numShards: number): number;
export declare function signersToBitmap(signers: number[], committeeSize: number): Uint8Array;
export declare function getShardIndicesByNodeId(committee: InferBcsType<typeof Committee>): Map<string, number[]>;
export declare function nodesByShardIndex(committee: InferBcsType<typeof Committee>): Map<number, string>;
export declare function toTypeString(type: SuiMoveNormalizedType): string;
export declare function urlSafeBase64(bytes: Uint8Array): string;
export declare function fromUrlSafeBase64(base64: string): Uint8Array;
export declare function getSizes(blobSize: number, numShards: number): {
    symbolSize: number;
    rowSize: number;
    columnSize: number;
    blobSize: number;
};
