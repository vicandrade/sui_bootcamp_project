import type { mergeHeaders } from '../storage-node/utils.js';
import type { EncodingType, UploadRelayTipConfig, ProtocolMessageCertificate, WalrusClientRequestOptions } from '../types.js';
export type Fetch = (url: RequestInfo, init?: RequestInit) => Promise<Response>;
export type UploadRelayClientOptions = {
    host: string;
    /**
     * An optional custom fetch function.
     *
     * If not provided, defaults to the global `fetch` function (`globalThis.fetch`).
     *
     * @default globalThis.fetch
     */
    fetch?: Fetch;
    /**
     * An optional timeout for requests.
     * @default 30_000ms (30 seconds)
     */
    timeout?: number;
    /**
     * Callback for individual network errors.
     */
    onError?: (error: Error) => void;
};
export type RequestOptions = {
    path: string;
    timeout?: number;
    headers?: ReturnType<typeof mergeHeaders>;
} & Omit<RequestInit, 'headers'>;
export type WriteBlobToUploadRelayOptions = {
    blobId: string;
    nonce: Uint8Array;
    txDigest: string;
    blob: Uint8Array;
    blobObjectId: string;
    deletable: boolean;
    requiresTip: boolean;
    encodingType?: EncodingType;
} & WalrusClientRequestOptions;
export declare class UploadRelayClient {
    #private;
    host: string;
    constructor({ host, fetch: overriddenFetch, timeout, onError }: UploadRelayClientOptions);
    tipConfig(): Promise<UploadRelayTipConfig | null>;
    writeBlob({ blobId, nonce, txDigest, blob, deletable, blobObjectId, requiresTip, encodingType, ...options }: WriteBlobToUploadRelayOptions): Promise<{
        blobId: string;
        certificate: ProtocolMessageCertificate;
    }>;
}
