import { MoveEnum, MoveStruct } from '../utils/index.js';
/** The epoch state. */
export declare const EpochState: MoveEnum<{
    EpochChangeSync: import("@mysten/sui/bcs").BcsType<number, number, "u16">;
    EpochChangeDone: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    NextParamsSelected: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
}, "@local-pkg/walrus::staking_inner::EpochState">;
export declare const StakingInnerV1: MoveStruct<{
    /** The number of shards in the system. */
    n_shards: import("@mysten/sui/bcs").BcsType<number, number, "u16">;
    /** The duration of an epoch in ms. Does not affect the first (zero) epoch. */
    epoch_duration: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /**
     * Special parameter, used only for the first epoch. The timestamp when the first
     * epoch can be started.
     */
    first_epoch_start: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /**
     * Stored staking pools, each identified by a unique `ID` and contains the
     * `StakingPool` object. Uses `ObjectTable` to make the pool discovery easier by
     * avoiding wrapping.
     *
     * The key is the ID of the staking pool.
     */
    pools: MoveStruct<{
        id: MoveStruct<{
            id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        }, "0x2::object::UID">;
        size: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "0x2::object_table::ObjectTable">;
    /**
     * The current epoch of the Walrus system. The epochs are not the same as the Sui
     * epochs, not to be mistaken with `ctx.epoch()`.
     */
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    /** Stores the active set of storage nodes. Tracks the total amount of staked WAL. */
    active_set: MoveStruct<{
        id: MoveStruct<{
            id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        }, "0x2::object::UID">;
    }, "@local-pkg/walrus::extended_field::ExtendedField">;
    /** The next committee in the system. */
    next_committee: import("@mysten/sui/bcs").BcsType<{
        contents: {
            key: string;
            value: number[];
        }[];
    }[] | null, {
        contents: Iterable<{
            key: string | Uint8Array<ArrayBufferLike>;
            value: Iterable<number> & {
                length: number;
            };
        }> & {
            length: number;
        };
    }[] | null | undefined, "Option<@local-pkg/walrus::committee::Committee>">;
    /** The current committee in the system. */
    committee: import("../utils/index.js").MoveTuple<MoveStruct<{
        contents: import("@mysten/sui/bcs").BcsType<{
            key: string;
            value: number[];
        }[], Iterable<{
            key: string | Uint8Array<ArrayBufferLike>;
            value: Iterable<number> & {
                length: number;
            };
        }> & {
            length: number;
        }, string>;
    }, "0x2::vec_map::VecMap<bytes[32], vector<u16>>">[], "@local-pkg/walrus::committee::Committee">;
    /** The previous committee in the system. */
    previous_committee: import("../utils/index.js").MoveTuple<MoveStruct<{
        contents: import("@mysten/sui/bcs").BcsType<{
            key: string;
            value: number[];
        }[], Iterable<{
            key: string | Uint8Array<ArrayBufferLike>;
            value: Iterable<number> & {
                length: number;
            };
        }> & {
            length: number;
        }, string>;
    }, "0x2::vec_map::VecMap<bytes[32], vector<u16>>">[], "@local-pkg/walrus::committee::Committee">;
    /** The next epoch parameters. */
    next_epoch_params: import("@mysten/sui/bcs").BcsType<{
        total_capacity_size: string;
        storage_price_per_unit_size: string;
        write_price_per_unit_size: string;
    } | null, {
        total_capacity_size: string | number | bigint;
        storage_price_per_unit_size: string | number | bigint;
        write_price_per_unit_size: string | number | bigint;
    } | null | undefined, "Option<@local-pkg/walrus::epoch_parameters::EpochParams>">;
    /** The state of the current epoch. */
    epoch_state: MoveEnum<{
        EpochChangeSync: import("@mysten/sui/bcs").BcsType<number, number, "u16">;
        EpochChangeDone: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
        NextParamsSelected: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "@local-pkg/walrus::staking_inner::EpochState">;
    /**
     * The public keys for the next epoch. The keys are stored in a sorted `VecMap`,
     * and mirror the order of the nodes in the `next_committee`. The value is set in
     * the `select_committee` function and consumed in the `next_bls_committee`
     * function.
     */
    next_epoch_public_keys: MoveStruct<{
        id: MoveStruct<{
            id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        }, "0x2::object::UID">;
    }, "@local-pkg/walrus::extended_field::ExtendedField">;
}, "@local-pkg/walrus::staking_inner::StakingInnerV1">;
