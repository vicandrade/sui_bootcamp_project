import { MoveStruct } from '../utils/index.js';
import type { RawTransactionArgument } from '../utils/index.js';
import type { Transaction } from '@mysten/sui/transactions';
export declare const INIT: MoveStruct<{
    dummy_field: import("@mysten/sui/bcs").BcsType<boolean, boolean, "bool">;
}, "@local-pkg/walrus::init::INIT">;
export declare const InitCap: MoveStruct<{
    id: MoveStruct<{
        id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    }, "0x2::object::UID">;
    publisher: MoveStruct<{
        id: MoveStruct<{
            id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        }, "0x2::object::UID">;
        package: import("@mysten/sui/bcs").BcsType<string, string, "string">;
        module_name: import("@mysten/sui/bcs").BcsType<string, string, "string">;
    }, "0x2::package::Publisher">;
}, "@local-pkg/walrus::init::InitCap">;
export interface InitializeWalrusArguments {
    initCap: RawTransactionArgument<string>;
    upgradeCap: RawTransactionArgument<string>;
    epochZeroDuration: RawTransactionArgument<number | bigint>;
    epochDuration: RawTransactionArgument<number | bigint>;
    nShards: RawTransactionArgument<number>;
    maxEpochsAhead: RawTransactionArgument<number>;
}
export interface InitializeWalrusOptions {
    package?: string;
    arguments: InitializeWalrusArguments | [
        initCap: RawTransactionArgument<string>,
        upgradeCap: RawTransactionArgument<string>,
        epochZeroDuration: RawTransactionArgument<number | bigint>,
        epochDuration: RawTransactionArgument<number | bigint>,
        nShards: RawTransactionArgument<number>,
        maxEpochsAhead: RawTransactionArgument<number>
    ];
}
/**
 * Initializes Walrus and shares the system and staking objects.
 *
 * This can only be called once, after which the `InitCap` is destroyed.
 */
export declare function initializeWalrus(options: InitializeWalrusOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface MigrateArguments {
    staking: RawTransactionArgument<string>;
    system: RawTransactionArgument<string>;
}
export interface MigrateOptions {
    package?: string;
    arguments: MigrateArguments | [staking: RawTransactionArgument<string>, system: RawTransactionArgument<string>];
}
/**
 * Migrates the staking and system objects to the new package ID.
 *
 * This must be called in the new package after an upgrade is committed to emit an
 * event that informs all storage nodes and prevent previous package versions from
 * being used.
 *
 * Requires the migration epoch to be set first on the staking object, which then
 * enables the migration at the start of the next epoch.
 */
export declare function migrate(options: MigrateOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
