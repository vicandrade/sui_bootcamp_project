import { MoveStruct, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/sui/object.js";
const $moduleName = "@local-pkg/walrus::storage_resource";
const Storage = new MoveStruct({
  name: `${$moduleName}::Storage`,
  fields: {
    id: object.UID,
    start_epoch: bcs.u32(),
    end_epoch: bcs.u32(),
    storage_size: bcs.u64()
  }
});
function startEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "start_epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function endEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "end_epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function size(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "size",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function splitByEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`, "u32"];
  const parameterNames = ["storage", "splitEpoch"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "split_by_epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function splitBySize(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`, "u64"];
  const parameterNames = ["storage", "splitSize"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "split_by_size",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function fusePeriods(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_resource::Storage`,
    `${packageAddress}::storage_resource::Storage`
  ];
  const parameterNames = ["first", "second"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "fuse_periods",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function fuseAmount(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_resource::Storage`,
    `${packageAddress}::storage_resource::Storage`
  ];
  const parameterNames = ["first", "second"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "fuse_amount",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function fuse(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_resource::Storage`,
    `${packageAddress}::storage_resource::Storage`
  ];
  const parameterNames = ["first", "second"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "fuse",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function destroy(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
  const parameterNames = ["storage"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "destroy",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  Storage,
  destroy,
  endEpoch,
  fuse,
  fuseAmount,
  fusePeriods,
  size,
  splitByEpoch,
  splitBySize,
  startEpoch
};
//# sourceMappingURL=storage_resource.js.map
