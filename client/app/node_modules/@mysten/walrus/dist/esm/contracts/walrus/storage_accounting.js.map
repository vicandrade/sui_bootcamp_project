{
  "version": 3,
  "sources": ["../../../../src/contracts/walrus/storage_accounting.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { MoveStruct, normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport * as balance from './deps/sui/balance.js';\nconst $moduleName = '@local-pkg/walrus::storage_accounting';\nexport const FutureAccounting = new MoveStruct({\n\tname: `${$moduleName}::FutureAccounting`,\n\tfields: {\n\t\tepoch: bcs.u32(),\n\t\t/**\n\t\t * This field stores `used_capacity` for the epoch. Currently, impossible to rename\n\t\t * due to package upgrade limitations.\n\t\t */\n\t\tused_capacity: bcs.u64(),\n\t\trewards_to_distribute: balance.Balance,\n\t},\n});\nexport const FutureAccountingRingBuffer = new MoveStruct({\n\tname: `${$moduleName}::FutureAccountingRingBuffer`,\n\tfields: {\n\t\tcurrent_index: bcs.u32(),\n\t\tlength: bcs.u32(),\n\t\tring_buffer: bcs.vector(FutureAccounting),\n\t},\n});\nexport interface MaxEpochsAheadArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface MaxEpochsAheadOptions {\n\tpackage?: string;\n\targuments: MaxEpochsAheadArguments | [self: RawTransactionArgument<string>];\n}\n/** The maximum number of epochs for which we can use `self`. */\nexport function maxEpochsAhead(options: MaxEpochsAheadOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::storage_accounting::FutureAccountingRingBuffer`,\n\t] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_accounting',\n\t\t\tfunction: 'max_epochs_ahead',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface RingLookupArguments {\n\tself: RawTransactionArgument<string>;\n\tepochsInFuture: RawTransactionArgument<number>;\n}\nexport interface RingLookupOptions {\n\tpackage?: string;\n\targuments:\n\t\t| RingLookupArguments\n\t\t| [self: RawTransactionArgument<string>, epochsInFuture: RawTransactionArgument<number>];\n}\n/** Read-only lookup for an element in the `FutureAccountingRingBuffer` */\nexport function ringLookup(options: RingLookupOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::storage_accounting::FutureAccountingRingBuffer`,\n\t\t'u32',\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'epochsInFuture'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_accounting',\n\t\t\tfunction: 'ring_lookup',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface EpochArguments {\n\taccounting: RawTransactionArgument<string>;\n}\nexport interface EpochOptions {\n\tpackage?: string;\n\targuments: EpochArguments | [accounting: RawTransactionArgument<string>];\n}\n/** Accessor for epoch, read-only. */\nexport function epoch(options: EpochOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::storage_accounting::FutureAccounting`,\n\t] satisfies string[];\n\tconst parameterNames = ['accounting'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_accounting',\n\t\t\tfunction: 'epoch',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface UsedCapacityArguments {\n\taccounting: RawTransactionArgument<string>;\n}\nexport interface UsedCapacityOptions {\n\tpackage?: string;\n\targuments: UsedCapacityArguments | [accounting: RawTransactionArgument<string>];\n}\n/** Accessor for used_capacity, read-only. */\nexport function usedCapacity(options: UsedCapacityOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::storage_accounting::FutureAccounting`,\n\t] satisfies string[];\n\tconst parameterNames = ['accounting'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_accounting',\n\t\t\tfunction: 'used_capacity',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface RewardsArguments {\n\taccounting: RawTransactionArgument<string>;\n}\nexport interface RewardsOptions {\n\tpackage?: string;\n\targuments: RewardsArguments | [accounting: RawTransactionArgument<string>];\n}\n/** Accessor for rewards, read-only. */\nexport function rewards(options: RewardsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::storage_accounting::FutureAccounting`,\n\t] satisfies string[];\n\tconst parameterNames = ['accounting'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_accounting',\n\t\t\tfunction: 'rewards',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "AAEA,SAAS,YAAY,8BAA8B;AAEnD,SAAS,WAAW;AAEpB,YAAY,aAAa;AACzB,MAAM,cAAc;AACb,MAAM,mBAAmB,IAAI,WAAW;AAAA,EAC9C,MAAM,GAAG,WAAW;AAAA,EACpB,QAAQ;AAAA,IACP,OAAO,IAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,IAKf,eAAe,IAAI,IAAI;AAAA,IACvB,uBAAuB,QAAQ;AAAA,EAChC;AACD,CAAC;AACM,MAAM,6BAA6B,IAAI,WAAW;AAAA,EACxD,MAAM,GAAG,WAAW;AAAA,EACpB,QAAQ;AAAA,IACP,eAAe,IAAI,IAAI;AAAA,IACvB,QAAQ,IAAI,IAAI;AAAA,IAChB,aAAa,IAAI,OAAO,gBAAgB;AAAA,EACzC;AACD,CAAC;AASM,SAAS,eAAe,SAAgC;AAC9D,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,EAClB;AACA,QAAM,iBAAiB,CAAC,MAAM;AAC9B,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AAYO,SAAS,WAAW,SAA4B;AACtD,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,IACjB;AAAA,EACD;AACA,QAAM,iBAAiB,CAAC,QAAQ,gBAAgB;AAChD,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AASO,SAAS,MAAM,SAAuB;AAC5C,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,EAClB;AACA,QAAM,iBAAiB,CAAC,YAAY;AACpC,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AASO,SAAS,aAAa,SAA8B;AAC1D,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,EAClB;AACA,QAAM,iBAAiB,CAAC,YAAY;AACpC,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AASO,SAAS,QAAQ,SAAyB;AAChD,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,EAClB;AACA,QAAM,iBAAiB,CAAC,YAAY;AACpC,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;",
  "names": []
}
