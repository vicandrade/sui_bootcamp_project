import { MoveStruct, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/sui/object.js";
const $moduleName = "@local-pkg/walrus::system";
const System = new MoveStruct({
  name: `${$moduleName}::System`,
  fields: {
    id: object.UID,
    version: bcs.u64(),
    package_id: bcs.Address,
    new_package_id: bcs.option(bcs.Address)
  }
});
function invalidateBlobId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["system", "signature", "membersBitmap", "message"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "invalidate_blob_id",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function certifyEventBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "u256",
    "u256",
    "u64",
    "u8",
    "u64",
    "u32"
  ];
  const parameterNames = [
    "system",
    "cap",
    "blobId",
    "rootHash",
    "size",
    "encodingType",
    "endingCheckpointSequenceNum",
    "epoch"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "certify_event_blob",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function reserveSpace(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    "u64",
    "u32",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "storageAmount", "epochsAhead", "payment"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "reserve_space",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function reserveSpaceForEpochs(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    "u64",
    "u32",
    "u32",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "storageAmount", "startEpoch", "endEpoch", "payment"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "reserve_space_for_epochs",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function registerBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_resource::Storage`,
    "u256",
    "u256",
    "u64",
    "u8",
    "bool",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = [
    "self",
    "storage",
    "blobId",
    "rootHash",
    "size",
    "encodingType",
    "deletable",
    "writePayment"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "register_blob",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function certifyBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::blob::Blob`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["self", "blob", "signature", "signersBitmap", "message"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "certify_blob",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function deleteBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::blob::Blob`
  ];
  const parameterNames = ["self", "blob"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "delete_blob",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function extendBlobWithResource(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::blob::Blob`,
    `${packageAddress}::storage_resource::Storage`
  ];
  const parameterNames = ["self", "blob", "extension"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "extend_blob_with_resource",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function extendBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::blob::Blob`,
    "u32",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "blob", "extendedEpochs", "payment"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "extend_blob",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function addSubsidy(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
    "u32"
  ];
  const parameterNames = ["system", "subsidy", "epochsAhead"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "add_subsidy",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function addPerEpochSubsidies(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `vector<0x0000000000000000000000000000000000000000000000000000000000000002::balance::Balance<${packageAddress}::wal::WAL>>`
  ];
  const parameterNames = ["system", "subsidies"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "add_per_epoch_subsidies",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function updateProtocolVersion(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["self", "cap", "signature", "membersBitmap", "message"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "update_protocol_version",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function registerDenyListUpdate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "u256",
    "u64"
  ];
  const parameterNames = ["self", "cap", "denyListRoot", "denyListSequence"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "register_deny_list_update",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function updateDenyList(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["self", "cap", "signature", "membersBitmap", "message"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "update_deny_list",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function deleteDenyListedBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["self", "signature", "membersBitmap", "message"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "delete_deny_listed_blob",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function epoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function totalCapacitySize(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "total_capacity_size",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function usedCapacitySize(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "used_capacity_size",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function nShards(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "n_shards",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function futureAccounting(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "future_accounting",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function version(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["system"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "version",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  System,
  addPerEpochSubsidies,
  addSubsidy,
  certifyBlob,
  certifyEventBlob,
  deleteBlob,
  deleteDenyListedBlob,
  epoch,
  extendBlob,
  extendBlobWithResource,
  futureAccounting,
  invalidateBlobId,
  nShards,
  registerBlob,
  registerDenyListUpdate,
  reserveSpace,
  reserveSpaceForEpochs,
  totalCapacitySize,
  updateDenyList,
  updateProtocolVersion,
  usedCapacitySize,
  version
};
//# sourceMappingURL=system.js.map
