{
  "version": 3,
  "sources": ["../../../../src/contracts/walrus/shared_blob.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { MoveStruct, normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport * as object from './deps/sui/object.js';\nimport * as blob_1 from './blob.js';\nimport * as balance from './deps/sui/balance.js';\nconst $moduleName = '@local-pkg/walrus::shared_blob';\nexport const SharedBlob = new MoveStruct({\n\tname: `${$moduleName}::SharedBlob`,\n\tfields: {\n\t\tid: object.UID,\n\t\tblob: blob_1.Blob,\n\t\tfunds: balance.Balance,\n\t},\n});\nexport interface NewArguments {\n\tblob: RawTransactionArgument<string>;\n}\nexport interface NewOptions {\n\tpackage?: string;\n\targuments: NewArguments | [blob: RawTransactionArgument<string>];\n}\n/** Shares the provided `blob` as a `SharedBlob` with zero funds. */\nexport function _new(options: NewOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::blob::Blob`] satisfies string[];\n\tconst parameterNames = ['blob'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'shared_blob',\n\t\t\tfunction: 'new',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface NewFundedArguments {\n\tblob: RawTransactionArgument<string>;\n\tfunds: RawTransactionArgument<string>;\n}\nexport interface NewFundedOptions {\n\tpackage?: string;\n\targuments:\n\t\t| NewFundedArguments\n\t\t| [blob: RawTransactionArgument<string>, funds: RawTransactionArgument<string>];\n}\n/** Shares the provided `blob` as a `SharedBlob` with funds. */\nexport function newFunded(options: NewFundedOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::blob::Blob`,\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t] satisfies string[];\n\tconst parameterNames = ['blob', 'funds'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'shared_blob',\n\t\t\tfunction: 'new_funded',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface FundArguments {\n\tself: RawTransactionArgument<string>;\n\taddedFunds: RawTransactionArgument<string>;\n}\nexport interface FundOptions {\n\tpackage?: string;\n\targuments:\n\t\t| FundArguments\n\t\t| [self: RawTransactionArgument<string>, addedFunds: RawTransactionArgument<string>];\n}\n/** Adds the provided `Coin` to the stored funds. */\nexport function fund(options: FundOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::shared_blob::SharedBlob`,\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'addedFunds'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'shared_blob',\n\t\t\tfunction: 'fund',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ExtendArguments {\n\tself: RawTransactionArgument<string>;\n\tsystem: RawTransactionArgument<string>;\n\textendedEpochs: RawTransactionArgument<number>;\n}\nexport interface ExtendOptions {\n\tpackage?: string;\n\targuments:\n\t\t| ExtendArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\tsystem: RawTransactionArgument<string>,\n\t\t\t\textendedEpochs: RawTransactionArgument<number>,\n\t\t  ];\n}\n/**\n * Extends the lifetime of the wrapped `Blob` by `extended_epochs` epochs if the\n * stored funds are sufficient and the new lifetime does not exceed the maximum\n * lifetime.\n */\nexport function extend(options: ExtendOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::shared_blob::SharedBlob`,\n\t\t`${packageAddress}::system::System`,\n\t\t'u32',\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'system', 'extendedEpochs'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'shared_blob',\n\t\t\tfunction: 'extend',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface BlobArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface BlobOptions {\n\tpackage?: string;\n\targuments: BlobArguments | [self: RawTransactionArgument<string>];\n}\n/** Returns a reference to the wrapped `Blob`. */\nexport function blob(options: BlobOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::shared_blob::SharedBlob`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'shared_blob',\n\t\t\tfunction: 'blob',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface FundsArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface FundsOptions {\n\tpackage?: string;\n\targuments: FundsArguments | [self: RawTransactionArgument<string>];\n}\n/** Returns the balance of funds stored in the `SharedBlob`. */\nexport function funds(options: FundsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::shared_blob::SharedBlob`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'shared_blob',\n\t\t\tfunction: 'funds',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "AAEA,SAAS,YAAY,8BAA8B;AAGnD,YAAY,YAAY;AACxB,YAAY,YAAY;AACxB,YAAY,aAAa;AACzB,MAAM,cAAc;AACb,MAAM,aAAa,IAAI,WAAW;AAAA,EACxC,MAAM,GAAG,WAAW;AAAA,EACpB,QAAQ;AAAA,IACP,IAAI,OAAO;AAAA,IACX,MAAM,OAAO;AAAA,IACb,OAAO,QAAQ;AAAA,EAChB;AACD,CAAC;AASM,SAAS,KAAK,SAAqB;AACzC,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,GAAG,cAAc,cAAc;AACvD,QAAM,iBAAiB,CAAC,MAAM;AAC9B,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AAYO,SAAS,UAAU,SAA2B;AACpD,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,IACjB,kFAAkF,cAAc;AAAA,EACjG;AACA,QAAM,iBAAiB,CAAC,QAAQ,OAAO;AACvC,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AAYO,SAAS,KAAK,SAAsB;AAC1C,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,IACjB,kFAAkF,cAAc;AAAA,EACjG;AACA,QAAM,iBAAiB,CAAC,QAAQ,YAAY;AAC5C,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AAqBO,SAAS,OAAO,SAAwB;AAC9C,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,IACjB,GAAG,cAAc;AAAA,IACjB;AAAA,EACD;AACA,QAAM,iBAAiB,CAAC,QAAQ,UAAU,gBAAgB;AAC1D,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AASO,SAAS,KAAK,SAAsB;AAC1C,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,GAAG,cAAc,2BAA2B;AACpE,QAAM,iBAAiB,CAAC,MAAM;AAC9B,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AASO,SAAS,MAAM,SAAuB;AAC5C,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,GAAG,cAAc,2BAA2B;AACpE,QAAM,iBAAiB,CAAC,MAAM;AAC9B,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;",
  "names": []
}
