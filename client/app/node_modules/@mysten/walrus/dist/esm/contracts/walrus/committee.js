import { MoveTuple, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
import * as vec_map from "./deps/sui/vec_map.js";
const $moduleName = "@local-pkg/walrus::committee";
const Committee = new MoveTuple({
  name: `${$moduleName}::Committee`,
  fields: [vec_map.VecMap(bcs.Address, bcs.vector(bcs.u16()))]
});
function shards(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::committee::Committee`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
  ];
  const parameterNames = ["cmt", "nodeId"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "committee",
    function: "shards",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function size(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::committee::Committee`];
  const parameterNames = ["cmt"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "committee",
    function: "size",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function inner(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::committee::Committee`];
  const parameterNames = ["cmt"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "committee",
    function: "inner",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function toInner(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::committee::Committee`];
  const parameterNames = ["cmt"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "committee",
    function: "to_inner",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  Committee,
  inner,
  shards,
  size,
  toInner
};
//# sourceMappingURL=committee.js.map
