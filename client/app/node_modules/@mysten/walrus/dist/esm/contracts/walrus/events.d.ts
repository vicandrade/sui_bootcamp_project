/**
 * Module to emit events. Used to allow filtering all events in the Rust client (as
 * work-around for the lack of composable event filters).
 */
import { MoveStruct } from '../utils/index.js';
export declare const BlobRegistered: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    blob_id: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u256">;
    size: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    encoding_type: import("@mysten/sui/bcs").BcsType<number, number, "u8">;
    end_epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    deletable: import("@mysten/sui/bcs").BcsType<boolean, boolean, "bool">;
    object_id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
}, "@local-pkg/walrus::events::BlobRegistered">;
export declare const BlobCertified: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    blob_id: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u256">;
    end_epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    deletable: import("@mysten/sui/bcs").BcsType<boolean, boolean, "bool">;
    object_id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    is_extension: import("@mysten/sui/bcs").BcsType<boolean, boolean, "bool">;
}, "@local-pkg/walrus::events::BlobCertified">;
export declare const BlobDeleted: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    blob_id: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u256">;
    end_epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    object_id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    was_certified: import("@mysten/sui/bcs").BcsType<boolean, boolean, "bool">;
}, "@local-pkg/walrus::events::BlobDeleted">;
export declare const InvalidBlobID: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    blob_id: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u256">;
}, "@local-pkg/walrus::events::InvalidBlobID">;
export declare const EpochChangeStart: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
}, "@local-pkg/walrus::events::EpochChangeStart">;
export declare const EpochChangeDone: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
}, "@local-pkg/walrus::events::EpochChangeDone">;
export declare const ShardsReceived: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    shards: import("@mysten/sui/bcs").BcsType<number[], Iterable<number> & {
        length: number;
    }, string>;
}, "@local-pkg/walrus::events::ShardsReceived">;
export declare const EpochParametersSelected: MoveStruct<{
    next_epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
}, "@local-pkg/walrus::events::EpochParametersSelected">;
export declare const ShardRecoveryStart: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    shards: import("@mysten/sui/bcs").BcsType<number[], Iterable<number> & {
        length: number;
    }, string>;
}, "@local-pkg/walrus::events::ShardRecoveryStart">;
export declare const ContractUpgraded: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    package_id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    version: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
}, "@local-pkg/walrus::events::ContractUpgraded">;
export declare const RegisterDenyListUpdate: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    root: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u256">;
    sequence_number: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    node_id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
}, "@local-pkg/walrus::events::RegisterDenyListUpdate">;
export declare const DenyListUpdate: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    root: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u256">;
    sequence_number: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    node_id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
}, "@local-pkg/walrus::events::DenyListUpdate">;
export declare const DenyListBlobDeleted: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    blob_id: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u256">;
}, "@local-pkg/walrus::events::DenyListBlobDeleted">;
export declare const ContractUpgradeProposed: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    package_digest: import("@mysten/sui/bcs").BcsType<number[], Iterable<number> & {
        length: number;
    }, string>;
}, "@local-pkg/walrus::events::ContractUpgradeProposed">;
export declare const ContractUpgradeQuorumReached: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    package_digest: import("@mysten/sui/bcs").BcsType<number[], Iterable<number> & {
        length: number;
    }, string>;
}, "@local-pkg/walrus::events::ContractUpgradeQuorumReached">;
export declare const ProtocolVersionUpdated: MoveStruct<{
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    start_epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    protocol_version: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
}, "@local-pkg/walrus::events::ProtocolVersionUpdated">;
