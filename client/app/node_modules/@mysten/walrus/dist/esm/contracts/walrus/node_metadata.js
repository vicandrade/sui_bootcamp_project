import { MoveStruct, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
import * as vec_map from "./deps/sui/vec_map.js";
const $moduleName = "@local-pkg/walrus::node_metadata";
const NodeMetadata = new MoveStruct({
  name: `${$moduleName}::NodeMetadata`,
  fields: {
    image_url: bcs.string(),
    project_url: bcs.string(),
    description: bcs.string(),
    extra_fields: vec_map.VecMap(bcs.string(), bcs.string())
  }
});
function _new(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["imageUrl", "projectUrl", "description"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "new",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setImageUrl(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::node_metadata::NodeMetadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["metadata", "imageUrl"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "set_image_url",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setProjectUrl(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::node_metadata::NodeMetadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["metadata", "projectUrl"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "set_project_url",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setDescription(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::node_metadata::NodeMetadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["metadata", "description"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "set_description",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setExtraFields(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::node_metadata::NodeMetadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::vec_map::VecMap<0x0000000000000000000000000000000000000000000000000000000000000001::string::String, 0x0000000000000000000000000000000000000000000000000000000000000001::string::String>"
  ];
  const parameterNames = ["metadata", "extraFields"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "set_extra_fields",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function imageUrl(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`];
  const parameterNames = ["metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "image_url",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function projectUrl(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`];
  const parameterNames = ["metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "project_url",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function description(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`];
  const parameterNames = ["metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "description",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function extraFields(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`];
  const parameterNames = ["metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "extra_fields",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  NodeMetadata,
  _new,
  description,
  extraFields,
  imageUrl,
  projectUrl,
  setDescription,
  setExtraFields,
  setImageUrl,
  setProjectUrl
};
//# sourceMappingURL=node_metadata.js.map
