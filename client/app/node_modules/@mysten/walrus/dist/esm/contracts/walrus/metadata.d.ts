/** Contains the metadata for Blobs on Walrus. */
import { MoveStruct } from '../utils/index.js';
import type { RawTransactionArgument } from '../utils/index.js';
import type { Transaction } from '@mysten/sui/transactions';
export declare const Metadata: MoveStruct<{
    metadata: MoveStruct<{
        contents: import("@mysten/sui/bcs").BcsType<{
            key: string;
            value: string;
        }[], Iterable<{
            key: string;
            value: string;
        }> & {
            length: number;
        }, string>;
    }, "0x2::vec_map::VecMap<string, string>">;
}, "@local-pkg/walrus::metadata::Metadata">;
export interface NewOptions {
    package?: string;
    arguments?: [];
}
/** Creates a new instance of Metadata. */
export declare function _new(options?: NewOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface InsertOrUpdateArguments {
    self: RawTransactionArgument<string>;
    key: RawTransactionArgument<string>;
    value: RawTransactionArgument<string>;
}
export interface InsertOrUpdateOptions {
    package?: string;
    arguments: InsertOrUpdateArguments | [
        self: RawTransactionArgument<string>,
        key: RawTransactionArgument<string>,
        value: RawTransactionArgument<string>
    ];
}
/**
 * Inserts a key-value pair into the metadata.
 *
 * If the key is already present, the value is updated.
 */
export declare function insertOrUpdate(options: InsertOrUpdateOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface RemoveArguments {
    self: RawTransactionArgument<string>;
    key: RawTransactionArgument<string>;
}
export interface RemoveOptions {
    package?: string;
    arguments: RemoveArguments | [self: RawTransactionArgument<string>, key: RawTransactionArgument<string>];
}
/** Removes the metadata associated with the given key. */
export declare function remove(options: RemoveOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface RemoveIfExistsArguments {
    self: RawTransactionArgument<string>;
    key: RawTransactionArgument<string>;
}
export interface RemoveIfExistsOptions {
    package?: string;
    arguments: RemoveIfExistsArguments | [self: RawTransactionArgument<string>, key: RawTransactionArgument<string>];
}
/**
 * Removes the metadata associated with the given key, if it exists.
 *
 * Optionally returns the previous value associated with the key.
 */
export declare function removeIfExists(options: RemoveIfExistsOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
