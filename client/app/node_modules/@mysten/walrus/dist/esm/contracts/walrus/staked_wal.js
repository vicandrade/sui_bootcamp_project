import { MoveEnum, MoveStruct, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/sui/object.js";
import * as balance from "./deps/sui/balance.js";
const $moduleName = "@local-pkg/walrus::staked_wal";
const StakedWalState = new MoveEnum({
  name: `${$moduleName}::StakedWalState`,
  fields: {
    Staked: null,
    Withdrawing: new MoveStruct({
      name: `StakedWalState.Withdrawing`,
      fields: {
        withdraw_epoch: bcs.u32()
      }
    })
  }
});
const StakedWal = new MoveStruct({
  name: `${$moduleName}::StakedWal`,
  fields: {
    id: object.UID,
    /** Whether the staked WAL is active or withdrawing. */
    state: StakedWalState,
    /** ID of the staking pool. */
    node_id: bcs.Address,
    /** The staked amount. */
    principal: balance.Balance,
    /** The Walrus epoch when the staked WAL was activated. */
    activation_epoch: bcs.u32()
  }
});
function nodeId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
  const parameterNames = ["sw"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staked_wal",
    function: "node_id",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function value(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
  const parameterNames = ["sw"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staked_wal",
    function: "value",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function activationEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
  const parameterNames = ["sw"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staked_wal",
    function: "activation_epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function isStaked(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
  const parameterNames = ["sw"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staked_wal",
    function: "is_staked",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function isWithdrawing(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
  const parameterNames = ["sw"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staked_wal",
    function: "is_withdrawing",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function withdrawEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
  const parameterNames = ["sw"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staked_wal",
    function: "withdraw_epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function join(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staked_wal::StakedWal`,
    `${packageAddress}::staked_wal::StakedWal`
  ];
  const parameterNames = ["sw", "other"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staked_wal",
    function: "join",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function split(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`, "u64"];
  const parameterNames = ["sw", "amount"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staked_wal",
    function: "split",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  StakedWal,
  StakedWalState,
  activationEpoch,
  isStaked,
  isWithdrawing,
  join,
  nodeId,
  split,
  value,
  withdrawEpoch
};
//# sourceMappingURL=staked_wal.js.map
