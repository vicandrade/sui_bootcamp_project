import { MoveStruct, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/sui/object.js";
const $moduleName = "@local-pkg/walrus::staking";
const Staking = new MoveStruct({
  name: `${$moduleName}::Staking`,
  fields: {
    id: object.UID,
    version: bcs.u64(),
    package_id: bcs.Address,
    new_package_id: bcs.option(bcs.Address)
  }
});
function registerCandidate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
    `${packageAddress}::node_metadata::NodeMetadata`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>",
    "u16",
    "u64",
    "u64",
    "u64"
  ];
  const parameterNames = [
    "staking",
    "name",
    "networkAddress",
    "metadata",
    "publicKey",
    "networkPublicKey",
    "proofOfPossession",
    "commissionRate",
    "storagePrice",
    "writePrice",
    "nodeCapacity"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "register_candidate",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setNextCommission(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "u16"
  ];
  const parameterNames = ["staking", "cap", "commissionRate"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_next_commission",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function collectCommission(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
    `${packageAddress}::auth::Authenticated`
  ];
  const parameterNames = ["staking", "nodeId", "auth"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "collect_commission",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setCommissionReceiver(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
    `${packageAddress}::auth::Authenticated`,
    `${packageAddress}::auth::Authorized`
  ];
  const parameterNames = ["staking", "nodeId", "auth", "receiver"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_commission_receiver",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setGovernanceAuthorized(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
    `${packageAddress}::auth::Authenticated`,
    `${packageAddress}::auth::Authorized`
  ];
  const parameterNames = ["staking", "nodeId", "auth", "authorized"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_governance_authorized",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function committee(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staking::Staking`];
  const parameterNames = ["staking"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "committee",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function computeNextCommittee(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staking::Staking`];
  const parameterNames = ["staking"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "compute_next_committee",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setStoragePriceVote(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "u64"
  ];
  const parameterNames = ["self", "cap", "storagePrice"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_storage_price_vote",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setWritePriceVote(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "u64"
  ];
  const parameterNames = ["self", "cap", "writePrice"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_write_price_vote",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setNodeCapacityVote(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "u64"
  ];
  const parameterNames = ["self", "cap", "nodeCapacity"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_node_capacity_vote",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function nodeMetadata(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
  ];
  const parameterNames = ["self", "nodeId"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "node_metadata",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setNextPublicKey(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["self", "cap", "publicKey", "proofOfPossession"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_next_public_key",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setName(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "cap", "name"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_name",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setNetworkAddress(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "cap", "networkAddress"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_network_address",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setNetworkPublicKey(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "vector<u8>"
  ];
  const parameterNames = ["self", "cap", "networkPublicKey"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_network_public_key",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setNodeMetadata(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    `${packageAddress}::node_metadata::NodeMetadata`
  ];
  const parameterNames = ["self", "cap", "metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_node_metadata",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function votingEnd(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock"
  ];
  const parameterNames = ["staking"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "voting_end",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function initiateEpochChange(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::system::System`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock"
  ];
  const parameterNames = ["staking", "system"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "initiate_epoch_change",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function epochSyncDone(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "u32",
    "0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock"
  ];
  const parameterNames = ["staking", "cap", "epoch"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "epoch_sync_done",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function stakeWithPool(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
  ];
  const parameterNames = ["staking", "toStake", "nodeId"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "stake_with_pool",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function requestWithdrawStake(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::staked_wal::StakedWal`
  ];
  const parameterNames = ["staking", "stakedWal"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "request_withdraw_stake",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function withdrawStake(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::staked_wal::StakedWal`
  ];
  const parameterNames = ["staking", "stakedWal"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "withdraw_stake",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function tryJoinActiveSet(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::storage_node::StorageNodeCap`
  ];
  const parameterNames = ["staking", "cap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "try_join_active_set",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function addCommissionToPools(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    "vector<0x0000000000000000000000000000000000000000000000000000000000000002::object::ID>",
    `vector<0x0000000000000000000000000000000000000000000000000000000000000002::balance::Balance<${packageAddress}::wal::WAL>>`
  ];
  const parameterNames = ["staking", "nodeIds", "commissions"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "add_commission_to_pools",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function epoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staking::Staking`];
  const parameterNames = ["staking"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function calculateRewards(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
    "u64",
    "u32",
    "u32"
  ];
  const parameterNames = [
    "staking",
    "nodeId",
    "stakedPrincipal",
    "activationEpoch",
    "withdrawEpoch"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "calculate_rewards",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function canWithdrawStakedWalEarly(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::staked_wal::StakedWal`
  ];
  const parameterNames = ["staking", "stakedWal"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "can_withdraw_staked_wal_early",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setMigrationEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::staking::Staking`];
  const parameterNames = ["staking"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "staking",
    function: "set_migration_epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  Staking,
  addCommissionToPools,
  calculateRewards,
  canWithdrawStakedWalEarly,
  collectCommission,
  committee,
  computeNextCommittee,
  epoch,
  epochSyncDone,
  initiateEpochChange,
  nodeMetadata,
  registerCandidate,
  requestWithdrawStake,
  setCommissionReceiver,
  setGovernanceAuthorized,
  setMigrationEpoch,
  setName,
  setNetworkAddress,
  setNetworkPublicKey,
  setNextCommission,
  setNextPublicKey,
  setNodeCapacityVote,
  setNodeMetadata,
  setStoragePriceVote,
  setWritePriceVote,
  stakeWithPool,
  tryJoinActiveSet,
  votingEnd,
  withdrawStake
};
//# sourceMappingURL=staking.js.map
