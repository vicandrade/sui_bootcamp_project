/** Module: staking_pool */
import { MoveStruct, MoveEnum } from '../utils/index.js';
export declare const VotingParams: MoveStruct<{
    /** Voting: storage price for the next epoch. */
    storage_price: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /** Voting: write price for the next epoch. */
    write_price: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /** Voting: node capacity for the next epoch. */
    node_capacity: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
}, "@local-pkg/walrus::staking_pool::VotingParams">;
/** Represents the state of the staking pool. */
export declare const PoolState: MoveEnum<{
    Active: null;
    Withdrawing: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    Withdrawn: null;
}, "@local-pkg/walrus::staking_pool::PoolState">;
export declare const StakingPool: MoveStruct<{
    id: MoveStruct<{
        id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    }, "0x2::object::UID">;
    /** The current state of the pool. */
    state: MoveEnum<{
        Active: null;
        Withdrawing: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
        Withdrawn: null;
    }, "@local-pkg/walrus::staking_pool::PoolState">;
    /** Current epoch's pool parameters. */
    voting_params: MoveStruct<{
        /** Voting: storage price for the next epoch. */
        storage_price: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
        /** Voting: write price for the next epoch. */
        write_price: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
        /** Voting: node capacity for the next epoch. */
        node_capacity: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "@local-pkg/walrus::staking_pool::VotingParams">;
    /** The storage node info for the pool. */
    node_info: MoveStruct<{
        name: import("@mysten/sui/bcs").BcsType<string, string, "string">;
        node_id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        network_address: import("@mysten/sui/bcs").BcsType<string, string, "string">;
        public_key: MoveStruct<{
            bytes: import("@mysten/sui/bcs").BcsType<number[], Iterable<number> & {
                length: number;
            }, string>;
        }, "0x2::group_ops::Element">;
        next_epoch_public_key: import("@mysten/sui/bcs").BcsType<{
            bytes: number[];
        } | null, {
            bytes: Iterable<number> & {
                length: number;
            };
        } | null | undefined, "Option<0x2::group_ops::Element>">;
        network_public_key: import("@mysten/sui/bcs").BcsType<number[], Iterable<number> & {
            length: number;
        }, string>;
        metadata: MoveStruct<{
            id: MoveStruct<{
                id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
            }, "0x2::object::UID">;
        }, "@local-pkg/walrus::extended_field::ExtendedField">;
    }, "@local-pkg/walrus::storage_node::StorageNodeInfo">;
    /**
     * The epoch when the pool is / will be activated. Serves information purposes
     * only, the checks are performed in the `state` property.
     */
    activation_epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    /** Epoch when the pool was last updated. */
    latest_epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    /** Currently staked WAL in the pool + rewards pool. */
    wal_balance: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /** The total number of shares in the current epoch. */
    num_shares: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /**
     * The amount of the shares that will be withdrawn in E+1 or E+2. We use this
     * amount to calculate the WAL withdrawal in the `process_pending_stake`.
     */
    pending_shares_withdraw: import("../utils/index.js").MoveTuple<MoveStruct<{
        contents: import("@mysten/sui/bcs").BcsType<{
            key: number;
            value: string;
        }[], Iterable<{
            key: number;
            value: string | number | bigint;
        }> & {
            length: number;
        }, string>;
    }, "0x2::vec_map::VecMap<u32, u64>">[], "@local-pkg/walrus::pending_values::PendingValues">;
    /**
     * The amount of the stake requested for withdrawal for a node that may part of the
     * next committee. Stores principals of not yet active stakes. In practice, those
     * tokens are staked for exactly one epoch.
     */
    pre_active_withdrawals: import("../utils/index.js").MoveTuple<MoveStruct<{
        contents: import("@mysten/sui/bcs").BcsType<{
            key: number;
            value: string;
        }[], Iterable<{
            key: number;
            value: string | number | bigint;
        }> & {
            length: number;
        }, string>;
    }, "0x2::vec_map::VecMap<u32, u64>">[], "@local-pkg/walrus::pending_values::PendingValues">;
    /**
     * The pending commission rate for the pool. Commission rate is applied in E+2, so
     * we store the value for the matching epoch and apply it in the `advance_epoch`
     * function.
     */
    pending_commission_rate: import("../utils/index.js").MoveTuple<MoveStruct<{
        contents: import("@mysten/sui/bcs").BcsType<{
            key: number;
            value: string;
        }[], Iterable<{
            key: number;
            value: string | number | bigint;
        }> & {
            length: number;
        }, string>;
    }, "0x2::vec_map::VecMap<u32, u64>">[], "@local-pkg/walrus::pending_values::PendingValues">;
    /** The commission rate for the pool, in basis points. */
    commission_rate: import("@mysten/sui/bcs").BcsType<number, number, "u16">;
    /**
     * Historical exchange rates for the pool. The key is the epoch when the exchange
     * rate was set, and the value is the exchange rate (the ratio of the amount of WAL
     * tokens for the pool shares).
     */
    exchange_rates: MoveStruct<{
        id: MoveStruct<{
            id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        }, "0x2::object::UID">;
        size: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "0x2::table::Table">;
    /**
     * The amount of stake that will be added to the `wal_balance`. Can hold up to two
     * keys: E+1 and E+2, due to the differences in the activation epoch.
     *
     * ```
     * E+1 -> Balance
     * E+2 -> Balance
     * ```
     *
     * Single key is cleared in the `advance_epoch` function, leaving only the next
     * epoch's stake.
     */
    pending_stake: import("../utils/index.js").MoveTuple<MoveStruct<{
        contents: import("@mysten/sui/bcs").BcsType<{
            key: number;
            value: string;
        }[], Iterable<{
            key: number;
            value: string | number | bigint;
        }> & {
            length: number;
        }, string>;
    }, "0x2::vec_map::VecMap<u32, u64>">[], "@local-pkg/walrus::pending_values::PendingValues">;
    /** The rewards that the pool has received from being in the committee. */
    rewards_pool: MoveStruct<{
        value: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "0x2::balance::Balance">;
    /** The commission that the pool has received from the rewards. */
    commission: MoveStruct<{
        value: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "0x2::balance::Balance">;
    /** An Object or an address which can claim the commission. */
    commission_receiver: MoveEnum<{
        Address: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        ObjectID: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    }, "@local-pkg/walrus::auth::Authorized">;
    /** An Object or address that can authorize governance actions, such as upgrades. */
    governance_authorized: MoveEnum<{
        Address: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        ObjectID: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    }, "@local-pkg/walrus::auth::Authorized">;
    /** Reserved for future use and migrations. */
    extra_fields: MoveStruct<{
        id: MoveStruct<{
            id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        }, "0x2::object::UID">;
        size: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "0x2::bag::Bag">;
}, "@local-pkg/walrus::staking_pool::StakingPool">;
