import { MoveStruct, normalizeMoveArguments } from "../utils/index.js";
import * as object from "./deps/sui/object.js";
import * as blob_1 from "./blob.js";
import * as balance from "./deps/sui/balance.js";
const $moduleName = "@local-pkg/walrus::shared_blob";
const SharedBlob = new MoveStruct({
  name: `${$moduleName}::SharedBlob`,
  fields: {
    id: object.UID,
    blob: blob_1.Blob,
    funds: balance.Balance
  }
});
function _new(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["blob"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "new",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function newFunded(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["blob", "funds"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "new_funded",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function fund(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::shared_blob::SharedBlob`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "addedFunds"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "fund",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function extend(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::shared_blob::SharedBlob`,
    `${packageAddress}::system::System`,
    "u32"
  ];
  const parameterNames = ["self", "system", "extendedEpochs"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "extend",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function blob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::shared_blob::SharedBlob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "blob",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function funds(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::shared_blob::SharedBlob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "funds",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  SharedBlob,
  _new,
  blob,
  extend,
  fund,
  funds,
  newFunded
};
//# sourceMappingURL=shared_blob.js.map
