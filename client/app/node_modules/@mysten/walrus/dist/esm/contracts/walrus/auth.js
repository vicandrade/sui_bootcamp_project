import { MoveEnum, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
const $moduleName = "@local-pkg/walrus::auth";
const Authenticated = new MoveEnum({
  name: `${$moduleName}::Authenticated`,
  fields: {
    Sender: bcs.Address,
    Object: bcs.Address
  }
});
const Authorized = new MoveEnum({
  name: `${$moduleName}::Authorized`,
  fields: {
    Address: bcs.Address,
    ObjectID: bcs.Address
  }
});
function authenticateSender(options = {}) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "auth",
    function: "authenticate_sender"
  });
}
function authenticateWithObject(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${options.typeArguments[0]}`];
  const parameterNames = ["obj"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "auth",
    function: "authenticate_with_object",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function authorizedAddress(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = ["address"];
  const parameterNames = ["addr"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "auth",
    function: "authorized_address",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function authorizedObject(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
  ];
  const parameterNames = ["id"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "auth",
    function: "authorized_object",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  Authenticated,
  Authorized,
  authenticateSender,
  authenticateWithObject,
  authorizedAddress,
  authorizedObject
};
//# sourceMappingURL=auth.js.map
