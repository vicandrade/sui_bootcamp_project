import { MoveStruct, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/sui/object.js";
import * as balance from "./deps/sui/balance.js";
const $moduleName = "@local-pkg/wal_exchange::wal_exchange";
const ExchangeRate = new MoveStruct({
  name: `${$moduleName}::ExchangeRate`,
  fields: {
    wal: bcs.u64(),
    sui: bcs.u64()
  }
});
const Exchange = new MoveStruct({
  name: `${$moduleName}::Exchange`,
  fields: {
    id: object.UID,
    wal: balance.Balance,
    sui: balance.Balance,
    rate: ExchangeRate,
    admin: bcs.Address
  }
});
const AdminCap = new MoveStruct({
  name: `${$moduleName}::AdminCap`,
  fields: {
    id: object.UID
  }
});
function newExchangeRate(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = ["u64", "u64"];
  const parameterNames = ["wal", "sui"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "new_exchange_rate",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function _new(options = {}) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "new"
  });
}
function newFunded(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
    "u64"
  ];
  const parameterNames = ["wal", "amount"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "new_funded",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function addWal(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
    "u64"
  ];
  const parameterNames = ["self", "wal", "amount"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "add_wal",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function addSui(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
    "u64"
  ];
  const parameterNames = ["self", "sui", "amount"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "add_sui",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function addAllWal(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "wal"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "add_all_wal",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function addAllSui(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>"
  ];
  const parameterNames = ["self", "sui"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "add_all_sui",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function withdrawWal(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "u64",
    `${packageAddress}::wal_exchange::AdminCap`
  ];
  const parameterNames = ["self", "amount", "adminCap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "withdraw_wal",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function withdrawSui(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "u64",
    `${packageAddress}::wal_exchange::AdminCap`
  ];
  const parameterNames = ["self", "amount", "adminCap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "withdraw_sui",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setExchangeRate(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "u64",
    "u64",
    `${packageAddress}::wal_exchange::AdminCap`
  ];
  const parameterNames = ["self", "wal", "sui", "adminCap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "set_exchange_rate",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function exchangeAllForWal(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>"
  ];
  const parameterNames = ["self", "sui"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "exchange_all_for_wal",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function exchangeForWal(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
    "u64"
  ];
  const parameterNames = ["self", "sui", "amountSui"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "exchange_for_wal",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function exchangeAllForSui(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "wal"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "exchange_all_for_sui",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function exchangeForSui(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
    "u64"
  ];
  const parameterNames = ["self", "wal", "amountWal"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "exchange_for_sui",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  AdminCap,
  Exchange,
  ExchangeRate,
  _new,
  addAllSui,
  addAllWal,
  addSui,
  addWal,
  exchangeAllForSui,
  exchangeAllForWal,
  exchangeForSui,
  exchangeForWal,
  newExchangeRate,
  newFunded,
  setExchangeRate,
  withdrawSui,
  withdrawWal
};
//# sourceMappingURL=wal_exchange.js.map
