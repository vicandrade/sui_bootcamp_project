import { MoveStruct } from '../utils/index.js';
export declare const SystemStateInnerV1: MoveStruct<{
    /** The current committee, with the current epoch. */
    committee: MoveStruct<{
        members: import("@mysten/sui/bcs").BcsType<{
            public_key: {
                bytes: number[];
            };
            weight: number;
            node_id: string;
        }[], Iterable<{
            public_key: {
                bytes: Iterable<number> & {
                    length: number;
                };
            };
            weight: number;
            node_id: string | Uint8Array<ArrayBufferLike>;
        }> & {
            length: number;
        }, string>;
        n_shards: import("@mysten/sui/bcs").BcsType<number, number, "u16">;
        epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
        total_aggregated_key: MoveStruct<{
            bytes: import("@mysten/sui/bcs").BcsType<number[], Iterable<number> & {
                length: number;
            }, string>;
        }, "0x2::group_ops::Element">;
    }, "@local-pkg/walrus::bls_aggregate::BlsCommittee">;
    /**
     * Maximum capacity size for the current and future epochs. Changed by voting on
     * the epoch parameters.
     */
    total_capacity_size: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /** Contains the used capacity size for the current epoch. */
    used_capacity_size: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /** The price per unit size of storage. */
    storage_price_per_unit_size: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /** The write price per unit size. */
    write_price_per_unit_size: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /** Accounting ring buffer for future epochs. */
    future_accounting: MoveStruct<{
        current_index: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
        length: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
        ring_buffer: import("@mysten/sui/bcs").BcsType<{
            epoch: number;
            used_capacity: string;
            rewards_to_distribute: {
                value: string;
            };
        }[], Iterable<{
            epoch: number;
            used_capacity: string | number | bigint;
            rewards_to_distribute: {
                value: string | number | bigint;
            };
        }> & {
            length: number;
        }, string>;
    }, "@local-pkg/walrus::storage_accounting::FutureAccountingRingBuffer">;
    /** Event blob certification state */
    event_blob_certification_state: MoveStruct<{
        latest_certified_blob: import("@mysten/sui/bcs").BcsType<{
            blob_id: string;
            ending_checkpoint_sequence_number: string;
        } | null, {
            blob_id: string | number | bigint;
            ending_checkpoint_sequence_number: string | number | bigint;
        } | null | undefined, "Option<@local-pkg/walrus::event_blob::EventBlob>">;
        aggregate_weight_per_blob: MoveStruct<{
            contents: import("@mysten/sui/bcs").BcsType<{
                key: {
                    blob_id: string;
                    ending_checkpoint_sequence_number: string;
                };
                value: number;
            }[], Iterable<{
                key: {
                    blob_id: string | number | bigint;
                    ending_checkpoint_sequence_number: string | number | bigint;
                };
                value: number;
            }> & {
                length: number;
            }, string>;
        }, "0x2::vec_map::VecMap<@local-pkg/walrus::event_blob::EventBlob, u16>">;
    }, "@local-pkg/walrus::event_blob::EventBlobCertificationState">;
    /**
     * Sizes of deny lists for storage nodes. Only current committee members can
     * register their updates in this map. Hence, we don't expect it to bloat.
     *
     * Max number of stored entries is ~6500. If there's any concern about the
     * performance of the map, it can be cleaned up as a side effect of the updates /
     * registrations.
     */
    deny_list_sizes: MoveStruct<{
        id: MoveStruct<{
            id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        }, "0x2::object::UID">;
    }, "@local-pkg/walrus::extended_field::ExtendedField">;
}, "@local-pkg/walrus::system_state_inner::SystemStateInnerV1">;
