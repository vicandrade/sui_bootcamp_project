import { MoveStruct, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/sui/object.js";
import * as _package from "./deps/sui/package.js";
const $moduleName = "@local-pkg/walrus::init";
const INIT = new MoveStruct({
  name: `${$moduleName}::INIT`,
  fields: {
    dummy_field: bcs.bool()
  }
});
const InitCap = new MoveStruct({
  name: `${$moduleName}::InitCap`,
  fields: {
    id: object.UID,
    publisher: _package.Publisher
  }
});
function initializeWalrus(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::init::InitCap`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::package::UpgradeCap",
    "u64",
    "u64",
    "u16",
    "u32",
    "0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock"
  ];
  const parameterNames = [
    "initCap",
    "upgradeCap",
    "epochZeroDuration",
    "epochDuration",
    "nShards",
    "maxEpochsAhead"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "init",
    function: "initialize_walrus",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function migrate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::system::System`
  ];
  const parameterNames = ["staking", "system"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "init",
    function: "migrate",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  INIT,
  InitCap,
  initializeWalrus,
  migrate
};
//# sourceMappingURL=init.js.map
