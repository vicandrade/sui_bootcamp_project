import { MoveStruct } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
const $moduleName = "@local-pkg/walrus::events";
const BlobRegistered = new MoveStruct({
  name: `${$moduleName}::BlobRegistered`,
  fields: {
    epoch: bcs.u32(),
    blob_id: bcs.u256(),
    size: bcs.u64(),
    encoding_type: bcs.u8(),
    end_epoch: bcs.u32(),
    deletable: bcs.bool(),
    object_id: bcs.Address
  }
});
const BlobCertified = new MoveStruct({
  name: `${$moduleName}::BlobCertified`,
  fields: {
    epoch: bcs.u32(),
    blob_id: bcs.u256(),
    end_epoch: bcs.u32(),
    deletable: bcs.bool(),
    object_id: bcs.Address,
    is_extension: bcs.bool()
  }
});
const BlobDeleted = new MoveStruct({
  name: `${$moduleName}::BlobDeleted`,
  fields: {
    epoch: bcs.u32(),
    blob_id: bcs.u256(),
    end_epoch: bcs.u32(),
    object_id: bcs.Address,
    was_certified: bcs.bool()
  }
});
const InvalidBlobID = new MoveStruct({
  name: `${$moduleName}::InvalidBlobID`,
  fields: {
    epoch: bcs.u32(),
    blob_id: bcs.u256()
  }
});
const EpochChangeStart = new MoveStruct({
  name: `${$moduleName}::EpochChangeStart`,
  fields: {
    epoch: bcs.u32()
  }
});
const EpochChangeDone = new MoveStruct({
  name: `${$moduleName}::EpochChangeDone`,
  fields: {
    epoch: bcs.u32()
  }
});
const ShardsReceived = new MoveStruct({
  name: `${$moduleName}::ShardsReceived`,
  fields: {
    epoch: bcs.u32(),
    shards: bcs.vector(bcs.u16())
  }
});
const EpochParametersSelected = new MoveStruct({
  name: `${$moduleName}::EpochParametersSelected`,
  fields: {
    next_epoch: bcs.u32()
  }
});
const ShardRecoveryStart = new MoveStruct({
  name: `${$moduleName}::ShardRecoveryStart`,
  fields: {
    epoch: bcs.u32(),
    shards: bcs.vector(bcs.u16())
  }
});
const ContractUpgraded = new MoveStruct({
  name: `${$moduleName}::ContractUpgraded`,
  fields: {
    epoch: bcs.u32(),
    package_id: bcs.Address,
    version: bcs.u64()
  }
});
const RegisterDenyListUpdate = new MoveStruct({
  name: `${$moduleName}::RegisterDenyListUpdate`,
  fields: {
    epoch: bcs.u32(),
    root: bcs.u256(),
    sequence_number: bcs.u64(),
    node_id: bcs.Address
  }
});
const DenyListUpdate = new MoveStruct({
  name: `${$moduleName}::DenyListUpdate`,
  fields: {
    epoch: bcs.u32(),
    root: bcs.u256(),
    sequence_number: bcs.u64(),
    node_id: bcs.Address
  }
});
const DenyListBlobDeleted = new MoveStruct({
  name: `${$moduleName}::DenyListBlobDeleted`,
  fields: {
    epoch: bcs.u32(),
    blob_id: bcs.u256()
  }
});
const ContractUpgradeProposed = new MoveStruct({
  name: `${$moduleName}::ContractUpgradeProposed`,
  fields: {
    epoch: bcs.u32(),
    package_digest: bcs.vector(bcs.u8())
  }
});
const ContractUpgradeQuorumReached = new MoveStruct({
  name: `${$moduleName}::ContractUpgradeQuorumReached`,
  fields: {
    epoch: bcs.u32(),
    package_digest: bcs.vector(bcs.u8())
  }
});
const ProtocolVersionUpdated = new MoveStruct({
  name: `${$moduleName}::ProtocolVersionUpdated`,
  fields: {
    epoch: bcs.u32(),
    start_epoch: bcs.u32(),
    protocol_version: bcs.u64()
  }
});
export {
  BlobCertified,
  BlobDeleted,
  BlobRegistered,
  ContractUpgradeProposed,
  ContractUpgradeQuorumReached,
  ContractUpgraded,
  DenyListBlobDeleted,
  DenyListUpdate,
  EpochChangeDone,
  EpochChangeStart,
  EpochParametersSelected,
  InvalidBlobID,
  ProtocolVersionUpdated,
  RegisterDenyListUpdate,
  ShardRecoveryStart,
  ShardsReceived
};
//# sourceMappingURL=events.js.map
