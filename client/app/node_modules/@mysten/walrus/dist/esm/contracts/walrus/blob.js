import { MoveStruct, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/sui/object.js";
import * as storage_resource from "./storage_resource.js";
const $moduleName = "@local-pkg/walrus::blob";
const Blob = new MoveStruct({
  name: `${$moduleName}::Blob`,
  fields: {
    id: object.UID,
    registered_epoch: bcs.u32(),
    blob_id: bcs.u256(),
    size: bcs.u64(),
    encoding_type: bcs.u8(),
    certified_epoch: bcs.option(bcs.u32()),
    storage: storage_resource.Storage,
    deletable: bcs.bool()
  }
});
const BlobIdDerivation = new MoveStruct({
  name: `${$moduleName}::BlobIdDerivation`,
  fields: {
    encoding_type: bcs.u8(),
    size: bcs.u64(),
    root_hash: bcs.u256()
  }
});
function objectId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "object_id",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function registeredEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "registered_epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function blobId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "blob_id",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function size(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "size",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function encodingType(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "encoding_type",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function certifiedEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "certified_epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function storage(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "storage",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function isDeletable(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "is_deletable",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function encodedSize(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`, "u16"];
  const parameterNames = ["self", "nShards"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "encoded_size",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function endEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "end_epoch",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function deriveBlobId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = ["u256", "u8", "u64"];
  const parameterNames = ["rootHash", "encodingType", "size"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "derive_blob_id",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function burn(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "burn",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function addMetadata(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    `${packageAddress}::metadata::Metadata`
  ];
  const parameterNames = ["self", "metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "add_metadata",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function addOrReplaceMetadata(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    `${packageAddress}::metadata::Metadata`
  ];
  const parameterNames = ["self", "metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "add_or_replace_metadata",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function takeMetadata(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "take_metadata",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function insertOrUpdateMetadataPair(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "key", "value"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "insert_or_update_metadata_pair",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function removeMetadataPair(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "key"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "remove_metadata_pair",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function removeMetadataPairIfExists(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "key"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "remove_metadata_pair_if_exists",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  Blob,
  BlobIdDerivation,
  addMetadata,
  addOrReplaceMetadata,
  blobId,
  burn,
  certifiedEpoch,
  deriveBlobId,
  encodedSize,
  encodingType,
  endEpoch,
  insertOrUpdateMetadataPair,
  isDeletable,
  objectId,
  registeredEpoch,
  removeMetadataPair,
  removeMetadataPairIfExists,
  size,
  storage,
  takeMetadata
};
//# sourceMappingURL=blob.js.map
