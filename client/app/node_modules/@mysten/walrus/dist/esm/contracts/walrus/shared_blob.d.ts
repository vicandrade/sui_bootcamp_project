import { MoveStruct } from '../utils/index.js';
import type { RawTransactionArgument } from '../utils/index.js';
import type { Transaction } from '@mysten/sui/transactions';
export declare const SharedBlob: MoveStruct<{
    id: MoveStruct<{
        id: import("@mysten/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    }, "0x2::object::UID">;
    blob: MoveStruct<{
        id: MoveStruct<{
            id: import("@mysten/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        }, "0x2::object::UID">;
        registered_epoch: import("@mysten/bcs").BcsType<number, number, "u32">;
        blob_id: import("@mysten/bcs").BcsType<string, string | number | bigint, "u256">;
        size: import("@mysten/bcs").BcsType<string, string | number | bigint, "u64">;
        encoding_type: import("@mysten/bcs").BcsType<number, number, "u8">;
        certified_epoch: import("@mysten/bcs").BcsType<number | null, number | null | undefined, "Option<u32>">;
        storage: MoveStruct<{
            id: MoveStruct<{
                id: import("@mysten/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
            }, "0x2::object::UID">;
            start_epoch: import("@mysten/bcs").BcsType<number, number, "u32">;
            end_epoch: import("@mysten/bcs").BcsType<number, number, "u32">;
            storage_size: import("@mysten/bcs").BcsType<string, string | number | bigint, "u64">;
        }, "@local-pkg/walrus::storage_resource::Storage">;
        deletable: import("@mysten/bcs").BcsType<boolean, boolean, "bool">;
    }, "@local-pkg/walrus::blob::Blob">;
    funds: MoveStruct<{
        value: import("@mysten/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "0x2::balance::Balance">;
}, "@local-pkg/walrus::shared_blob::SharedBlob">;
export interface NewArguments {
    blob: RawTransactionArgument<string>;
}
export interface NewOptions {
    package?: string;
    arguments: NewArguments | [blob: RawTransactionArgument<string>];
}
/** Shares the provided `blob` as a `SharedBlob` with zero funds. */
export declare function _new(options: NewOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface NewFundedArguments {
    blob: RawTransactionArgument<string>;
    funds: RawTransactionArgument<string>;
}
export interface NewFundedOptions {
    package?: string;
    arguments: NewFundedArguments | [blob: RawTransactionArgument<string>, funds: RawTransactionArgument<string>];
}
/** Shares the provided `blob` as a `SharedBlob` with funds. */
export declare function newFunded(options: NewFundedOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface FundArguments {
    self: RawTransactionArgument<string>;
    addedFunds: RawTransactionArgument<string>;
}
export interface FundOptions {
    package?: string;
    arguments: FundArguments | [self: RawTransactionArgument<string>, addedFunds: RawTransactionArgument<string>];
}
/** Adds the provided `Coin` to the stored funds. */
export declare function fund(options: FundOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ExtendArguments {
    self: RawTransactionArgument<string>;
    system: RawTransactionArgument<string>;
    extendedEpochs: RawTransactionArgument<number>;
}
export interface ExtendOptions {
    package?: string;
    arguments: ExtendArguments | [
        self: RawTransactionArgument<string>,
        system: RawTransactionArgument<string>,
        extendedEpochs: RawTransactionArgument<number>
    ];
}
/**
 * Extends the lifetime of the wrapped `Blob` by `extended_epochs` epochs if the
 * stored funds are sufficient and the new lifetime does not exceed the maximum
 * lifetime.
 */
export declare function extend(options: ExtendOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface BlobArguments {
    self: RawTransactionArgument<string>;
}
export interface BlobOptions {
    package?: string;
    arguments: BlobArguments | [self: RawTransactionArgument<string>];
}
/** Returns a reference to the wrapped `Blob`. */
export declare function blob(options: BlobOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface FundsArguments {
    self: RawTransactionArgument<string>;
}
export interface FundsOptions {
    package?: string;
    arguments: FundsArguments | [self: RawTransactionArgument<string>];
}
/** Returns the balance of funds stored in the `SharedBlob`. */
export declare function funds(options: FundsOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
