import { MoveStruct, MoveTuple, normalizeMoveArguments } from "../utils/index.js";
import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/sui/object.js";
const $moduleName = "@local-pkg/walrus::extended_field";
const ExtendedField = new MoveStruct({
  name: `${$moduleName}::ExtendedField`,
  fields: {
    id: object.UID
  }
});
const Key = new MoveTuple({ name: `${$moduleName}::Key`, fields: [bcs.bool()] });
function _new(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${options.typeArguments[0]}`];
  const parameterNames = ["value"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "extended_field",
    function: "new",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function borrow(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`
  ];
  const parameterNames = ["field"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "extended_field",
    function: "borrow",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function borrowMut(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`
  ];
  const parameterNames = ["field"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "extended_field",
    function: "borrow_mut",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function swap(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`,
    `${options.typeArguments[0]}`
  ];
  const parameterNames = ["field", "value"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "extended_field",
    function: "swap",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function destroy(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`
  ];
  const parameterNames = ["field"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "extended_field",
    function: "destroy",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
export {
  ExtendedField,
  Key,
  _new,
  borrow,
  borrowMut,
  destroy,
  swap
};
//# sourceMappingURL=extended_field.js.map
