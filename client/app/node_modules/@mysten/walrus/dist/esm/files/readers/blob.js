var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var _cache, _client, _secondarySlivers, _numShards;
import { ClientCache } from "@mysten/sui/experimental";
import { getSizes, getSourceSymbols } from "../../utils/index.js";
import { QuiltReader } from "./quilt.js";
class BlobReader {
  constructor({ client, blobId, numShards }) {
    __privateAdd(this, _cache, new ClientCache());
    __privateAdd(this, _client);
    __privateAdd(this, _secondarySlivers, /* @__PURE__ */ new Map());
    this.hasStartedLoadingFullBlob = false;
    __privateAdd(this, _numShards);
    __privateSet(this, _client, client);
    this.blobId = blobId;
    __privateSet(this, _numShards, numShards);
  }
  async getIdentifier() {
    return null;
  }
  async getTags() {
    return {};
  }
  getQuiltReader() {
    return new QuiltReader({ blob: this });
  }
  async getBytes() {
    return __privateGet(this, _cache).read(["getBytes"], async () => {
      this.hasStartedLoadingFullBlob = true;
      try {
        const blob = await __privateGet(this, _client).readBlob({ blobId: this.blobId });
        return blob;
      } catch (error) {
        this.hasStartedLoadingFullBlob = false;
        throw error;
      }
    });
  }
  getMetadata() {
    return __privateGet(this, _cache).read(
      ["getMetadata"],
      () => __privateGet(this, _client).getBlobMetadata({ blobId: this.blobId })
    );
  }
  async getColumnSize() {
    return __privateGet(this, _cache).read(["getColumnSize"], async () => {
      const loadingSlivers = [...__privateGet(this, _secondarySlivers).values()];
      if (loadingSlivers.length > 0) {
        const sliver = await Promise.any(loadingSlivers).catch(() => null);
        if (sliver) {
          return sliver.length;
        }
      }
      if (this.hasStartedLoadingFullBlob) {
        const blob = await this.getBytes();
        const { columnSize: columnSize2 } = getSizes(blob.length, __privateGet(this, _numShards));
        return columnSize2;
      }
      const metadata = await this.getMetadata();
      const { columnSize } = getSizes(
        Number(metadata.metadata.V1.unencoded_length),
        __privateGet(this, _numShards)
      );
      return columnSize;
    });
  }
  async getSymbolSize() {
    const columnSize = await this.getColumnSize();
    const { primarySymbols } = getSourceSymbols(__privateGet(this, _numShards));
    if (columnSize % primarySymbols !== 0) {
      throw new Error("column size should be divisible by primary symbols");
    }
    return columnSize / primarySymbols;
  }
  async getRowSize() {
    const symbolSize = await this.getSymbolSize();
    const { secondarySymbols } = getSourceSymbols(__privateGet(this, _numShards));
    return symbolSize * secondarySymbols;
  }
  async getSecondarySliver({ sliverIndex, signal }) {
    if (__privateGet(this, _secondarySlivers).has(sliverIndex)) {
      return __privateGet(this, _secondarySlivers).get(sliverIndex);
    }
    const sliverPromise = __privateGet(this, _client).getSecondarySliver({
      blobId: this.blobId,
      index: sliverIndex,
      signal
    }).then((sliver) => new Uint8Array(sliver.symbols.data));
    __privateGet(this, _secondarySlivers).set(sliverIndex, sliverPromise);
    try {
      const sliver = await sliverPromise;
      __privateGet(this, _secondarySlivers).set(sliverIndex, sliver);
      return sliver;
    } catch (error) {
      __privateGet(this, _secondarySlivers).delete(sliverIndex);
      throw error;
    }
  }
}
_cache = new WeakMap();
_client = new WeakMap();
_secondarySlivers = new WeakMap();
_numShards = new WeakMap();
export {
  BlobReader
};
//# sourceMappingURL=blob.js.map
