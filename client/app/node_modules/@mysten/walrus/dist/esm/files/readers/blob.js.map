{
  "version": 3,
  "sources": ["../../../../src/files/readers/blob.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { ClientCache } from '@mysten/sui/experimental';\nimport type { FileReader } from '../file.js';\nimport type { WalrusClient } from '../../client.js';\nimport { getSizes, getSourceSymbols } from '../../utils/index.js';\nimport { QuiltReader } from './quilt.js';\n\nexport interface BlobReaderOptions {\n\tclient: WalrusClient;\n\tblobId: string;\n\tnumShards: number;\n}\n\nexport class BlobReader implements FileReader {\n\tblobId: string;\n\n\t#cache = new ClientCache();\n\n\t#client: WalrusClient;\n\t#secondarySlivers = new Map<number, Uint8Array | Promise<Uint8Array>>();\n\thasStartedLoadingFullBlob = false;\n\t#numShards: number;\n\n\tconstructor({ client, blobId, numShards }: BlobReaderOptions) {\n\t\tthis.#client = client;\n\t\tthis.blobId = blobId;\n\t\tthis.#numShards = numShards;\n\t}\n\n\tasync getIdentifier() {\n\t\treturn null;\n\t}\n\n\tasync getTags() {\n\t\treturn {};\n\t}\n\n\tgetQuiltReader() {\n\t\treturn new QuiltReader({ blob: this });\n\t}\n\n\tasync getBytes() {\n\t\treturn this.#cache.read(['getBytes'], async () => {\n\t\t\tthis.hasStartedLoadingFullBlob = true;\n\t\t\ttry {\n\t\t\t\tconst blob = await this.#client.readBlob({ blobId: this.blobId });\n\t\t\t\treturn blob;\n\t\t\t} catch (error) {\n\t\t\t\tthis.hasStartedLoadingFullBlob = false;\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t}\n\n\tgetMetadata() {\n\t\treturn this.#cache.read(['getMetadata'], () =>\n\t\t\tthis.#client.getBlobMetadata({ blobId: this.blobId }),\n\t\t);\n\t}\n\n\tasync getColumnSize() {\n\t\treturn this.#cache.read(['getColumnSize'], async () => {\n\t\t\tconst loadingSlivers = [...this.#secondarySlivers.values()];\n\n\t\t\tif (loadingSlivers.length > 0) {\n\t\t\t\tconst sliver = await Promise.any(loadingSlivers).catch(() => null);\n\n\t\t\t\tif (sliver) {\n\t\t\t\t\treturn sliver.length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.hasStartedLoadingFullBlob) {\n\t\t\t\tconst blob = await this.getBytes();\n\t\t\t\tconst { columnSize } = getSizes(blob.length, this.#numShards);\n\t\t\t\treturn columnSize;\n\t\t\t}\n\n\t\t\tconst metadata = await this.getMetadata();\n\t\t\tconst { columnSize } = getSizes(\n\t\t\t\tNumber(metadata.metadata.V1.unencoded_length),\n\t\t\t\tthis.#numShards,\n\t\t\t);\n\n\t\t\treturn columnSize;\n\t\t});\n\t}\n\n\tasync getSymbolSize() {\n\t\tconst columnSize = await this.getColumnSize();\n\t\tconst { primarySymbols } = getSourceSymbols(this.#numShards);\n\n\t\tif (columnSize % primarySymbols !== 0) {\n\t\t\tthrow new Error('column size should be divisible by primary symbols');\n\t\t}\n\n\t\treturn columnSize / primarySymbols;\n\t}\n\n\tasync getRowSize() {\n\t\tconst symbolSize = await this.getSymbolSize();\n\t\tconst { secondarySymbols } = getSourceSymbols(this.#numShards);\n\t\treturn symbolSize * secondarySymbols;\n\t}\n\n\tasync getSecondarySliver({ sliverIndex, signal }: { sliverIndex: number; signal?: AbortSignal }) {\n\t\tif (this.#secondarySlivers.has(sliverIndex)) {\n\t\t\treturn this.#secondarySlivers.get(sliverIndex)!;\n\t\t}\n\n\t\tconst sliverPromise = this.#client\n\t\t\t.getSecondarySliver({\n\t\t\t\tblobId: this.blobId,\n\t\t\t\tindex: sliverIndex,\n\t\t\t\tsignal,\n\t\t\t})\n\t\t\t.then((sliver) => new Uint8Array(sliver.symbols.data));\n\n\t\tthis.#secondarySlivers.set(sliverIndex, sliverPromise);\n\n\t\ttry {\n\t\t\tconst sliver = await sliverPromise;\n\t\t\tthis.#secondarySlivers.set(sliverIndex, sliver);\n\t\t\treturn sliver;\n\t\t} catch (error) {\n\t\t\tthis.#secondarySlivers.delete(sliverIndex);\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["columnSize"]
}
