var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var _reader;
import { LocalReader } from "./readers/local.js";
const _WalrusFile = class _WalrusFile {
  constructor({ reader }) {
    __privateAdd(this, _reader);
    __privateSet(this, _reader, reader);
  }
  static from(options) {
    return new _WalrusFile({
      reader: new LocalReader(options)
    });
  }
  getIdentifier() {
    return __privateGet(this, _reader).getIdentifier();
  }
  getTags() {
    return __privateGet(this, _reader).getTags();
  }
  bytes() {
    return __privateGet(this, _reader).getBytes();
  }
  async text() {
    const bytes = await this.bytes();
    return new TextDecoder().decode(bytes);
  }
  async json() {
    return JSON.parse(await this.text());
  }
};
_reader = new WeakMap();
let WalrusFile = _WalrusFile;
export {
  WalrusFile
};
//# sourceMappingURL=file.js.map
