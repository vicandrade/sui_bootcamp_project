{
  "version": 3,
  "sources": ["../../src/wasm.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64 } from '@mysten/bcs';\nimport init, {\n\tBlobEncoder,\n\tbls12381_min_pk_aggregate,\n\tbls12381_min_pk_verify,\n} from '@mysten/walrus-wasm';\n\nimport type { StorageConfirmation } from './storage-node/types.js';\nimport type { EncodingType, ProtocolMessageCertificate } from './types.js';\nimport type { BlobMetadata, BlobMetadataWithId, SliverData, SliverPair } from './utils/bcs.js';\nimport { BlobId, blobIdFromBytes } from './utils/bcs.js';\n\nexport interface EncodedBlob {\n\tsliverPairs: (typeof SliverPair.$inferInput)[];\n\tblobId: string;\n\tmetadata: typeof BlobMetadata.$inferInput;\n\trootHash: Uint8Array;\n}\n\nexport async function getWasmBindings(url?: string) {\n\tawait init({ module_or_path: url });\n\n\tfunction encodeBlob(\n\t\tnShards: number,\n\t\tbytes: Uint8Array,\n\t\tencodingType: EncodingType = 'RS2',\n\t): EncodedBlob {\n\t\tconst encoder = new BlobEncoder(nShards);\n\n\t\tif (encodingType !== 'RS2') {\n\t\t\tthrow new Error(`Unsupported encoding type: ${encodingType}`);\n\t\t}\n\n\t\tconst [sliverPairs, metadata, rootHash] = encoder.encode_with_metadata(bytes);\n\n\t\treturn {\n\t\t\tsliverPairs,\n\t\t\tblobId: blobIdFromBytes(new Uint8Array(metadata.blob_id)),\n\t\t\tmetadata: metadata.metadata,\n\t\t\trootHash: new Uint8Array(rootHash.Digest),\n\t\t};\n\t}\n\n\tfunction combineSignatures(\n\t\tconfirmations: StorageConfirmation[],\n\t\tsignerIndices: number[],\n\t): ProtocolMessageCertificate {\n\t\tconst signature = bls12381_min_pk_aggregate(\n\t\t\tconfirmations.map((confirmation) => fromBase64(confirmation.signature)),\n\t\t);\n\n\t\treturn {\n\t\t\tsigners: signerIndices,\n\t\t\tserializedMessage: fromBase64(confirmations[0].serializedMessage),\n\t\t\tsignature,\n\t\t};\n\t}\n\n\tfunction decodePrimarySlivers(\n\t\tblobId: string,\n\t\tnShards: number,\n\t\tsize: number | bigint | string,\n\t\tslivers: (typeof SliverData.$inferInput)[],\n\t\tencodingType: EncodingType = 'RS2',\n\t): Uint8Array {\n\t\tconst encoder = new BlobEncoder(nShards);\n\n\t\tif (encodingType !== 'RS2') {\n\t\t\tthrow new Error(`Unsupported encoding type: ${encodingType}`);\n\t\t}\n\n\t\tconst [bytes] = encoder.decode(\n\t\t\tBlobId.serialize(blobId).toBytes(),\n\t\t\tBigInt(size),\n\t\t\tslivers.map((sliver) => ({\n\t\t\t\t...sliver,\n\t\t\t\t_sliver_type: undefined,\n\t\t\t})),\n\t\t);\n\n\t\treturn new Uint8Array(bytes);\n\t}\n\n\tfunction getVerifySignature() {\n\t\treturn (confirmation: StorageConfirmation, publicKey: Uint8Array) =>\n\t\t\tbls12381_min_pk_verify(\n\t\t\t\tfromBase64(confirmation.signature),\n\t\t\t\tpublicKey,\n\t\t\t\tfromBase64(confirmation.serializedMessage),\n\t\t\t);\n\t}\n\n\tfunction computeMetadata(\n\t\tnShards: number,\n\t\tbytes: Uint8Array,\n\t\tencodingType: EncodingType = 'RS2',\n\t): typeof BlobMetadataWithId.$inferInput & { blobId: string; rootHash: Uint8Array } {\n\t\tconst encoder = new BlobEncoder(nShards);\n\t\tconst [metadata, rootHash] = encoder.compute_metadata(bytes);\n\n\t\tif (encodingType !== 'RS2') {\n\t\t\tthrow new Error(`Unsupported encoding type: ${encodingType}`);\n\t\t}\n\n\t\treturn {\n\t\t\t...metadata,\n\t\t\tblobId: blobIdFromBytes(new Uint8Array(metadata.blob_id)),\n\t\t\trootHash: new Uint8Array(rootHash.Digest),\n\t\t};\n\t}\n\n\treturn {\n\t\tencodeBlob,\n\t\tcombineSignatures,\n\t\tdecodePrimarySlivers,\n\t\tgetVerifySignature,\n\t\tcomputeMetadata,\n\t};\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAA2B;AAC3B,yBAIO;AAKP,IAAAA,cAAwC;AASxC,eAAsB,gBAAgB,KAAc;AACnD,YAAM,mBAAAC,SAAK,EAAE,gBAAgB,IAAI,CAAC;AAElC,WAAS,WACR,SACA,OACA,eAA6B,OACf;AACd,UAAM,UAAU,IAAI,+BAAY,OAAO;AAEvC,QAAI,iBAAiB,OAAO;AAC3B,YAAM,IAAI,MAAM,8BAA8B,YAAY,EAAE;AAAA,IAC7D;AAEA,UAAM,CAAC,aAAa,UAAU,QAAQ,IAAI,QAAQ,qBAAqB,KAAK;AAE5E,WAAO;AAAA,MACN;AAAA,MACA,YAAQ,6BAAgB,IAAI,WAAW,SAAS,OAAO,CAAC;AAAA,MACxD,UAAU,SAAS;AAAA,MACnB,UAAU,IAAI,WAAW,SAAS,MAAM;AAAA,IACzC;AAAA,EACD;AAEA,WAAS,kBACR,eACA,eAC6B;AAC7B,UAAM,gBAAY;AAAA,MACjB,cAAc,IAAI,CAAC,qBAAiB,uBAAW,aAAa,SAAS,CAAC;AAAA,IACvE;AAEA,WAAO;AAAA,MACN,SAAS;AAAA,MACT,uBAAmB,uBAAW,cAAc,CAAC,EAAE,iBAAiB;AAAA,MAChE;AAAA,IACD;AAAA,EACD;AAEA,WAAS,qBACR,QACA,SACA,MACA,SACA,eAA6B,OAChB;AACb,UAAM,UAAU,IAAI,+BAAY,OAAO;AAEvC,QAAI,iBAAiB,OAAO;AAC3B,YAAM,IAAI,MAAM,8BAA8B,YAAY,EAAE;AAAA,IAC7D;AAEA,UAAM,CAAC,KAAK,IAAI,QAAQ;AAAA,MACvB,mBAAO,UAAU,MAAM,EAAE,QAAQ;AAAA,MACjC,OAAO,IAAI;AAAA,MACX,QAAQ,IAAI,CAAC,YAAY;AAAA,QACxB,GAAG;AAAA,QACH,cAAc;AAAA,MACf,EAAE;AAAA,IACH;AAEA,WAAO,IAAI,WAAW,KAAK;AAAA,EAC5B;AAEA,WAAS,qBAAqB;AAC7B,WAAO,CAAC,cAAmC,kBAC1C;AAAA,UACC,uBAAW,aAAa,SAAS;AAAA,MACjC;AAAA,UACA,uBAAW,aAAa,iBAAiB;AAAA,IAC1C;AAAA,EACF;AAEA,WAAS,gBACR,SACA,OACA,eAA6B,OACsD;AACnF,UAAM,UAAU,IAAI,+BAAY,OAAO;AACvC,UAAM,CAAC,UAAU,QAAQ,IAAI,QAAQ,iBAAiB,KAAK;AAE3D,QAAI,iBAAiB,OAAO;AAC3B,YAAM,IAAI,MAAM,8BAA8B,YAAY,EAAE;AAAA,IAC7D;AAEA,WAAO;AAAA,MACN,GAAG;AAAA,MACH,YAAQ,6BAAgB,IAAI,WAAW,SAAS,OAAO,CAAC;AAAA,MACxD,UAAU,IAAI,WAAW,SAAS,MAAM;AAAA,IACzC;AAAA,EACD;AAEA,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;",
  "names": ["import_bcs", "init"]
}
