"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var error_exports = {};
__export(error_exports, {
  BehindCurrentEpochError: () => BehindCurrentEpochError,
  BlobBlockedError: () => BlobBlockedError,
  BlobNotCertifiedError: () => BlobNotCertifiedError,
  InconsistentBlobError: () => InconsistentBlobError,
  NoBlobMetadataReceivedError: () => NoBlobMetadataReceivedError,
  NoBlobStatusReceivedError: () => NoBlobStatusReceivedError,
  NoVerifiedBlobStatusReceivedError: () => NoVerifiedBlobStatusReceivedError,
  NotEnoughBlobConfirmationsError: () => NotEnoughBlobConfirmationsError,
  NotEnoughSliversReceivedError: () => NotEnoughSliversReceivedError,
  RetryableWalrusClientError: () => RetryableWalrusClientError,
  WalrusClientError: () => WalrusClientError
});
module.exports = __toCommonJS(error_exports);
class WalrusClientError extends Error {
}
class RetryableWalrusClientError extends WalrusClientError {
}
class NoBlobStatusReceivedError extends WalrusClientError {
}
class NoVerifiedBlobStatusReceivedError extends WalrusClientError {
}
class NoBlobMetadataReceivedError extends RetryableWalrusClientError {
}
class NotEnoughSliversReceivedError extends RetryableWalrusClientError {
}
class NotEnoughBlobConfirmationsError extends RetryableWalrusClientError {
}
class BehindCurrentEpochError extends RetryableWalrusClientError {
}
class BlobNotCertifiedError extends RetryableWalrusClientError {
}
class InconsistentBlobError extends WalrusClientError {
}
class BlobBlockedError extends Error {
}
//# sourceMappingURL=error.js.map
