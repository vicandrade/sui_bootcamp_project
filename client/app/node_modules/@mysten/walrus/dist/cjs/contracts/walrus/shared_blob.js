"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var shared_blob_exports = {};
__export(shared_blob_exports, {
  SharedBlob: () => SharedBlob,
  _new: () => _new,
  blob: () => blob,
  extend: () => extend,
  fund: () => fund,
  funds: () => funds,
  newFunded: () => newFunded
});
module.exports = __toCommonJS(shared_blob_exports);
var import_utils = require("../utils/index.js");
var object = __toESM(require("./deps/sui/object.js"));
var blob_1 = __toESM(require("./blob.js"));
var balance = __toESM(require("./deps/sui/balance.js"));
const $moduleName = "@local-pkg/walrus::shared_blob";
const SharedBlob = new import_utils.MoveStruct({
  name: `${$moduleName}::SharedBlob`,
  fields: {
    id: object.UID,
    blob: blob_1.Blob,
    funds: balance.Balance
  }
});
function _new(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["blob"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "new",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function newFunded(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["blob", "funds"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "new_funded",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function fund(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::shared_blob::SharedBlob`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "addedFunds"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "fund",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function extend(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::shared_blob::SharedBlob`,
    `${packageAddress}::system::System`,
    "u32"
  ];
  const parameterNames = ["self", "system", "extendedEpochs"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "extend",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function blob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::shared_blob::SharedBlob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "blob",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function funds(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::shared_blob::SharedBlob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "shared_blob",
    function: "funds",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=shared_blob.js.map
