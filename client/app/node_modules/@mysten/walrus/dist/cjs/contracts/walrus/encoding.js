"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var encoding_exports = {};
__export(encoding_exports, {
  encodedBlobLength: () => encodedBlobLength
});
module.exports = __toCommonJS(encoding_exports);
var import_utils = require("../utils/index.js");
function encodedBlobLength(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = ["u64", "u8", "u16"];
  const parameterNames = ["unencodedLength", "encodingType", "nShards"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "encoding",
    function: "encoded_blob_length",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=encoding.js.map
