"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var storage_resource_exports = {};
__export(storage_resource_exports, {
  Storage: () => Storage,
  destroy: () => destroy,
  endEpoch: () => endEpoch,
  fuse: () => fuse,
  fuseAmount: () => fuseAmount,
  fusePeriods: () => fusePeriods,
  size: () => size,
  splitByEpoch: () => splitByEpoch,
  splitBySize: () => splitBySize,
  startEpoch: () => startEpoch
});
module.exports = __toCommonJS(storage_resource_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var object = __toESM(require("./deps/sui/object.js"));
const $moduleName = "@local-pkg/walrus::storage_resource";
const Storage = new import_utils.MoveStruct({
  name: `${$moduleName}::Storage`,
  fields: {
    id: object.UID,
    start_epoch: import_bcs.bcs.u32(),
    end_epoch: import_bcs.bcs.u32(),
    storage_size: import_bcs.bcs.u64()
  }
});
function startEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "start_epoch",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function endEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "end_epoch",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function size(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "size",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function splitByEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`, "u32"];
  const parameterNames = ["storage", "splitEpoch"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "split_by_epoch",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function splitBySize(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`, "u64"];
  const parameterNames = ["storage", "splitSize"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "split_by_size",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function fusePeriods(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_resource::Storage`,
    `${packageAddress}::storage_resource::Storage`
  ];
  const parameterNames = ["first", "second"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "fuse_periods",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function fuseAmount(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_resource::Storage`,
    `${packageAddress}::storage_resource::Storage`
  ];
  const parameterNames = ["first", "second"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "fuse_amount",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function fuse(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_resource::Storage`,
    `${packageAddress}::storage_resource::Storage`
  ];
  const parameterNames = ["first", "second"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "fuse",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function destroy(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
  const parameterNames = ["storage"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_resource",
    function: "destroy",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=storage_resource.js.map
