"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var system_state_inner_exports = {};
__export(system_state_inner_exports, {
  SystemStateInnerV1: () => SystemStateInnerV1
});
module.exports = __toCommonJS(system_state_inner_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var bls_aggregate = __toESM(require("./bls_aggregate.js"));
var storage_accounting = __toESM(require("./storage_accounting.js"));
var event_blob = __toESM(require("./event_blob.js"));
var extended_field = __toESM(require("./extended_field.js"));
const $moduleName = "@local-pkg/walrus::system_state_inner";
const SystemStateInnerV1 = new import_utils.MoveStruct({
  name: `${$moduleName}::SystemStateInnerV1`,
  fields: {
    /** The current committee, with the current epoch. */
    committee: bls_aggregate.BlsCommittee,
    /**
     * Maximum capacity size for the current and future epochs. Changed by voting on
     * the epoch parameters.
     */
    total_capacity_size: import_bcs.bcs.u64(),
    /** Contains the used capacity size for the current epoch. */
    used_capacity_size: import_bcs.bcs.u64(),
    /** The price per unit size of storage. */
    storage_price_per_unit_size: import_bcs.bcs.u64(),
    /** The write price per unit size. */
    write_price_per_unit_size: import_bcs.bcs.u64(),
    /** Accounting ring buffer for future epochs. */
    future_accounting: storage_accounting.FutureAccountingRingBuffer,
    /** Event blob certification state */
    event_blob_certification_state: event_blob.EventBlobCertificationState,
    /**
     * Sizes of deny lists for storage nodes. Only current committee members can
     * register their updates in this map. Hence, we don't expect it to bloat.
     *
     * Max number of stored entries is ~6500. If there's any concern about the
     * performance of the map, it can be cleaned up as a side effect of the updates /
     * registrations.
     */
    deny_list_sizes: extended_field.ExtendedField
  }
});
//# sourceMappingURL=system_state_inner.js.map
