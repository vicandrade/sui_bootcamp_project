"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var apportionment_queue_exports = {};
__export(apportionment_queue_exports, {
  ApportionmentQueue: () => ApportionmentQueue,
  Entry: () => Entry,
  _new: () => _new,
  insert: () => insert,
  popMax: () => popMax
});
module.exports = __toCommonJS(apportionment_queue_exports);
var import_bcs = require("@mysten/sui/bcs");
var import_utils = require("../utils/index.js");
var uq64_64 = __toESM(require("./deps/std/uq64_64.js"));
const $moduleName = "@local-pkg/walrus::apportionment_queue";
function Entry(...typeParameters) {
  return new import_utils.MoveStruct({
    name: `${$moduleName}::Entry<${typeParameters[0].name}>`,
    fields: {
      priority: uq64_64.UQ64_64,
      tie_breaker: import_bcs.bcs.u64(),
      value: typeParameters[0]
    }
  });
}
function ApportionmentQueue(...typeParameters) {
  return new import_utils.MoveStruct({
    name: `${$moduleName}::ApportionmentQueue<${typeParameters[0].name}>`,
    fields: {
      /**
       * The `entries` vector contains a max heap, where the children of the node at
       * index `i` are at indices `2 * i + 1` and `2 * i + 2`. INV: The parent node's
       * priority is always higher or equal to its child nodes' priorities.
       */
      entries: import_bcs.bcs.vector(Entry(typeParameters[0]))
    }
  });
}
function _new(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "apportionment_queue",
    function: "new",
    typeArguments: options.typeArguments
  });
}
function popMax(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::apportionment_queue::ApportionmentQueue<${options.typeArguments[0]}>`
  ];
  const parameterNames = ["pq"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "apportionment_queue",
    function: "pop_max",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function insert(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::apportionment_queue::ApportionmentQueue<${options.typeArguments[0]}>`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::uq64_64::UQ64_64",
    "u64",
    `${options.typeArguments[0]}`
  ];
  const parameterNames = ["pq", "priority", "tieBreaker", "value"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "apportionment_queue",
    function: "insert",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
//# sourceMappingURL=apportionment_queue.js.map
