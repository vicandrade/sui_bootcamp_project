"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var storage_accounting_exports = {};
__export(storage_accounting_exports, {
  FutureAccounting: () => FutureAccounting,
  FutureAccountingRingBuffer: () => FutureAccountingRingBuffer,
  epoch: () => epoch,
  maxEpochsAhead: () => maxEpochsAhead,
  rewards: () => rewards,
  ringLookup: () => ringLookup,
  usedCapacity: () => usedCapacity
});
module.exports = __toCommonJS(storage_accounting_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var balance = __toESM(require("./deps/sui/balance.js"));
const $moduleName = "@local-pkg/walrus::storage_accounting";
const FutureAccounting = new import_utils.MoveStruct({
  name: `${$moduleName}::FutureAccounting`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    /**
     * This field stores `used_capacity` for the epoch. Currently, impossible to rename
     * due to package upgrade limitations.
     */
    used_capacity: import_bcs.bcs.u64(),
    rewards_to_distribute: balance.Balance
  }
});
const FutureAccountingRingBuffer = new import_utils.MoveStruct({
  name: `${$moduleName}::FutureAccountingRingBuffer`,
  fields: {
    current_index: import_bcs.bcs.u32(),
    length: import_bcs.bcs.u32(),
    ring_buffer: import_bcs.bcs.vector(FutureAccounting)
  }
});
function maxEpochsAhead(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_accounting::FutureAccountingRingBuffer`
  ];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_accounting",
    function: "max_epochs_ahead",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function ringLookup(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_accounting::FutureAccountingRingBuffer`,
    "u32"
  ];
  const parameterNames = ["self", "epochsInFuture"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_accounting",
    function: "ring_lookup",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function epoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_accounting::FutureAccounting`
  ];
  const parameterNames = ["accounting"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_accounting",
    function: "epoch",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function usedCapacity(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_accounting::FutureAccounting`
  ];
  const parameterNames = ["accounting"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_accounting",
    function: "used_capacity",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function rewards(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::storage_accounting::FutureAccounting`
  ];
  const parameterNames = ["accounting"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_accounting",
    function: "rewards",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=storage_accounting.js.map
