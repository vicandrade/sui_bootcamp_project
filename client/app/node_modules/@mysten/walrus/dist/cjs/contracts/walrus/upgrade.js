"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var upgrade_exports = {};
__export(upgrade_exports, {
  EmergencyUpgradeCap: () => EmergencyUpgradeCap,
  PackageDigest: () => PackageDigest,
  UpgradeManager: () => UpgradeManager,
  UpgradeProposal: () => UpgradeProposal,
  authorizeEmergencyUpgrade: () => authorizeEmergencyUpgrade,
  authorizeUpgrade: () => authorizeUpgrade,
  burnEmergencyUpgradeCap: () => burnEmergencyUpgradeCap,
  cleanupUpgradeProposals: () => cleanupUpgradeProposals,
  commitUpgrade: () => commitUpgrade,
  voteForUpgrade: () => voteForUpgrade
});
module.exports = __toCommonJS(upgrade_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var vec_set = __toESM(require("./deps/sui/vec_set.js"));
var object = __toESM(require("./deps/sui/object.js"));
var _package = __toESM(require("./deps/sui/package.js"));
var table = __toESM(require("./deps/sui/table.js"));
const $moduleName = "@local-pkg/walrus::upgrade";
const PackageDigest = new import_utils.MoveTuple({
  name: `${$moduleName}::PackageDigest`,
  fields: [import_bcs.bcs.vector(import_bcs.bcs.u8())]
});
const UpgradeProposal = new import_utils.MoveStruct({
  name: `${$moduleName}::UpgradeProposal`,
  fields: {
    /**
     * The epoch in which the proposal was created. The upgrade must be performed in
     * the same epoch.
     */
    epoch: import_bcs.bcs.u32(),
    /** The digest of the package to upgrade to. */
    digest: PackageDigest,
    /**
     * The version of the package to upgrade to. This allows to easily clean up old
     * proposals.
     */
    version: import_bcs.bcs.u64(),
    /** The voting weight of the proposal. */
    voting_weight: import_bcs.bcs.u16(),
    /**
     * The node IDs that have voted for this proposal. Note: the number of nodes in the
     * committee is capped, so we can use a VecSet.
     */
    voters: vec_set.VecSet(import_bcs.bcs.Address)
  }
});
const UpgradeManager = new import_utils.MoveStruct({
  name: `${$moduleName}::UpgradeManager`,
  fields: {
    id: object.UID,
    cap: _package.UpgradeCap,
    upgrade_proposals: table.Table
  }
});
const EmergencyUpgradeCap = new import_utils.MoveStruct({
  name: `${$moduleName}::EmergencyUpgradeCap`,
  fields: {
    id: object.UID,
    upgrade_manager_id: import_bcs.bcs.Address
  }
});
function voteForUpgrade(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::upgrade::UpgradeManager`,
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::auth::Authenticated`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
    "vector<u8>"
  ];
  const parameterNames = ["self", "staking", "auth", "nodeId", "digest"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "upgrade",
    function: "vote_for_upgrade",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function authorizeUpgrade(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::upgrade::UpgradeManager`,
    `${packageAddress}::staking::Staking`,
    "vector<u8>"
  ];
  const parameterNames = ["self", "staking", "digest"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "upgrade",
    function: "authorize_upgrade",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function authorizeEmergencyUpgrade(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::upgrade::UpgradeManager`,
    `${packageAddress}::upgrade::EmergencyUpgradeCap`,
    "vector<u8>"
  ];
  const parameterNames = ["upgradeManager", "emergencyUpgradeCap", "digest"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "upgrade",
    function: "authorize_emergency_upgrade",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function commitUpgrade(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::upgrade::UpgradeManager`,
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::system::System`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::package::UpgradeReceipt"
  ];
  const parameterNames = ["upgradeManager", "staking", "system", "receipt"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "upgrade",
    function: "commit_upgrade",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function cleanupUpgradeProposals(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::upgrade::UpgradeManager`,
    `${packageAddress}::staking::Staking`,
    "vector<vector<u8>>"
  ];
  const parameterNames = ["self", "staking", "proposals"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "upgrade",
    function: "cleanup_upgrade_proposals",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function burnEmergencyUpgradeCap(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::upgrade::EmergencyUpgradeCap`];
  const parameterNames = ["emergencyUpgradeCap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "upgrade",
    function: "burn_emergency_upgrade_cap",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=upgrade.js.map
