"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var system_exports = {};
__export(system_exports, {
  System: () => System,
  addPerEpochSubsidies: () => addPerEpochSubsidies,
  addSubsidy: () => addSubsidy,
  certifyBlob: () => certifyBlob,
  certifyEventBlob: () => certifyEventBlob,
  deleteBlob: () => deleteBlob,
  deleteDenyListedBlob: () => deleteDenyListedBlob,
  epoch: () => epoch,
  extendBlob: () => extendBlob,
  extendBlobWithResource: () => extendBlobWithResource,
  futureAccounting: () => futureAccounting,
  invalidateBlobId: () => invalidateBlobId,
  nShards: () => nShards,
  registerBlob: () => registerBlob,
  registerDenyListUpdate: () => registerDenyListUpdate,
  reserveSpace: () => reserveSpace,
  reserveSpaceForEpochs: () => reserveSpaceForEpochs,
  totalCapacitySize: () => totalCapacitySize,
  updateDenyList: () => updateDenyList,
  updateProtocolVersion: () => updateProtocolVersion,
  usedCapacitySize: () => usedCapacitySize,
  version: () => version
});
module.exports = __toCommonJS(system_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var object = __toESM(require("./deps/sui/object.js"));
const $moduleName = "@local-pkg/walrus::system";
const System = new import_utils.MoveStruct({
  name: `${$moduleName}::System`,
  fields: {
    id: object.UID,
    version: import_bcs.bcs.u64(),
    package_id: import_bcs.bcs.Address,
    new_package_id: import_bcs.bcs.option(import_bcs.bcs.Address)
  }
});
function invalidateBlobId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["system", "signature", "membersBitmap", "message"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "invalidate_blob_id",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function certifyEventBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "u256",
    "u256",
    "u64",
    "u8",
    "u64",
    "u32"
  ];
  const parameterNames = [
    "system",
    "cap",
    "blobId",
    "rootHash",
    "size",
    "encodingType",
    "endingCheckpointSequenceNum",
    "epoch"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "certify_event_blob",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function reserveSpace(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    "u64",
    "u32",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "storageAmount", "epochsAhead", "payment"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "reserve_space",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function reserveSpaceForEpochs(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    "u64",
    "u32",
    "u32",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "storageAmount", "startEpoch", "endEpoch", "payment"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "reserve_space_for_epochs",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function registerBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_resource::Storage`,
    "u256",
    "u256",
    "u64",
    "u8",
    "bool",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = [
    "self",
    "storage",
    "blobId",
    "rootHash",
    "size",
    "encodingType",
    "deletable",
    "writePayment"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "register_blob",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function certifyBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::blob::Blob`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["self", "blob", "signature", "signersBitmap", "message"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "certify_blob",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function deleteBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::blob::Blob`
  ];
  const parameterNames = ["self", "blob"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "delete_blob",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function extendBlobWithResource(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::blob::Blob`,
    `${packageAddress}::storage_resource::Storage`
  ];
  const parameterNames = ["self", "blob", "extension"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "extend_blob_with_resource",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function extendBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::blob::Blob`,
    "u32",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "blob", "extendedEpochs", "payment"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "extend_blob",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function addSubsidy(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
    "u32"
  ];
  const parameterNames = ["system", "subsidy", "epochsAhead"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "add_subsidy",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function addPerEpochSubsidies(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `vector<0x0000000000000000000000000000000000000000000000000000000000000002::balance::Balance<${packageAddress}::wal::WAL>>`
  ];
  const parameterNames = ["system", "subsidies"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "add_per_epoch_subsidies",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function updateProtocolVersion(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["self", "cap", "signature", "membersBitmap", "message"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "update_protocol_version",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function registerDenyListUpdate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "u256",
    "u64"
  ];
  const parameterNames = ["self", "cap", "denyListRoot", "denyListSequence"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "register_deny_list_update",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function updateDenyList(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_node::StorageNodeCap`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["self", "cap", "signature", "membersBitmap", "message"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "update_deny_list",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function deleteDenyListedBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::system::System`,
    "vector<u8>",
    "vector<u8>",
    "vector<u8>"
  ];
  const parameterNames = ["self", "signature", "membersBitmap", "message"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "delete_deny_listed_blob",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function epoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "epoch",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function totalCapacitySize(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "total_capacity_size",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function usedCapacitySize(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "used_capacity_size",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function nShards(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "n_shards",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function futureAccounting(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "future_accounting",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function version(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::system::System`];
  const parameterNames = ["system"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "system",
    function: "version",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=system.js.map
