"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bls_aggregate_exports = {};
__export(bls_aggregate_exports, {
  BlsCommittee: () => BlsCommittee,
  BlsCommitteeMember: () => BlsCommitteeMember,
  RequiredWeight: () => RequiredWeight
});
module.exports = __toCommonJS(bls_aggregate_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var group_ops = __toESM(require("./deps/sui/group_ops.js"));
const $moduleName = "@local-pkg/walrus::bls_aggregate";
const BlsCommitteeMember = new import_utils.MoveStruct({
  name: `${$moduleName}::BlsCommitteeMember`,
  fields: {
    public_key: group_ops.Element,
    weight: import_bcs.bcs.u16(),
    node_id: import_bcs.bcs.Address
  }
});
const BlsCommittee = new import_utils.MoveStruct({
  name: `${$moduleName}::BlsCommittee`,
  fields: {
    /** A vector of committee members */
    members: import_bcs.bcs.vector(BlsCommitteeMember),
    /** The total number of shards held by the committee */
    n_shards: import_bcs.bcs.u16(),
    /** The epoch in which the committee is active. */
    epoch: import_bcs.bcs.u32(),
    /** The aggregation of public keys for all members of the committee */
    total_aggregated_key: group_ops.Element
  }
});
const RequiredWeight = new import_utils.MoveEnum({
  name: `${$moduleName}::RequiredWeight`,
  fields: {
    /** Verify that the signers form a quorum. */
    Quorum: null,
    /** Verify that the signers include at least one correct node. */
    OneCorrectNode: null
  }
});
//# sourceMappingURL=bls_aggregate.js.map
