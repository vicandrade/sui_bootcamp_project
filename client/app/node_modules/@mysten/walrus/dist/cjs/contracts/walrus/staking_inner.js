"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var staking_inner_exports = {};
__export(staking_inner_exports, {
  EpochState: () => EpochState,
  StakingInnerV1: () => StakingInnerV1
});
module.exports = __toCommonJS(staking_inner_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var object_table = __toESM(require("./deps/sui/object_table.js"));
var extended_field = __toESM(require("./extended_field.js"));
var committee = __toESM(require("./committee.js"));
var epoch_parameters = __toESM(require("./epoch_parameters.js"));
const $moduleName = "@local-pkg/walrus::staking_inner";
const EpochState = new import_utils.MoveEnum({
  name: `${$moduleName}::EpochState`,
  fields: {
    EpochChangeSync: import_bcs.bcs.u16(),
    EpochChangeDone: import_bcs.bcs.u64(),
    NextParamsSelected: import_bcs.bcs.u64()
  }
});
const StakingInnerV1 = new import_utils.MoveStruct({
  name: `${$moduleName}::StakingInnerV1`,
  fields: {
    /** The number of shards in the system. */
    n_shards: import_bcs.bcs.u16(),
    /** The duration of an epoch in ms. Does not affect the first (zero) epoch. */
    epoch_duration: import_bcs.bcs.u64(),
    /**
     * Special parameter, used only for the first epoch. The timestamp when the first
     * epoch can be started.
     */
    first_epoch_start: import_bcs.bcs.u64(),
    /**
     * Stored staking pools, each identified by a unique `ID` and contains the
     * `StakingPool` object. Uses `ObjectTable` to make the pool discovery easier by
     * avoiding wrapping.
     *
     * The key is the ID of the staking pool.
     */
    pools: object_table.ObjectTable,
    /**
     * The current epoch of the Walrus system. The epochs are not the same as the Sui
     * epochs, not to be mistaken with `ctx.epoch()`.
     */
    epoch: import_bcs.bcs.u32(),
    /** Stores the active set of storage nodes. Tracks the total amount of staked WAL. */
    active_set: extended_field.ExtendedField,
    /** The next committee in the system. */
    next_committee: import_bcs.bcs.option(committee.Committee),
    /** The current committee in the system. */
    committee: committee.Committee,
    /** The previous committee in the system. */
    previous_committee: committee.Committee,
    /** The next epoch parameters. */
    next_epoch_params: import_bcs.bcs.option(epoch_parameters.EpochParams),
    /** The state of the current epoch. */
    epoch_state: EpochState,
    /**
     * The public keys for the next epoch. The keys are stored in a sorted `VecMap`,
     * and mirror the order of the nodes in the `next_committee`. The value is set in
     * the `select_committee` function and consumed in the `next_bls_committee`
     * function.
     */
    next_epoch_public_keys: extended_field.ExtendedField
  }
});
//# sourceMappingURL=staking_inner.js.map
