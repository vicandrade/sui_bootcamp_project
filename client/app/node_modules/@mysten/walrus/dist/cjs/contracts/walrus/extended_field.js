"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var extended_field_exports = {};
__export(extended_field_exports, {
  ExtendedField: () => ExtendedField,
  Key: () => Key,
  _new: () => _new,
  borrow: () => borrow,
  borrowMut: () => borrowMut,
  destroy: () => destroy,
  swap: () => swap
});
module.exports = __toCommonJS(extended_field_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var object = __toESM(require("./deps/sui/object.js"));
const $moduleName = "@local-pkg/walrus::extended_field";
const ExtendedField = new import_utils.MoveStruct({
  name: `${$moduleName}::ExtendedField`,
  fields: {
    id: object.UID
  }
});
const Key = new import_utils.MoveTuple({ name: `${$moduleName}::Key`, fields: [import_bcs.bcs.bool()] });
function _new(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${options.typeArguments[0]}`];
  const parameterNames = ["value"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "extended_field",
    function: "new",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function borrow(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`
  ];
  const parameterNames = ["field"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "extended_field",
    function: "borrow",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function borrowMut(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`
  ];
  const parameterNames = ["field"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "extended_field",
    function: "borrow_mut",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function swap(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`,
    `${options.typeArguments[0]}`
  ];
  const parameterNames = ["field", "value"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "extended_field",
    function: "swap",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function destroy(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`
  ];
  const parameterNames = ["field"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "extended_field",
    function: "destroy",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
//# sourceMappingURL=extended_field.js.map
