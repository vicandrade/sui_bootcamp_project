"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var blob_exports = {};
__export(blob_exports, {
  Blob: () => Blob,
  BlobIdDerivation: () => BlobIdDerivation,
  addMetadata: () => addMetadata,
  addOrReplaceMetadata: () => addOrReplaceMetadata,
  blobId: () => blobId,
  burn: () => burn,
  certifiedEpoch: () => certifiedEpoch,
  deriveBlobId: () => deriveBlobId,
  encodedSize: () => encodedSize,
  encodingType: () => encodingType,
  endEpoch: () => endEpoch,
  insertOrUpdateMetadataPair: () => insertOrUpdateMetadataPair,
  isDeletable: () => isDeletable,
  objectId: () => objectId,
  registeredEpoch: () => registeredEpoch,
  removeMetadataPair: () => removeMetadataPair,
  removeMetadataPairIfExists: () => removeMetadataPairIfExists,
  size: () => size,
  storage: () => storage,
  takeMetadata: () => takeMetadata
});
module.exports = __toCommonJS(blob_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var object = __toESM(require("./deps/sui/object.js"));
var storage_resource = __toESM(require("./storage_resource.js"));
const $moduleName = "@local-pkg/walrus::blob";
const Blob = new import_utils.MoveStruct({
  name: `${$moduleName}::Blob`,
  fields: {
    id: object.UID,
    registered_epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256(),
    size: import_bcs.bcs.u64(),
    encoding_type: import_bcs.bcs.u8(),
    certified_epoch: import_bcs.bcs.option(import_bcs.bcs.u32()),
    storage: storage_resource.Storage,
    deletable: import_bcs.bcs.bool()
  }
});
const BlobIdDerivation = new import_utils.MoveStruct({
  name: `${$moduleName}::BlobIdDerivation`,
  fields: {
    encoding_type: import_bcs.bcs.u8(),
    size: import_bcs.bcs.u64(),
    root_hash: import_bcs.bcs.u256()
  }
});
function objectId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "object_id",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function registeredEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "registered_epoch",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function blobId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "blob_id",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function size(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "size",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function encodingType(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "encoding_type",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function certifiedEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "certified_epoch",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function storage(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "storage",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function isDeletable(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "is_deletable",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function encodedSize(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`, "u16"];
  const parameterNames = ["self", "nShards"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "encoded_size",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function endEpoch(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "end_epoch",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function deriveBlobId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = ["u256", "u8", "u64"];
  const parameterNames = ["rootHash", "encodingType", "size"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "derive_blob_id",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function burn(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "burn",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function addMetadata(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    `${packageAddress}::metadata::Metadata`
  ];
  const parameterNames = ["self", "metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "add_metadata",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function addOrReplaceMetadata(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    `${packageAddress}::metadata::Metadata`
  ];
  const parameterNames = ["self", "metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "add_or_replace_metadata",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function takeMetadata(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::blob::Blob`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "take_metadata",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function insertOrUpdateMetadataPair(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "key", "value"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "insert_or_update_metadata_pair",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function removeMetadataPair(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "key"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "remove_metadata_pair",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function removeMetadataPairIfExists(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::blob::Blob`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "key"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "blob",
    function: "remove_metadata_pair_if_exists",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=blob.js.map
