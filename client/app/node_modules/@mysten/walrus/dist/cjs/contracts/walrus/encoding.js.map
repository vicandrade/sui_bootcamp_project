{
  "version": 3,
  "sources": ["../../../../src/contracts/walrus/encoding.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { Transaction } from '@mysten/sui/transactions';\nimport { normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nexport interface EncodedBlobLengthArguments {\n\tunencodedLength: RawTransactionArgument<number | bigint>;\n\tencodingType: RawTransactionArgument<number>;\n\tnShards: RawTransactionArgument<number>;\n}\nexport interface EncodedBlobLengthOptions {\n\tpackage?: string;\n\targuments:\n\t\t| EncodedBlobLengthArguments\n\t\t| [\n\t\t\t\tunencodedLength: RawTransactionArgument<number | bigint>,\n\t\t\t\tencodingType: RawTransactionArgument<number>,\n\t\t\t\tnShards: RawTransactionArgument<number>,\n\t\t  ];\n}\n/**\n * Computes the encoded length of a blob given its unencoded length, encoding type\n * and number of shards `n_shards`.\n */\nexport function encodedBlobLength(options: EncodedBlobLengthOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = ['u64', 'u8', 'u16'] satisfies string[];\n\tconst parameterNames = ['unencodedLength', 'encodingType', 'nShards'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'encoding',\n\t\t\tfunction: 'encoded_blob_length',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,mBAAuC;AAqBhC,SAAS,kBAAkB,SAAmC;AACpE,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,OAAO,MAAM,KAAK;AAC1C,QAAM,iBAAiB,CAAC,mBAAmB,gBAAgB,SAAS;AACpE,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,eAAW,qCAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;",
  "names": []
}
