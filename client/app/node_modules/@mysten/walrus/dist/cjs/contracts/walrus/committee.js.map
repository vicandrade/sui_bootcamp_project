{
  "version": 3,
  "sources": ["../../../../src/contracts/walrus/committee.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This module defines the `Committee` struct which stores the current committee\n * with shard assignments. Additionally, it manages transitions / transfers of\n * shards between committees with the least amount of changes.\n */\n\nimport { MoveTuple, normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport * as vec_map from './deps/sui/vec_map.js';\nconst $moduleName = '@local-pkg/walrus::committee';\nexport const Committee = new MoveTuple({\n\tname: `${$moduleName}::Committee`,\n\tfields: [vec_map.VecMap(bcs.Address, bcs.vector(bcs.u16()))],\n});\nexport interface ShardsArguments {\n\tcmt: RawTransactionArgument<string>;\n\tnodeId: RawTransactionArgument<string>;\n}\nexport interface ShardsOptions {\n\tpackage?: string;\n\targuments:\n\t\t| ShardsArguments\n\t\t| [cmt: RawTransactionArgument<string>, nodeId: RawTransactionArgument<string>];\n}\n/** Get the shards assigned to the given `node_id`. */\nexport function shards(options: ShardsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::committee::Committee`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::object::ID',\n\t] satisfies string[];\n\tconst parameterNames = ['cmt', 'nodeId'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'committee',\n\t\t\tfunction: 'shards',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface SizeArguments {\n\tcmt: RawTransactionArgument<string>;\n}\nexport interface SizeOptions {\n\tpackage?: string;\n\targuments: SizeArguments | [cmt: RawTransactionArgument<string>];\n}\n/** Get the number of nodes in the committee. */\nexport function size(options: SizeOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::committee::Committee`] satisfies string[];\n\tconst parameterNames = ['cmt'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'committee',\n\t\t\tfunction: 'size',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface InnerArguments {\n\tcmt: RawTransactionArgument<string>;\n}\nexport interface InnerOptions {\n\tpackage?: string;\n\targuments: InnerArguments | [cmt: RawTransactionArgument<string>];\n}\n/** Get the inner representation of the committee. */\nexport function inner(options: InnerOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::committee::Committee`] satisfies string[];\n\tconst parameterNames = ['cmt'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'committee',\n\t\t\tfunction: 'inner',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ToInnerArguments {\n\tcmt: RawTransactionArgument<string>;\n}\nexport interface ToInnerOptions {\n\tpackage?: string;\n\targuments: ToInnerArguments | [cmt: RawTransactionArgument<string>];\n}\n/** Copy the inner representation of the committee. */\nexport function toInner(options: ToInnerOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::committee::Committee`] satisfies string[];\n\tconst parameterNames = ['cmt'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'committee',\n\t\t\tfunction: 'to_inner',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,mBAAkD;AAElD,iBAAoB;AAEpB,cAAyB;AACzB,MAAM,cAAc;AACb,MAAM,YAAY,IAAI,uBAAU;AAAA,EACtC,MAAM,GAAG,WAAW;AAAA,EACpB,QAAQ,CAAC,QAAQ,OAAO,eAAI,SAAS,eAAI,OAAO,eAAI,IAAI,CAAC,CAAC,CAAC;AAC5D,CAAC;AAYM,SAAS,OAAO,SAAwB;AAC9C,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,IACjB;AAAA,EACD;AACA,QAAM,iBAAiB,CAAC,OAAO,QAAQ;AACvC,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,eAAW,qCAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AASO,SAAS,KAAK,SAAsB;AAC1C,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,GAAG,cAAc,wBAAwB;AACjE,QAAM,iBAAiB,CAAC,KAAK;AAC7B,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,eAAW,qCAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AASO,SAAS,MAAM,SAAuB;AAC5C,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,GAAG,cAAc,wBAAwB;AACjE,QAAM,iBAAiB,CAAC,KAAK;AAC7B,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,eAAW,qCAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AASO,SAAS,QAAQ,SAAyB;AAChD,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,GAAG,cAAc,wBAAwB;AACjE,QAAM,iBAAiB,CAAC,KAAK;AAC7B,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,eAAW,qCAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;",
  "names": []
}
