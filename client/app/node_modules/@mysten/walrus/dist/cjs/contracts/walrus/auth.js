"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var auth_exports = {};
__export(auth_exports, {
  Authenticated: () => Authenticated,
  Authorized: () => Authorized,
  authenticateSender: () => authenticateSender,
  authenticateWithObject: () => authenticateWithObject,
  authorizedAddress: () => authorizedAddress,
  authorizedObject: () => authorizedObject
});
module.exports = __toCommonJS(auth_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
const $moduleName = "@local-pkg/walrus::auth";
const Authenticated = new import_utils.MoveEnum({
  name: `${$moduleName}::Authenticated`,
  fields: {
    Sender: import_bcs.bcs.Address,
    Object: import_bcs.bcs.Address
  }
});
const Authorized = new import_utils.MoveEnum({
  name: `${$moduleName}::Authorized`,
  fields: {
    Address: import_bcs.bcs.Address,
    ObjectID: import_bcs.bcs.Address
  }
});
function authenticateSender(options = {}) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "auth",
    function: "authenticate_sender"
  });
}
function authenticateWithObject(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${options.typeArguments[0]}`];
  const parameterNames = ["obj"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "auth",
    function: "authenticate_with_object",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames),
    typeArguments: options.typeArguments
  });
}
function authorizedAddress(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = ["address"];
  const parameterNames = ["addr"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "auth",
    function: "authorized_address",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function authorizedObject(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
  ];
  const parameterNames = ["id"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "auth",
    function: "authorized_object",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=auth.js.map
