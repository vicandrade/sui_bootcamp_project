"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  MoveEnum: () => MoveEnum,
  MoveStruct: () => MoveStruct,
  MoveTuple: () => MoveTuple,
  getPureBcsSchema: () => getPureBcsSchema,
  normalizeMoveArguments: () => normalizeMoveArguments
});
module.exports = __toCommonJS(utils_exports);
var import_bcs = require("@mysten/sui/bcs");
var import_utils = require("@mysten/sui/utils");
var import_transactions = require("@mysten/sui/transactions");
const MOVE_STDLIB_ADDRESS = (0, import_utils.normalizeSuiAddress)("0x1");
const SUI_FRAMEWORK_ADDRESS = (0, import_utils.normalizeSuiAddress)("0x2");
const SUI_SYSTEM_ADDRESS = (0, import_utils.normalizeSuiAddress)("0x3");
function getPureBcsSchema(typeTag) {
  const parsedTag = typeof typeTag === "string" ? import_bcs.TypeTagSerializer.parseFromStr(typeTag) : typeTag;
  if ("u8" in parsedTag) {
    return import_bcs.bcs.U8;
  } else if ("u16" in parsedTag) {
    return import_bcs.bcs.U16;
  } else if ("u32" in parsedTag) {
    return import_bcs.bcs.U32;
  } else if ("u64" in parsedTag) {
    return import_bcs.bcs.U64;
  } else if ("u128" in parsedTag) {
    return import_bcs.bcs.U128;
  } else if ("u256" in parsedTag) {
    return import_bcs.bcs.U256;
  } else if ("address" in parsedTag) {
    return import_bcs.bcs.Address;
  } else if ("bool" in parsedTag) {
    return import_bcs.bcs.Bool;
  } else if ("vector" in parsedTag) {
    const type = getPureBcsSchema(parsedTag.vector);
    return type ? import_bcs.bcs.vector(type) : null;
  } else if ("struct" in parsedTag) {
    const structTag = parsedTag.struct;
    const pkg = (0, import_utils.normalizeSuiAddress)(parsedTag.struct.address);
    if (pkg === MOVE_STDLIB_ADDRESS) {
      if ((structTag.module === "ascii" || structTag.module === "string") && structTag.name === "String") {
        return import_bcs.bcs.String;
      }
      if (structTag.module === "option" && structTag.name === "Option") {
        const type = getPureBcsSchema(structTag.typeParams[0]);
        return type ? import_bcs.bcs.vector(type) : null;
      }
    }
    if (pkg === SUI_FRAMEWORK_ADDRESS && structTag.module === "Object" && structTag.name === "ID") {
      return import_bcs.bcs.Address;
    }
  }
  return null;
}
function normalizeMoveArguments(args, argTypes, parameterNames) {
  const argLen = Array.isArray(args) ? args.length : Object.keys(args).length;
  if (parameterNames && argLen !== parameterNames.length) {
    throw new Error(
      `Invalid number of arguments, expected ${parameterNames.length}, got ${argLen}`
    );
  }
  const normalizedArgs = [];
  let index = 0;
  for (const [i, argType] of argTypes.entries()) {
    if (argType === `${SUI_FRAMEWORK_ADDRESS}::deny_list::DenyList`) {
      normalizedArgs.push((tx) => tx.object.denyList());
      continue;
    }
    if (argType === `${SUI_FRAMEWORK_ADDRESS}::random::Random`) {
      normalizedArgs.push((tx) => tx.object.random());
      continue;
    }
    if (argType === `${SUI_FRAMEWORK_ADDRESS}::clock::Clock`) {
      normalizedArgs.push((tx) => tx.object.clock());
      continue;
    }
    if (argType === `${SUI_SYSTEM_ADDRESS}::sui_system::SuiSystemState`) {
      normalizedArgs.push((tx) => tx.object.system());
      continue;
    }
    let arg;
    if (Array.isArray(args)) {
      if (index >= args.length) {
        throw new Error(
          `Invalid number of arguments, expected at least ${index + 1}, got ${args.length}`
        );
      }
      arg = args[index];
    } else {
      if (!parameterNames) {
        throw new Error(`Expected arguments to be passed as an array`);
      }
      const name = parameterNames[index];
      arg = args[name];
      if (arg == null) {
        throw new Error(`Parameter ${name} is required`);
      }
    }
    index += 1;
    if (typeof arg === "function" || (0, import_transactions.isArgument)(arg)) {
      normalizedArgs.push(arg);
      continue;
    }
    const type = argTypes[i];
    const bcsType = getPureBcsSchema(type);
    if (bcsType) {
      const bytes = bcsType.serialize(arg);
      normalizedArgs.push((tx) => tx.pure(bytes));
      continue;
    } else if (typeof arg === "string") {
      normalizedArgs.push((tx) => tx.object(arg));
      continue;
    }
    throw new Error(`Invalid argument ${stringify(arg)} for type ${type}`);
  }
  return normalizedArgs;
}
class MoveStruct extends import_bcs.BcsStruct {
}
class MoveEnum extends import_bcs.BcsEnum {
}
class MoveTuple extends import_bcs.BcsTuple {
}
function stringify(val) {
  if (typeof val === "object") {
    return JSON.stringify(val, (val2) => val2);
  }
  if (typeof val === "bigint") {
    return val.toString();
  }
  return val;
}
//# sourceMappingURL=index.js.map
