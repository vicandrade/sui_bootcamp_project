"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var event_blob_exports = {};
__export(event_blob_exports, {
  EventBlob: () => EventBlob,
  EventBlobAttestation: () => EventBlobAttestation,
  EventBlobCertificationState: () => EventBlobCertificationState
});
module.exports = __toCommonJS(event_blob_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var vec_map = __toESM(require("./deps/sui/vec_map.js"));
const $moduleName = "@local-pkg/walrus::event_blob";
const EventBlobAttestation = new import_utils.MoveStruct({
  name: `${$moduleName}::EventBlobAttestation`,
  fields: {
    checkpoint_sequence_num: import_bcs.bcs.u64(),
    epoch: import_bcs.bcs.u32()
  }
});
const EventBlob = new import_utils.MoveStruct({
  name: `${$moduleName}::EventBlob`,
  fields: {
    /** Blob id of the certified event blob. */
    blob_id: import_bcs.bcs.u256(),
    /** Ending sui checkpoint of the certified event blob. */
    ending_checkpoint_sequence_number: import_bcs.bcs.u64()
  }
});
const EventBlobCertificationState = new import_utils.MoveStruct({
  name: `${$moduleName}::EventBlobCertificationState`,
  fields: {
    /** Latest certified event blob. */
    latest_certified_blob: import_bcs.bcs.option(EventBlob),
    /** Current event blob being attested. */
    aggregate_weight_per_blob: vec_map.VecMap(EventBlob, import_bcs.bcs.u16())
  }
});
//# sourceMappingURL=event_blob.js.map
