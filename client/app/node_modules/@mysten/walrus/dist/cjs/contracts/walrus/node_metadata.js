"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var node_metadata_exports = {};
__export(node_metadata_exports, {
  NodeMetadata: () => NodeMetadata,
  _new: () => _new,
  description: () => description,
  extraFields: () => extraFields,
  imageUrl: () => imageUrl,
  projectUrl: () => projectUrl,
  setDescription: () => setDescription,
  setExtraFields: () => setExtraFields,
  setImageUrl: () => setImageUrl,
  setProjectUrl: () => setProjectUrl
});
module.exports = __toCommonJS(node_metadata_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var vec_map = __toESM(require("./deps/sui/vec_map.js"));
const $moduleName = "@local-pkg/walrus::node_metadata";
const NodeMetadata = new import_utils.MoveStruct({
  name: `${$moduleName}::NodeMetadata`,
  fields: {
    image_url: import_bcs.bcs.string(),
    project_url: import_bcs.bcs.string(),
    description: import_bcs.bcs.string(),
    extra_fields: vec_map.VecMap(import_bcs.bcs.string(), import_bcs.bcs.string())
  }
});
function _new(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["imageUrl", "projectUrl", "description"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "new",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function setImageUrl(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::node_metadata::NodeMetadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["metadata", "imageUrl"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "set_image_url",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function setProjectUrl(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::node_metadata::NodeMetadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["metadata", "projectUrl"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "set_project_url",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function setDescription(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::node_metadata::NodeMetadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["metadata", "description"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "set_description",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function setExtraFields(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::node_metadata::NodeMetadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::vec_map::VecMap<0x0000000000000000000000000000000000000000000000000000000000000001::string::String, 0x0000000000000000000000000000000000000000000000000000000000000001::string::String>"
  ];
  const parameterNames = ["metadata", "extraFields"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "set_extra_fields",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function imageUrl(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`];
  const parameterNames = ["metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "image_url",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function projectUrl(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`];
  const parameterNames = ["metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "project_url",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function description(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`];
  const parameterNames = ["metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "description",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function extraFields(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`];
  const parameterNames = ["metadata"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "node_metadata",
    function: "extra_fields",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=node_metadata.js.map
