{
  "version": 3,
  "sources": ["../../../../src/contracts/wal_exchange/wal_exchange.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/** Module: wal_exchange */\n\nimport { MoveStruct, normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport * as object from './deps/sui/object.js';\nimport * as balance from './deps/sui/balance.js';\nconst $moduleName = '@local-pkg/wal_exchange::wal_exchange';\nexport const ExchangeRate = new MoveStruct({\n\tname: `${$moduleName}::ExchangeRate`,\n\tfields: {\n\t\twal: bcs.u64(),\n\t\tsui: bcs.u64(),\n\t},\n});\nexport const Exchange = new MoveStruct({\n\tname: `${$moduleName}::Exchange`,\n\tfields: {\n\t\tid: object.UID,\n\t\twal: balance.Balance,\n\t\tsui: balance.Balance,\n\t\trate: ExchangeRate,\n\t\tadmin: bcs.Address,\n\t},\n});\nexport const AdminCap = new MoveStruct({\n\tname: `${$moduleName}::AdminCap`,\n\tfields: {\n\t\tid: object.UID,\n\t},\n});\nexport interface NewExchangeRateArguments {\n\twal: RawTransactionArgument<number | bigint>;\n\tsui: RawTransactionArgument<number | bigint>;\n}\nexport interface NewExchangeRateOptions {\n\tpackage?: string;\n\targuments:\n\t\t| NewExchangeRateArguments\n\t\t| [wal: RawTransactionArgument<number | bigint>, sui: RawTransactionArgument<number | bigint>];\n}\n/** Creates a new exchange rate, making sure it is valid. */\nexport function newExchangeRate(options: NewExchangeRateOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = ['u64', 'u64'] satisfies string[];\n\tconst parameterNames = ['wal', 'sui'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'new_exchange_rate',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface NewOptions {\n\tpackage?: string;\n\targuments?: [];\n}\n/**\n * Creates a new shared exchange with a 1:1 exchange rate and returns the\n * associated `AdminCap`.\n */\nexport function _new(options: NewOptions = {}) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'new',\n\t\t});\n}\nexport interface NewFundedArguments {\n\twal: RawTransactionArgument<string>;\n\tamount: RawTransactionArgument<number | bigint>;\n}\nexport interface NewFundedOptions {\n\tpackage?: string;\n\targuments:\n\t\t| NewFundedArguments\n\t\t| [wal: RawTransactionArgument<string>, amount: RawTransactionArgument<number | bigint>];\n}\n/**\n * Creates a new shared exchange with a 1:1 exchange rate, funds it with WAL, and\n * returns the associated `AdminCap`.\n */\nexport function newFunded(options: NewFundedOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t\t'u64',\n\t] satisfies string[];\n\tconst parameterNames = ['wal', 'amount'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'new_funded',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface AddWalArguments {\n\tself: RawTransactionArgument<string>;\n\twal: RawTransactionArgument<string>;\n\tamount: RawTransactionArgument<number | bigint>;\n}\nexport interface AddWalOptions {\n\tpackage?: string;\n\targuments:\n\t\t| AddWalArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\twal: RawTransactionArgument<string>,\n\t\t\t\tamount: RawTransactionArgument<number | bigint>,\n\t\t  ];\n}\n/** Adds WAL to the balance stored in the exchange. */\nexport function addWal(options: AddWalOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t\t'u64',\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'wal', 'amount'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'add_wal',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface AddSuiArguments {\n\tself: RawTransactionArgument<string>;\n\tsui: RawTransactionArgument<string>;\n\tamount: RawTransactionArgument<number | bigint>;\n}\nexport interface AddSuiOptions {\n\tpackage?: string;\n\targuments:\n\t\t| AddSuiArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\tsui: RawTransactionArgument<string>,\n\t\t\t\tamount: RawTransactionArgument<number | bigint>,\n\t\t  ];\n}\n/** Adds SUI to the balance stored in the exchange. */\nexport function addSui(options: AddSuiOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>',\n\t\t'u64',\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'sui', 'amount'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'add_sui',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface AddAllWalArguments {\n\tself: RawTransactionArgument<string>;\n\twal: RawTransactionArgument<string>;\n}\nexport interface AddAllWalOptions {\n\tpackage?: string;\n\targuments:\n\t\t| AddAllWalArguments\n\t\t| [self: RawTransactionArgument<string>, wal: RawTransactionArgument<string>];\n}\n/** Adds WAL to the balance stored in the exchange. */\nexport function addAllWal(options: AddAllWalOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'wal'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'add_all_wal',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface AddAllSuiArguments {\n\tself: RawTransactionArgument<string>;\n\tsui: RawTransactionArgument<string>;\n}\nexport interface AddAllSuiOptions {\n\tpackage?: string;\n\targuments:\n\t\t| AddAllSuiArguments\n\t\t| [self: RawTransactionArgument<string>, sui: RawTransactionArgument<string>];\n}\n/** Adds SUI to the balance stored in the exchange. */\nexport function addAllSui(options: AddAllSuiOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>',\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'sui'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'add_all_sui',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface WithdrawWalArguments {\n\tself: RawTransactionArgument<string>;\n\tamount: RawTransactionArgument<number | bigint>;\n\tadminCap: RawTransactionArgument<string>;\n}\nexport interface WithdrawWalOptions {\n\tpackage?: string;\n\targuments:\n\t\t| WithdrawWalArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\tamount: RawTransactionArgument<number | bigint>,\n\t\t\t\tadminCap: RawTransactionArgument<string>,\n\t\t  ];\n}\n/** Withdraws WAL from the balance stored in the exchange. */\nexport function withdrawWal(options: WithdrawWalOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t'u64',\n\t\t`${packageAddress}::wal_exchange::AdminCap`,\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'amount', 'adminCap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'withdraw_wal',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface WithdrawSuiArguments {\n\tself: RawTransactionArgument<string>;\n\tamount: RawTransactionArgument<number | bigint>;\n\tadminCap: RawTransactionArgument<string>;\n}\nexport interface WithdrawSuiOptions {\n\tpackage?: string;\n\targuments:\n\t\t| WithdrawSuiArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\tamount: RawTransactionArgument<number | bigint>,\n\t\t\t\tadminCap: RawTransactionArgument<string>,\n\t\t  ];\n}\n/** Withdraws SUI from the balance stored in the exchange. */\nexport function withdrawSui(options: WithdrawSuiOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t'u64',\n\t\t`${packageAddress}::wal_exchange::AdminCap`,\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'amount', 'adminCap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'withdraw_sui',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface SetExchangeRateArguments {\n\tself: RawTransactionArgument<string>;\n\twal: RawTransactionArgument<number | bigint>;\n\tsui: RawTransactionArgument<number | bigint>;\n\tadminCap: RawTransactionArgument<string>;\n}\nexport interface SetExchangeRateOptions {\n\tpackage?: string;\n\targuments:\n\t\t| SetExchangeRateArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\twal: RawTransactionArgument<number | bigint>,\n\t\t\t\tsui: RawTransactionArgument<number | bigint>,\n\t\t\t\tadminCap: RawTransactionArgument<string>,\n\t\t  ];\n}\n/** Sets the exchange rate of the exchange to `wal` WAL = `sui` SUI. */\nexport function setExchangeRate(options: SetExchangeRateOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t'u64',\n\t\t'u64',\n\t\t`${packageAddress}::wal_exchange::AdminCap`,\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'wal', 'sui', 'adminCap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'set_exchange_rate',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ExchangeAllForWalArguments {\n\tself: RawTransactionArgument<string>;\n\tsui: RawTransactionArgument<string>;\n}\nexport interface ExchangeAllForWalOptions {\n\tpackage?: string;\n\targuments:\n\t\t| ExchangeAllForWalArguments\n\t\t| [self: RawTransactionArgument<string>, sui: RawTransactionArgument<string>];\n}\n/** Exchanges the provided SUI coin for WAL at the exchange's rate. */\nexport function exchangeAllForWal(options: ExchangeAllForWalOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>',\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'sui'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'exchange_all_for_wal',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ExchangeForWalArguments {\n\tself: RawTransactionArgument<string>;\n\tsui: RawTransactionArgument<string>;\n\tamountSui: RawTransactionArgument<number | bigint>;\n}\nexport interface ExchangeForWalOptions {\n\tpackage?: string;\n\targuments:\n\t\t| ExchangeForWalArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\tsui: RawTransactionArgument<string>,\n\t\t\t\tamountSui: RawTransactionArgument<number | bigint>,\n\t\t  ];\n}\n/**\n * Exchanges `amount_sui` out of the provided SUI coin for WAL at the exchange's\n * rate.\n */\nexport function exchangeForWal(options: ExchangeForWalOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>',\n\t\t'u64',\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'sui', 'amountSui'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'exchange_for_wal',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ExchangeAllForSuiArguments {\n\tself: RawTransactionArgument<string>;\n\twal: RawTransactionArgument<string>;\n}\nexport interface ExchangeAllForSuiOptions {\n\tpackage?: string;\n\targuments:\n\t\t| ExchangeAllForSuiArguments\n\t\t| [self: RawTransactionArgument<string>, wal: RawTransactionArgument<string>];\n}\n/** Exchanges the provided WAL coin for SUI at the exchange's rate. */\nexport function exchangeAllForSui(options: ExchangeAllForSuiOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'wal'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'exchange_all_for_sui',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ExchangeForSuiArguments {\n\tself: RawTransactionArgument<string>;\n\twal: RawTransactionArgument<string>;\n\tamountWal: RawTransactionArgument<number | bigint>;\n}\nexport interface ExchangeForSuiOptions {\n\tpackage?: string;\n\targuments:\n\t\t| ExchangeForSuiArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\twal: RawTransactionArgument<string>,\n\t\t\t\tamountWal: RawTransactionArgument<number | bigint>,\n\t\t  ];\n}\n/**\n * Exchanges `amount_wal` out of the provided WAL coin for SUI at the exchange's\n * rate.\n */\nexport function exchangeForSui(options: ExchangeForSuiOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal_exchange';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal_exchange::Exchange`,\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t\t'u64',\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'wal', 'amountWal'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal_exchange',\n\t\t\tfunction: 'exchange_for_sui',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "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",
  "names": []
}
