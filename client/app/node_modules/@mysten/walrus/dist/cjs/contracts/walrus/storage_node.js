"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var storage_node_exports = {};
__export(storage_node_exports, {
  StorageNodeCap: () => StorageNodeCap,
  StorageNodeInfo: () => StorageNodeInfo,
  denyListRoot: () => denyListRoot,
  denyListSequence: () => denyListSequence,
  id: () => id,
  lastEpochSyncDone: () => lastEpochSyncDone,
  lastEventBlobAttestation: () => lastEventBlobAttestation,
  nodeId: () => nodeId
});
module.exports = __toCommonJS(storage_node_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var group_ops = __toESM(require("./deps/sui/group_ops.js"));
var extended_field = __toESM(require("./extended_field.js"));
var object = __toESM(require("./deps/sui/object.js"));
var event_blob = __toESM(require("./event_blob.js"));
const $moduleName = "@local-pkg/walrus::storage_node";
const StorageNodeInfo = new import_utils.MoveStruct({
  name: `${$moduleName}::StorageNodeInfo`,
  fields: {
    name: import_bcs.bcs.string(),
    node_id: import_bcs.bcs.Address,
    network_address: import_bcs.bcs.string(),
    public_key: group_ops.Element,
    next_epoch_public_key: import_bcs.bcs.option(group_ops.Element),
    network_public_key: import_bcs.bcs.vector(import_bcs.bcs.u8()),
    metadata: extended_field.ExtendedField
  }
});
const StorageNodeCap = new import_utils.MoveStruct({
  name: `${$moduleName}::StorageNodeCap`,
  fields: {
    id: object.UID,
    node_id: import_bcs.bcs.Address,
    last_epoch_sync_done: import_bcs.bcs.u32(),
    last_event_blob_attestation: import_bcs.bcs.option(event_blob.EventBlobAttestation),
    /** Stores the Merkle root of the deny list for the storage node. */
    deny_list_root: import_bcs.bcs.u256(),
    /** Stores the sequence number of the deny list for the storage node. */
    deny_list_sequence: import_bcs.bcs.u64(),
    /** Stores the size of the deny list for the storage node. */
    deny_list_size: import_bcs.bcs.u64()
  }
});
function id(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeInfo`];
  const parameterNames = ["cap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_node",
    function: "id",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function nodeId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`];
  const parameterNames = ["cap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_node",
    function: "node_id",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function lastEpochSyncDone(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`];
  const parameterNames = ["cap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_node",
    function: "last_epoch_sync_done",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function lastEventBlobAttestation(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`];
  const parameterNames = ["cap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_node",
    function: "last_event_blob_attestation",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function denyListRoot(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`];
  const parameterNames = ["cap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_node",
    function: "deny_list_root",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function denyListSequence(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`];
  const parameterNames = ["cap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "storage_node",
    function: "deny_list_sequence",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=storage_node.js.map
