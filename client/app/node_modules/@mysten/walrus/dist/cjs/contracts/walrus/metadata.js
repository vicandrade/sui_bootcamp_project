"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var metadata_exports = {};
__export(metadata_exports, {
  Metadata: () => Metadata,
  _new: () => _new,
  insertOrUpdate: () => insertOrUpdate,
  remove: () => remove,
  removeIfExists: () => removeIfExists
});
module.exports = __toCommonJS(metadata_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var vec_map = __toESM(require("./deps/sui/vec_map.js"));
const $moduleName = "@local-pkg/walrus::metadata";
const Metadata = new import_utils.MoveStruct({
  name: `${$moduleName}::Metadata`,
  fields: {
    metadata: vec_map.VecMap(import_bcs.bcs.string(), import_bcs.bcs.string())
  }
});
function _new(options = {}) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "metadata",
    function: "new"
  });
}
function insertOrUpdate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::metadata::Metadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "key", "value"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "metadata",
    function: "insert_or_update",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function remove(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::metadata::Metadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "key"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "metadata",
    function: "remove",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function removeIfExists(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::metadata::Metadata`,
    "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
  ];
  const parameterNames = ["self", "key"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "metadata",
    function: "remove_if_exists",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=metadata.js.map
