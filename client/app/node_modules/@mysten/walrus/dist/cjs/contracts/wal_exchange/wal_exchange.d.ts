/** Module: wal_exchange */
import { MoveStruct } from '../utils/index.js';
import type { RawTransactionArgument } from '../utils/index.js';
import type { Transaction } from '@mysten/sui/transactions';
export declare const ExchangeRate: MoveStruct<{
    wal: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    sui: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
}, "@local-pkg/wal_exchange::wal_exchange::ExchangeRate">;
export declare const Exchange: MoveStruct<{
    id: MoveStruct<{
        id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    }, "0x2::object::UID">;
    wal: MoveStruct<{
        value: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "0x2::balance::Balance">;
    sui: MoveStruct<{
        value: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "0x2::balance::Balance">;
    rate: MoveStruct<{
        wal: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
        sui: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "@local-pkg/wal_exchange::wal_exchange::ExchangeRate">;
    admin: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
}, "@local-pkg/wal_exchange::wal_exchange::Exchange">;
export declare const AdminCap: MoveStruct<{
    id: MoveStruct<{
        id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    }, "0x2::object::UID">;
}, "@local-pkg/wal_exchange::wal_exchange::AdminCap">;
export interface NewExchangeRateArguments {
    wal: RawTransactionArgument<number | bigint>;
    sui: RawTransactionArgument<number | bigint>;
}
export interface NewExchangeRateOptions {
    package?: string;
    arguments: NewExchangeRateArguments | [wal: RawTransactionArgument<number | bigint>, sui: RawTransactionArgument<number | bigint>];
}
/** Creates a new exchange rate, making sure it is valid. */
export declare function newExchangeRate(options: NewExchangeRateOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface NewOptions {
    package?: string;
    arguments?: [];
}
/**
 * Creates a new shared exchange with a 1:1 exchange rate and returns the
 * associated `AdminCap`.
 */
export declare function _new(options?: NewOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface NewFundedArguments {
    wal: RawTransactionArgument<string>;
    amount: RawTransactionArgument<number | bigint>;
}
export interface NewFundedOptions {
    package?: string;
    arguments: NewFundedArguments | [wal: RawTransactionArgument<string>, amount: RawTransactionArgument<number | bigint>];
}
/**
 * Creates a new shared exchange with a 1:1 exchange rate, funds it with WAL, and
 * returns the associated `AdminCap`.
 */
export declare function newFunded(options: NewFundedOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AddWalArguments {
    self: RawTransactionArgument<string>;
    wal: RawTransactionArgument<string>;
    amount: RawTransactionArgument<number | bigint>;
}
export interface AddWalOptions {
    package?: string;
    arguments: AddWalArguments | [
        self: RawTransactionArgument<string>,
        wal: RawTransactionArgument<string>,
        amount: RawTransactionArgument<number | bigint>
    ];
}
/** Adds WAL to the balance stored in the exchange. */
export declare function addWal(options: AddWalOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AddSuiArguments {
    self: RawTransactionArgument<string>;
    sui: RawTransactionArgument<string>;
    amount: RawTransactionArgument<number | bigint>;
}
export interface AddSuiOptions {
    package?: string;
    arguments: AddSuiArguments | [
        self: RawTransactionArgument<string>,
        sui: RawTransactionArgument<string>,
        amount: RawTransactionArgument<number | bigint>
    ];
}
/** Adds SUI to the balance stored in the exchange. */
export declare function addSui(options: AddSuiOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AddAllWalArguments {
    self: RawTransactionArgument<string>;
    wal: RawTransactionArgument<string>;
}
export interface AddAllWalOptions {
    package?: string;
    arguments: AddAllWalArguments | [self: RawTransactionArgument<string>, wal: RawTransactionArgument<string>];
}
/** Adds WAL to the balance stored in the exchange. */
export declare function addAllWal(options: AddAllWalOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AddAllSuiArguments {
    self: RawTransactionArgument<string>;
    sui: RawTransactionArgument<string>;
}
export interface AddAllSuiOptions {
    package?: string;
    arguments: AddAllSuiArguments | [self: RawTransactionArgument<string>, sui: RawTransactionArgument<string>];
}
/** Adds SUI to the balance stored in the exchange. */
export declare function addAllSui(options: AddAllSuiOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface WithdrawWalArguments {
    self: RawTransactionArgument<string>;
    amount: RawTransactionArgument<number | bigint>;
    adminCap: RawTransactionArgument<string>;
}
export interface WithdrawWalOptions {
    package?: string;
    arguments: WithdrawWalArguments | [
        self: RawTransactionArgument<string>,
        amount: RawTransactionArgument<number | bigint>,
        adminCap: RawTransactionArgument<string>
    ];
}
/** Withdraws WAL from the balance stored in the exchange. */
export declare function withdrawWal(options: WithdrawWalOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface WithdrawSuiArguments {
    self: RawTransactionArgument<string>;
    amount: RawTransactionArgument<number | bigint>;
    adminCap: RawTransactionArgument<string>;
}
export interface WithdrawSuiOptions {
    package?: string;
    arguments: WithdrawSuiArguments | [
        self: RawTransactionArgument<string>,
        amount: RawTransactionArgument<number | bigint>,
        adminCap: RawTransactionArgument<string>
    ];
}
/** Withdraws SUI from the balance stored in the exchange. */
export declare function withdrawSui(options: WithdrawSuiOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface SetExchangeRateArguments {
    self: RawTransactionArgument<string>;
    wal: RawTransactionArgument<number | bigint>;
    sui: RawTransactionArgument<number | bigint>;
    adminCap: RawTransactionArgument<string>;
}
export interface SetExchangeRateOptions {
    package?: string;
    arguments: SetExchangeRateArguments | [
        self: RawTransactionArgument<string>,
        wal: RawTransactionArgument<number | bigint>,
        sui: RawTransactionArgument<number | bigint>,
        adminCap: RawTransactionArgument<string>
    ];
}
/** Sets the exchange rate of the exchange to `wal` WAL = `sui` SUI. */
export declare function setExchangeRate(options: SetExchangeRateOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ExchangeAllForWalArguments {
    self: RawTransactionArgument<string>;
    sui: RawTransactionArgument<string>;
}
export interface ExchangeAllForWalOptions {
    package?: string;
    arguments: ExchangeAllForWalArguments | [self: RawTransactionArgument<string>, sui: RawTransactionArgument<string>];
}
/** Exchanges the provided SUI coin for WAL at the exchange's rate. */
export declare function exchangeAllForWal(options: ExchangeAllForWalOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ExchangeForWalArguments {
    self: RawTransactionArgument<string>;
    sui: RawTransactionArgument<string>;
    amountSui: RawTransactionArgument<number | bigint>;
}
export interface ExchangeForWalOptions {
    package?: string;
    arguments: ExchangeForWalArguments | [
        self: RawTransactionArgument<string>,
        sui: RawTransactionArgument<string>,
        amountSui: RawTransactionArgument<number | bigint>
    ];
}
/**
 * Exchanges `amount_sui` out of the provided SUI coin for WAL at the exchange's
 * rate.
 */
export declare function exchangeForWal(options: ExchangeForWalOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ExchangeAllForSuiArguments {
    self: RawTransactionArgument<string>;
    wal: RawTransactionArgument<string>;
}
export interface ExchangeAllForSuiOptions {
    package?: string;
    arguments: ExchangeAllForSuiArguments | [self: RawTransactionArgument<string>, wal: RawTransactionArgument<string>];
}
/** Exchanges the provided WAL coin for SUI at the exchange's rate. */
export declare function exchangeAllForSui(options: ExchangeAllForSuiOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ExchangeForSuiArguments {
    self: RawTransactionArgument<string>;
    wal: RawTransactionArgument<string>;
    amountWal: RawTransactionArgument<number | bigint>;
}
export interface ExchangeForSuiOptions {
    package?: string;
    arguments: ExchangeForSuiArguments | [
        self: RawTransactionArgument<string>,
        wal: RawTransactionArgument<string>,
        amountWal: RawTransactionArgument<number | bigint>
    ];
}
/**
 * Exchanges `amount_wal` out of the provided WAL coin for SUI at the exchange's
 * rate.
 */
export declare function exchangeForSui(options: ExchangeForSuiOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
