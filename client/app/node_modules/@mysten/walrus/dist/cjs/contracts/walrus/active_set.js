"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var active_set_exports = {};
__export(active_set_exports, {
  ActiveSet: () => ActiveSet,
  ActiveSetEntry: () => ActiveSetEntry
});
module.exports = __toCommonJS(active_set_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
const $moduleName = "@local-pkg/walrus::active_set";
const ActiveSetEntry = new import_utils.MoveStruct({
  name: `${$moduleName}::ActiveSetEntry`,
  fields: {
    node_id: import_bcs.bcs.Address,
    staked_amount: import_bcs.bcs.u64()
  }
});
const ActiveSet = new import_utils.MoveStruct({
  name: `${$moduleName}::ActiveSet`,
  fields: {
    /**
     * The maximum number of storage nodes in the active set. Potentially remove this
     * field.
     */
    max_size: import_bcs.bcs.u16(),
    /**
     * The minimum amount of staked WAL needed to enter the active set. This is used to
     * determine if a storage node can be added to the active set.
     */
    threshold_stake: import_bcs.bcs.u64(),
    /** The list of storage nodes in the active set and their stake. */
    nodes: import_bcs.bcs.vector(ActiveSetEntry),
    /** The total amount of staked WAL in the active set. */
    total_stake: import_bcs.bcs.u64()
  }
});
//# sourceMappingURL=active_set.js.map
