/**
 * Module: `staked_wal`
 *
 * Implements the `StakedWal` functionality - a staked WAL is an object that
 * represents a staked amount of WALs in a staking pool. It is created in the
 * `staking_pool` on staking and can be split, joined, and burned. The burning is
 * performed via the `withdraw_stake` method in the `staking_pool`.
 */
import { MoveEnum, MoveStruct } from '../utils/index.js';
import type { RawTransactionArgument } from '../utils/index.js';
import type { Transaction } from '@mysten/sui/transactions';
/**
 * The state of the staked WAL. It can be either `Staked` or `Withdrawing`. The
 * `Withdrawing` state contains the epoch when the staked WAL can be withdrawn.
 */
export declare const StakedWalState: MoveEnum<{
    Staked: null;
    Withdrawing: MoveStruct<{
        withdraw_epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    }, "StakedWalState.Withdrawing">;
}, "@local-pkg/walrus::staked_wal::StakedWalState">;
export declare const StakedWal: MoveStruct<{
    id: MoveStruct<{
        id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    }, "0x2::object::UID">;
    /** Whether the staked WAL is active or withdrawing. */
    state: MoveEnum<{
        Staked: null;
        Withdrawing: MoveStruct<{
            withdraw_epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
        }, "StakedWalState.Withdrawing">;
    }, "@local-pkg/walrus::staked_wal::StakedWalState">;
    /** ID of the staking pool. */
    node_id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    /** The staked amount. */
    principal: MoveStruct<{
        value: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    }, "0x2::balance::Balance">;
    /** The Walrus epoch when the staked WAL was activated. */
    activation_epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
}, "@local-pkg/walrus::staked_wal::StakedWal">;
export interface NodeIdArguments {
    sw: RawTransactionArgument<string>;
}
export interface NodeIdOptions {
    package?: string;
    arguments: NodeIdArguments | [sw: RawTransactionArgument<string>];
}
/** Returns the `node_id` of the staked WAL. */
export declare function nodeId(options: NodeIdOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ValueArguments {
    sw: RawTransactionArgument<string>;
}
export interface ValueOptions {
    package?: string;
    arguments: ValueArguments | [sw: RawTransactionArgument<string>];
}
/**
 * Returns the `principal` of the staked WAL. Called `value` to be consistent with
 * `Coin`.
 */
export declare function value(options: ValueOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ActivationEpochArguments {
    sw: RawTransactionArgument<string>;
}
export interface ActivationEpochOptions {
    package?: string;
    arguments: ActivationEpochArguments | [sw: RawTransactionArgument<string>];
}
/** Returns the `activation_epoch` of the staked WAL. */
export declare function activationEpoch(options: ActivationEpochOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface IsStakedArguments {
    sw: RawTransactionArgument<string>;
}
export interface IsStakedOptions {
    package?: string;
    arguments: IsStakedArguments | [sw: RawTransactionArgument<string>];
}
/** Returns true if the staked WAL is in the `Staked` state. */
export declare function isStaked(options: IsStakedOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface IsWithdrawingArguments {
    sw: RawTransactionArgument<string>;
}
export interface IsWithdrawingOptions {
    package?: string;
    arguments: IsWithdrawingArguments | [sw: RawTransactionArgument<string>];
}
/** Checks whether the staked WAL is in the `Withdrawing` state. */
export declare function isWithdrawing(options: IsWithdrawingOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface WithdrawEpochArguments {
    sw: RawTransactionArgument<string>;
}
export interface WithdrawEpochOptions {
    package?: string;
    arguments: WithdrawEpochArguments | [sw: RawTransactionArgument<string>];
}
/**
 * Returns the `withdraw_epoch` of the staked WAL if it is in the `Withdrawing`.
 * Aborts otherwise.
 */
export declare function withdrawEpoch(options: WithdrawEpochOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface JoinArguments {
    sw: RawTransactionArgument<string>;
    other: RawTransactionArgument<string>;
}
export interface JoinOptions {
    package?: string;
    arguments: JoinArguments | [sw: RawTransactionArgument<string>, other: RawTransactionArgument<string>];
}
/**
 * Joins the staked WAL with another staked WAL, adding the `principal` of the
 * `other` staked WAL to the current staked WAL.
 *
 * Aborts if the `node_id` or `activation_epoch` of the staked WALs do not match.
 */
export declare function join(options: JoinOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface SplitArguments {
    sw: RawTransactionArgument<string>;
    amount: RawTransactionArgument<number | bigint>;
}
export interface SplitOptions {
    package?: string;
    arguments: SplitArguments | [sw: RawTransactionArgument<string>, amount: RawTransactionArgument<number | bigint>];
}
/**
 * Splits the staked WAL into two parts, one with the `amount` and the other with
 * the remaining `principal`. The `node_id`, `activation_epoch` are the same for
 * both the staked WALs.
 *
 * Aborts if the `amount` is greater than the `principal` of the staked WAL. Aborts
 * if the `amount` is zero.
 */
export declare function split(options: SplitOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
