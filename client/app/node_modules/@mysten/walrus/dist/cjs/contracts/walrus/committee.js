"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var committee_exports = {};
__export(committee_exports, {
  Committee: () => Committee,
  inner: () => inner,
  shards: () => shards,
  size: () => size,
  toInner: () => toInner
});
module.exports = __toCommonJS(committee_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var vec_map = __toESM(require("./deps/sui/vec_map.js"));
const $moduleName = "@local-pkg/walrus::committee";
const Committee = new import_utils.MoveTuple({
  name: `${$moduleName}::Committee`,
  fields: [vec_map.VecMap(import_bcs.bcs.Address, import_bcs.bcs.vector(import_bcs.bcs.u16()))]
});
function shards(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::committee::Committee`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
  ];
  const parameterNames = ["cmt", "nodeId"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "committee",
    function: "shards",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function size(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::committee::Committee`];
  const parameterNames = ["cmt"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "committee",
    function: "size",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function inner(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::committee::Committee`];
  const parameterNames = ["cmt"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "committee",
    function: "inner",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function toInner(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [`${packageAddress}::committee::Committee`];
  const parameterNames = ["cmt"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "committee",
    function: "to_inner",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=committee.js.map
