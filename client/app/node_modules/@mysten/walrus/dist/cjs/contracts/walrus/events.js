"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var events_exports = {};
__export(events_exports, {
  BlobCertified: () => BlobCertified,
  BlobDeleted: () => BlobDeleted,
  BlobRegistered: () => BlobRegistered,
  ContractUpgradeProposed: () => ContractUpgradeProposed,
  ContractUpgradeQuorumReached: () => ContractUpgradeQuorumReached,
  ContractUpgraded: () => ContractUpgraded,
  DenyListBlobDeleted: () => DenyListBlobDeleted,
  DenyListUpdate: () => DenyListUpdate,
  EpochChangeDone: () => EpochChangeDone,
  EpochChangeStart: () => EpochChangeStart,
  EpochParametersSelected: () => EpochParametersSelected,
  InvalidBlobID: () => InvalidBlobID,
  ProtocolVersionUpdated: () => ProtocolVersionUpdated,
  RegisterDenyListUpdate: () => RegisterDenyListUpdate,
  ShardRecoveryStart: () => ShardRecoveryStart,
  ShardsReceived: () => ShardsReceived
});
module.exports = __toCommonJS(events_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
const $moduleName = "@local-pkg/walrus::events";
const BlobRegistered = new import_utils.MoveStruct({
  name: `${$moduleName}::BlobRegistered`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256(),
    size: import_bcs.bcs.u64(),
    encoding_type: import_bcs.bcs.u8(),
    end_epoch: import_bcs.bcs.u32(),
    deletable: import_bcs.bcs.bool(),
    object_id: import_bcs.bcs.Address
  }
});
const BlobCertified = new import_utils.MoveStruct({
  name: `${$moduleName}::BlobCertified`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256(),
    end_epoch: import_bcs.bcs.u32(),
    deletable: import_bcs.bcs.bool(),
    object_id: import_bcs.bcs.Address,
    is_extension: import_bcs.bcs.bool()
  }
});
const BlobDeleted = new import_utils.MoveStruct({
  name: `${$moduleName}::BlobDeleted`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256(),
    end_epoch: import_bcs.bcs.u32(),
    object_id: import_bcs.bcs.Address,
    was_certified: import_bcs.bcs.bool()
  }
});
const InvalidBlobID = new import_utils.MoveStruct({
  name: `${$moduleName}::InvalidBlobID`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256()
  }
});
const EpochChangeStart = new import_utils.MoveStruct({
  name: `${$moduleName}::EpochChangeStart`,
  fields: {
    epoch: import_bcs.bcs.u32()
  }
});
const EpochChangeDone = new import_utils.MoveStruct({
  name: `${$moduleName}::EpochChangeDone`,
  fields: {
    epoch: import_bcs.bcs.u32()
  }
});
const ShardsReceived = new import_utils.MoveStruct({
  name: `${$moduleName}::ShardsReceived`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    shards: import_bcs.bcs.vector(import_bcs.bcs.u16())
  }
});
const EpochParametersSelected = new import_utils.MoveStruct({
  name: `${$moduleName}::EpochParametersSelected`,
  fields: {
    next_epoch: import_bcs.bcs.u32()
  }
});
const ShardRecoveryStart = new import_utils.MoveStruct({
  name: `${$moduleName}::ShardRecoveryStart`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    shards: import_bcs.bcs.vector(import_bcs.bcs.u16())
  }
});
const ContractUpgraded = new import_utils.MoveStruct({
  name: `${$moduleName}::ContractUpgraded`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    package_id: import_bcs.bcs.Address,
    version: import_bcs.bcs.u64()
  }
});
const RegisterDenyListUpdate = new import_utils.MoveStruct({
  name: `${$moduleName}::RegisterDenyListUpdate`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    root: import_bcs.bcs.u256(),
    sequence_number: import_bcs.bcs.u64(),
    node_id: import_bcs.bcs.Address
  }
});
const DenyListUpdate = new import_utils.MoveStruct({
  name: `${$moduleName}::DenyListUpdate`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    root: import_bcs.bcs.u256(),
    sequence_number: import_bcs.bcs.u64(),
    node_id: import_bcs.bcs.Address
  }
});
const DenyListBlobDeleted = new import_utils.MoveStruct({
  name: `${$moduleName}::DenyListBlobDeleted`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256()
  }
});
const ContractUpgradeProposed = new import_utils.MoveStruct({
  name: `${$moduleName}::ContractUpgradeProposed`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    package_digest: import_bcs.bcs.vector(import_bcs.bcs.u8())
  }
});
const ContractUpgradeQuorumReached = new import_utils.MoveStruct({
  name: `${$moduleName}::ContractUpgradeQuorumReached`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    package_digest: import_bcs.bcs.vector(import_bcs.bcs.u8())
  }
});
const ProtocolVersionUpdated = new import_utils.MoveStruct({
  name: `${$moduleName}::ProtocolVersionUpdated`,
  fields: {
    epoch: import_bcs.bcs.u32(),
    start_epoch: import_bcs.bcs.u32(),
    protocol_version: import_bcs.bcs.u64()
  }
});
//# sourceMappingURL=events.js.map
