/** Module to certify event blobs. */
import { MoveStruct } from '../utils/index.js';
export declare const EventBlobAttestation: MoveStruct<{
    checkpoint_sequence_num: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    epoch: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
}, "@local-pkg/walrus::event_blob::EventBlobAttestation">;
export declare const EventBlob: MoveStruct<{
    /** Blob id of the certified event blob. */
    blob_id: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u256">;
    /** Ending sui checkpoint of the certified event blob. */
    ending_checkpoint_sequence_number: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
}, "@local-pkg/walrus::event_blob::EventBlob">;
export declare const EventBlobCertificationState: MoveStruct<{
    /** Latest certified event blob. */
    latest_certified_blob: import("@mysten/sui/bcs").BcsType<{
        blob_id: string;
        ending_checkpoint_sequence_number: string;
    } | null, {
        blob_id: string | number | bigint;
        ending_checkpoint_sequence_number: string | number | bigint;
    } | null | undefined, "Option<@local-pkg/walrus::event_blob::EventBlob>">;
    /** Current event blob being attested. */
    aggregate_weight_per_blob: MoveStruct<{
        contents: import("@mysten/sui/bcs").BcsType<{
            key: {
                blob_id: string;
                ending_checkpoint_sequence_number: string;
            };
            value: number;
        }[], Iterable<{
            key: {
                blob_id: string | number | bigint;
                ending_checkpoint_sequence_number: string | number | bigint;
            };
            value: number;
        }> & {
            length: number;
        }, string>;
    }, "0x2::vec_map::VecMap<@local-pkg/walrus::event_blob::EventBlob, u16>">;
}, "@local-pkg/walrus::event_blob::EventBlobCertificationState">;
