import { MoveStruct } from '../utils/index.js';
import type { RawTransactionArgument } from '../utils/index.js';
import type { Transaction } from '@mysten/sui/transactions';
export declare const StorageNodeInfo: MoveStruct<{
    name: import("@mysten/sui/bcs").BcsType<string, string, "string">;
    node_id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    network_address: import("@mysten/sui/bcs").BcsType<string, string, "string">;
    public_key: MoveStruct<{
        bytes: import("@mysten/sui/bcs").BcsType<number[], Iterable<number> & {
            length: number;
        }, string>;
    }, "0x2::group_ops::Element">;
    next_epoch_public_key: import("@mysten/sui/bcs").BcsType<{
        bytes: number[];
    } | null, {
        bytes: Iterable<number> & {
            length: number;
        };
    } | null | undefined, "Option<0x2::group_ops::Element>">;
    network_public_key: import("@mysten/sui/bcs").BcsType<number[], Iterable<number> & {
        length: number;
    }, string>;
    metadata: MoveStruct<{
        id: MoveStruct<{
            id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
        }, "0x2::object::UID">;
    }, "@local-pkg/walrus::extended_field::ExtendedField">;
}, "@local-pkg/walrus::storage_node::StorageNodeInfo">;
export declare const StorageNodeCap: MoveStruct<{
    id: MoveStruct<{
        id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    }, "0x2::object::UID">;
    node_id: import("@mysten/sui/bcs").BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    last_epoch_sync_done: import("@mysten/sui/bcs").BcsType<number, number, "u32">;
    last_event_blob_attestation: import("@mysten/sui/bcs").BcsType<{
        checkpoint_sequence_num: string;
        epoch: number;
    } | null, {
        checkpoint_sequence_num: string | number | bigint;
        epoch: number;
    } | null | undefined, "Option<@local-pkg/walrus::event_blob::EventBlobAttestation>">;
    /** Stores the Merkle root of the deny list for the storage node. */
    deny_list_root: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u256">;
    /** Stores the sequence number of the deny list for the storage node. */
    deny_list_sequence: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
    /** Stores the size of the deny list for the storage node. */
    deny_list_size: import("@mysten/sui/bcs").BcsType<string, string | number | bigint, "u64">;
}, "@local-pkg/walrus::storage_node::StorageNodeCap">;
export interface IdArguments {
    cap: RawTransactionArgument<string>;
}
export interface IdOptions {
    package?: string;
    arguments: IdArguments | [cap: RawTransactionArgument<string>];
}
/** Return the node ID of the storage node. */
export declare function id(options: IdOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface NodeIdArguments {
    cap: RawTransactionArgument<string>;
}
export interface NodeIdOptions {
    package?: string;
    arguments: NodeIdArguments | [cap: RawTransactionArgument<string>];
}
/** Return the pool ID of the storage node. */
export declare function nodeId(options: NodeIdOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface LastEpochSyncDoneArguments {
    cap: RawTransactionArgument<string>;
}
export interface LastEpochSyncDoneOptions {
    package?: string;
    arguments: LastEpochSyncDoneArguments | [cap: RawTransactionArgument<string>];
}
/**
 * Return the last epoch in which the storage node attested that it has finished
 * syncing.
 */
export declare function lastEpochSyncDone(options: LastEpochSyncDoneOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface LastEventBlobAttestationArguments {
    cap: RawTransactionArgument<string>;
}
export interface LastEventBlobAttestationOptions {
    package?: string;
    arguments: LastEventBlobAttestationArguments | [cap: RawTransactionArgument<string>];
}
/** Return the latest event blob attestation. */
export declare function lastEventBlobAttestation(options: LastEventBlobAttestationOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface DenyListRootArguments {
    cap: RawTransactionArgument<string>;
}
export interface DenyListRootOptions {
    package?: string;
    arguments: DenyListRootArguments | [cap: RawTransactionArgument<string>];
}
/** Return the deny list root of the storage node. */
export declare function denyListRoot(options: DenyListRootOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface DenyListSequenceArguments {
    cap: RawTransactionArgument<string>;
}
export interface DenyListSequenceOptions {
    package?: string;
    arguments: DenyListSequenceArguments | [cap: RawTransactionArgument<string>];
}
/** Return the deny list sequence number of the storage node. */
export declare function denyListSequence(options: DenyListSequenceOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
