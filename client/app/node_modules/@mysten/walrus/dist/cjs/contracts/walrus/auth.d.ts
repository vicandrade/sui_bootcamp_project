import { MoveEnum } from '../utils/index.js';
import type { RawTransactionArgument } from '../utils/index.js';
import type { BcsType } from '@mysten/sui/bcs';
import type { Transaction } from '@mysten/sui/transactions';
/**
 * Authentication for either a sender or an object. Unlike the `Authorized` type,
 * it cannot be stored and must be used or ignored in the same transaction.
 */
export declare const Authenticated: MoveEnum<{
    Sender: BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    Object: BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
}, "@local-pkg/walrus::auth::Authenticated">;
/**
 * Defines the ways to authorize an action. It can be either an address - checked
 * with `ctx.sender()`, - or an object - checked with `object::id(..)`.
 */
export declare const Authorized: MoveEnum<{
    Address: BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
    ObjectID: BcsType<string, string | Uint8Array<ArrayBufferLike>, "bytes[32]">;
}, "@local-pkg/walrus::auth::Authorized">;
export interface AuthenticateSenderOptions {
    package?: string;
    arguments?: [];
}
/** Authenticates the sender as the authorizer. */
export declare function authenticateSender(options?: AuthenticateSenderOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AuthenticateWithObjectArguments<T extends BcsType<any>> {
    obj: RawTransactionArgument<T>;
}
export interface AuthenticateWithObjectOptions<T extends BcsType<any>> {
    package?: string;
    arguments: AuthenticateWithObjectArguments<T> | [obj: RawTransactionArgument<T>];
    typeArguments: [string];
}
/** Authenticates an object as the authorizer. */
export declare function authenticateWithObject<T extends BcsType<any>>(options: AuthenticateWithObjectOptions<T>): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AuthorizedAddressArguments {
    addr: RawTransactionArgument<string>;
}
export interface AuthorizedAddressOptions {
    package?: string;
    arguments: AuthorizedAddressArguments | [addr: RawTransactionArgument<string>];
}
/** Returns the `Authorized` as an address. */
export declare function authorizedAddress(options: AuthorizedAddressOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AuthorizedObjectArguments {
    id: RawTransactionArgument<string>;
}
export interface AuthorizedObjectOptions {
    package?: string;
    arguments: AuthorizedObjectArguments | [id: RawTransactionArgument<string>];
}
/** Returns the `Authorized` as an object. */
export declare function authorizedObject(options: AuthorizedObjectOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
