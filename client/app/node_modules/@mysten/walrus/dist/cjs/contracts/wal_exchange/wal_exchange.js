"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var wal_exchange_exports = {};
__export(wal_exchange_exports, {
  AdminCap: () => AdminCap,
  Exchange: () => Exchange,
  ExchangeRate: () => ExchangeRate,
  _new: () => _new,
  addAllSui: () => addAllSui,
  addAllWal: () => addAllWal,
  addSui: () => addSui,
  addWal: () => addWal,
  exchangeAllForSui: () => exchangeAllForSui,
  exchangeAllForWal: () => exchangeAllForWal,
  exchangeForSui: () => exchangeForSui,
  exchangeForWal: () => exchangeForWal,
  newExchangeRate: () => newExchangeRate,
  newFunded: () => newFunded,
  setExchangeRate: () => setExchangeRate,
  withdrawSui: () => withdrawSui,
  withdrawWal: () => withdrawWal
});
module.exports = __toCommonJS(wal_exchange_exports);
var import_utils = require("../utils/index.js");
var import_bcs = require("@mysten/sui/bcs");
var object = __toESM(require("./deps/sui/object.js"));
var balance = __toESM(require("./deps/sui/balance.js"));
const $moduleName = "@local-pkg/wal_exchange::wal_exchange";
const ExchangeRate = new import_utils.MoveStruct({
  name: `${$moduleName}::ExchangeRate`,
  fields: {
    wal: import_bcs.bcs.u64(),
    sui: import_bcs.bcs.u64()
  }
});
const Exchange = new import_utils.MoveStruct({
  name: `${$moduleName}::Exchange`,
  fields: {
    id: object.UID,
    wal: balance.Balance,
    sui: balance.Balance,
    rate: ExchangeRate,
    admin: import_bcs.bcs.Address
  }
});
const AdminCap = new import_utils.MoveStruct({
  name: `${$moduleName}::AdminCap`,
  fields: {
    id: object.UID
  }
});
function newExchangeRate(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = ["u64", "u64"];
  const parameterNames = ["wal", "sui"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "new_exchange_rate",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function _new(options = {}) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "new"
  });
}
function newFunded(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
    "u64"
  ];
  const parameterNames = ["wal", "amount"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "new_funded",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function addWal(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
    "u64"
  ];
  const parameterNames = ["self", "wal", "amount"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "add_wal",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function addSui(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
    "u64"
  ];
  const parameterNames = ["self", "sui", "amount"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "add_sui",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function addAllWal(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "wal"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "add_all_wal",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function addAllSui(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>"
  ];
  const parameterNames = ["self", "sui"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "add_all_sui",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function withdrawWal(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "u64",
    `${packageAddress}::wal_exchange::AdminCap`
  ];
  const parameterNames = ["self", "amount", "adminCap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "withdraw_wal",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function withdrawSui(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "u64",
    `${packageAddress}::wal_exchange::AdminCap`
  ];
  const parameterNames = ["self", "amount", "adminCap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "withdraw_sui",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function setExchangeRate(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "u64",
    "u64",
    `${packageAddress}::wal_exchange::AdminCap`
  ];
  const parameterNames = ["self", "wal", "sui", "adminCap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "set_exchange_rate",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function exchangeAllForWal(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>"
  ];
  const parameterNames = ["self", "sui"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "exchange_all_for_wal",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function exchangeForWal(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
    "u64"
  ];
  const parameterNames = ["self", "sui", "amountSui"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "exchange_for_wal",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function exchangeAllForSui(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "wal"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "exchange_all_for_sui",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function exchangeForSui(options) {
  const packageAddress = options.package ?? "@local-pkg/wal_exchange";
  const argumentsTypes = [
    `${packageAddress}::wal_exchange::Exchange`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
    "u64"
  ];
  const parameterNames = ["self", "wal", "amountWal"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal_exchange",
    function: "exchange_for_sui",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=wal_exchange.js.map
