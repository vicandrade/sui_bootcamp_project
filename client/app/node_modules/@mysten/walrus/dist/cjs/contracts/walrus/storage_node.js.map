{
  "version": 3,
  "sources": ["../../../../src/contracts/walrus/storage_node.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { MoveStruct, normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport * as group_ops from './deps/sui/group_ops.js';\nimport * as extended_field from './extended_field.js';\nimport * as object from './deps/sui/object.js';\nimport * as event_blob from './event_blob.js';\nconst $moduleName = '@local-pkg/walrus::storage_node';\nexport const StorageNodeInfo = new MoveStruct({\n\tname: `${$moduleName}::StorageNodeInfo`,\n\tfields: {\n\t\tname: bcs.string(),\n\t\tnode_id: bcs.Address,\n\t\tnetwork_address: bcs.string(),\n\t\tpublic_key: group_ops.Element,\n\t\tnext_epoch_public_key: bcs.option(group_ops.Element),\n\t\tnetwork_public_key: bcs.vector(bcs.u8()),\n\t\tmetadata: extended_field.ExtendedField,\n\t},\n});\nexport const StorageNodeCap = new MoveStruct({\n\tname: `${$moduleName}::StorageNodeCap`,\n\tfields: {\n\t\tid: object.UID,\n\t\tnode_id: bcs.Address,\n\t\tlast_epoch_sync_done: bcs.u32(),\n\t\tlast_event_blob_attestation: bcs.option(event_blob.EventBlobAttestation),\n\t\t/** Stores the Merkle root of the deny list for the storage node. */\n\t\tdeny_list_root: bcs.u256(),\n\t\t/** Stores the sequence number of the deny list for the storage node. */\n\t\tdeny_list_sequence: bcs.u64(),\n\t\t/** Stores the size of the deny list for the storage node. */\n\t\tdeny_list_size: bcs.u64(),\n\t},\n});\nexport interface IdArguments {\n\tcap: RawTransactionArgument<string>;\n}\nexport interface IdOptions {\n\tpackage?: string;\n\targuments: IdArguments | [cap: RawTransactionArgument<string>];\n}\n/** Return the node ID of the storage node. */\nexport function id(options: IdOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::storage_node::StorageNodeInfo`] satisfies string[];\n\tconst parameterNames = ['cap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_node',\n\t\t\tfunction: 'id',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface NodeIdArguments {\n\tcap: RawTransactionArgument<string>;\n}\nexport interface NodeIdOptions {\n\tpackage?: string;\n\targuments: NodeIdArguments | [cap: RawTransactionArgument<string>];\n}\n/** Return the pool ID of the storage node. */\nexport function nodeId(options: NodeIdOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`] satisfies string[];\n\tconst parameterNames = ['cap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_node',\n\t\t\tfunction: 'node_id',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface LastEpochSyncDoneArguments {\n\tcap: RawTransactionArgument<string>;\n}\nexport interface LastEpochSyncDoneOptions {\n\tpackage?: string;\n\targuments: LastEpochSyncDoneArguments | [cap: RawTransactionArgument<string>];\n}\n/**\n * Return the last epoch in which the storage node attested that it has finished\n * syncing.\n */\nexport function lastEpochSyncDone(options: LastEpochSyncDoneOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`] satisfies string[];\n\tconst parameterNames = ['cap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_node',\n\t\t\tfunction: 'last_epoch_sync_done',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface LastEventBlobAttestationArguments {\n\tcap: RawTransactionArgument<string>;\n}\nexport interface LastEventBlobAttestationOptions {\n\tpackage?: string;\n\targuments: LastEventBlobAttestationArguments | [cap: RawTransactionArgument<string>];\n}\n/** Return the latest event blob attestation. */\nexport function lastEventBlobAttestation(options: LastEventBlobAttestationOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`] satisfies string[];\n\tconst parameterNames = ['cap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_node',\n\t\t\tfunction: 'last_event_blob_attestation',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface DenyListRootArguments {\n\tcap: RawTransactionArgument<string>;\n}\nexport interface DenyListRootOptions {\n\tpackage?: string;\n\targuments: DenyListRootArguments | [cap: RawTransactionArgument<string>];\n}\n/** Return the deny list root of the storage node. */\nexport function denyListRoot(options: DenyListRootOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`] satisfies string[];\n\tconst parameterNames = ['cap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_node',\n\t\t\tfunction: 'deny_list_root',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface DenyListSequenceArguments {\n\tcap: RawTransactionArgument<string>;\n}\nexport interface DenyListSequenceOptions {\n\tpackage?: string;\n\targuments: DenyListSequenceArguments | [cap: RawTransactionArgument<string>];\n}\n/** Return the deny list sequence number of the storage node. */\nexport function denyListSequence(options: DenyListSequenceOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`] satisfies string[];\n\tconst parameterNames = ['cap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'storage_node',\n\t\t\tfunction: 'deny_list_sequence',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "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",
  "names": []
}
