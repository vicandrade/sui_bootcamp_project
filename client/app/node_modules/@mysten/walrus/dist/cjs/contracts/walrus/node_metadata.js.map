{
  "version": 3,
  "sources": ["../../../../src/contracts/walrus/node_metadata.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/** Metadata that describes a Storage Node. Attached to the `StakingPool` */\n\nimport { MoveStruct, normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport * as vec_map from './deps/sui/vec_map.js';\nconst $moduleName = '@local-pkg/walrus::node_metadata';\nexport const NodeMetadata = new MoveStruct({\n\tname: `${$moduleName}::NodeMetadata`,\n\tfields: {\n\t\timage_url: bcs.string(),\n\t\tproject_url: bcs.string(),\n\t\tdescription: bcs.string(),\n\t\textra_fields: vec_map.VecMap(bcs.string(), bcs.string()),\n\t},\n});\nexport interface NewArguments {\n\timageUrl: RawTransactionArgument<string>;\n\tprojectUrl: RawTransactionArgument<string>;\n\tdescription: RawTransactionArgument<string>;\n}\nexport interface NewOptions {\n\tpackage?: string;\n\targuments:\n\t\t| NewArguments\n\t\t| [\n\t\t\t\timageUrl: RawTransactionArgument<string>,\n\t\t\t\tprojectUrl: RawTransactionArgument<string>,\n\t\t\t\tdescription: RawTransactionArgument<string>,\n\t\t  ];\n}\n/** Create a new `NodeMetadata` instance */\nexport function _new(options: NewOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t] satisfies string[];\n\tconst parameterNames = ['imageUrl', 'projectUrl', 'description'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'node_metadata',\n\t\t\tfunction: 'new',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface SetImageUrlArguments {\n\tmetadata: RawTransactionArgument<string>;\n\timageUrl: RawTransactionArgument<string>;\n}\nexport interface SetImageUrlOptions {\n\tpackage?: string;\n\targuments:\n\t\t| SetImageUrlArguments\n\t\t| [metadata: RawTransactionArgument<string>, imageUrl: RawTransactionArgument<string>];\n}\n/** Set the image URL of the Validator. */\nexport function setImageUrl(options: SetImageUrlOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::node_metadata::NodeMetadata`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t] satisfies string[];\n\tconst parameterNames = ['metadata', 'imageUrl'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'node_metadata',\n\t\t\tfunction: 'set_image_url',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface SetProjectUrlArguments {\n\tmetadata: RawTransactionArgument<string>;\n\tprojectUrl: RawTransactionArgument<string>;\n}\nexport interface SetProjectUrlOptions {\n\tpackage?: string;\n\targuments:\n\t\t| SetProjectUrlArguments\n\t\t| [metadata: RawTransactionArgument<string>, projectUrl: RawTransactionArgument<string>];\n}\n/** Set the project URL of the Validator. */\nexport function setProjectUrl(options: SetProjectUrlOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::node_metadata::NodeMetadata`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t] satisfies string[];\n\tconst parameterNames = ['metadata', 'projectUrl'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'node_metadata',\n\t\t\tfunction: 'set_project_url',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface SetDescriptionArguments {\n\tmetadata: RawTransactionArgument<string>;\n\tdescription: RawTransactionArgument<string>;\n}\nexport interface SetDescriptionOptions {\n\tpackage?: string;\n\targuments:\n\t\t| SetDescriptionArguments\n\t\t| [metadata: RawTransactionArgument<string>, description: RawTransactionArgument<string>];\n}\n/** Set the description of the Validator. */\nexport function setDescription(options: SetDescriptionOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::node_metadata::NodeMetadata`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t] satisfies string[];\n\tconst parameterNames = ['metadata', 'description'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'node_metadata',\n\t\t\tfunction: 'set_description',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface SetExtraFieldsArguments {\n\tmetadata: RawTransactionArgument<string>;\n\textraFields: RawTransactionArgument<string>;\n}\nexport interface SetExtraFieldsOptions {\n\tpackage?: string;\n\targuments:\n\t\t| SetExtraFieldsArguments\n\t\t| [metadata: RawTransactionArgument<string>, extraFields: RawTransactionArgument<string>];\n}\n/** Set an extra field of the Validator. */\nexport function setExtraFields(options: SetExtraFieldsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::node_metadata::NodeMetadata`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::vec_map::VecMap<0x0000000000000000000000000000000000000000000000000000000000000001::string::String, 0x0000000000000000000000000000000000000000000000000000000000000001::string::String>',\n\t] satisfies string[];\n\tconst parameterNames = ['metadata', 'extraFields'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'node_metadata',\n\t\t\tfunction: 'set_extra_fields',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ImageUrlArguments {\n\tmetadata: RawTransactionArgument<string>;\n}\nexport interface ImageUrlOptions {\n\tpackage?: string;\n\targuments: ImageUrlArguments | [metadata: RawTransactionArgument<string>];\n}\n/** Returns the image URL of the Validator. */\nexport function imageUrl(options: ImageUrlOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`] satisfies string[];\n\tconst parameterNames = ['metadata'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'node_metadata',\n\t\t\tfunction: 'image_url',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ProjectUrlArguments {\n\tmetadata: RawTransactionArgument<string>;\n}\nexport interface ProjectUrlOptions {\n\tpackage?: string;\n\targuments: ProjectUrlArguments | [metadata: RawTransactionArgument<string>];\n}\n/** Returns the project URL of the Validator. */\nexport function projectUrl(options: ProjectUrlOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`] satisfies string[];\n\tconst parameterNames = ['metadata'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'node_metadata',\n\t\t\tfunction: 'project_url',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface DescriptionArguments {\n\tmetadata: RawTransactionArgument<string>;\n}\nexport interface DescriptionOptions {\n\tpackage?: string;\n\targuments: DescriptionArguments | [metadata: RawTransactionArgument<string>];\n}\n/** Returns the description of the Validator. */\nexport function description(options: DescriptionOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`] satisfies string[];\n\tconst parameterNames = ['metadata'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'node_metadata',\n\t\t\tfunction: 'description',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ExtraFieldsArguments {\n\tmetadata: RawTransactionArgument<string>;\n}\nexport interface ExtraFieldsOptions {\n\tpackage?: string;\n\targuments: ExtraFieldsArguments | [metadata: RawTransactionArgument<string>];\n}\n/** Returns the extra fields of the Validator. */\nexport function extraFields(options: ExtraFieldsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [`${packageAddress}::node_metadata::NodeMetadata`] satisfies string[];\n\tconst parameterNames = ['metadata'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'node_metadata',\n\t\t\tfunction: 'extra_fields',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "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",
  "names": []
}
