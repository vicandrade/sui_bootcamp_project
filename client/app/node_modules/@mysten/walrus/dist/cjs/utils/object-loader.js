"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var object_loader_exports = {};
__export(object_loader_exports, {
  SuiObjectDataLoader: () => SuiObjectDataLoader
});
module.exports = __toCommonJS(object_loader_exports);
var import_bcs = require("@mysten/sui/bcs");
var import_utils = require("@mysten/sui/utils");
var import_dataloader = __toESM(require("dataloader"));
var import_bcs2 = require("./bcs.js");
var _dynamicFieldCache;
class SuiObjectDataLoader extends import_dataloader.default {
  constructor(suiClient) {
    super(async (ids) => {
      const { objects } = await suiClient.core.getObjects({
        objectIds: ids
      });
      return objects;
    });
    __privateAdd(this, _dynamicFieldCache, /* @__PURE__ */ new Map());
  }
  async load(id, schema) {
    const data = await super.load(id);
    if (schema) {
      return schema.parse(await data.content);
    }
    return data;
  }
  async loadMany(ids, schema) {
    const data = await super.loadMany(ids);
    if (!schema) {
      return data;
    }
    return Promise.all(
      data.map(async (d) => {
        if (d instanceof Error) {
          return d;
        }
        return schema.parse(await d.content);
      })
    );
  }
  async loadManyOrThrow(ids, schema) {
    const data = await this.loadMany(ids, schema);
    for (const d of data) {
      if (d instanceof Error) {
        throw d;
      }
    }
    return data;
  }
  clearAll() {
    __privateGet(this, _dynamicFieldCache).clear();
    return super.clearAll();
  }
  clear(key) {
    __privateGet(this, _dynamicFieldCache).delete(key);
    return super.clear(key);
  }
  async loadFieldObject(parent, name, type) {
    const schema = (0, import_bcs.pureBcsSchemaFromTypeName)(name.type);
    const id = (0, import_utils.deriveDynamicFieldID)(parent, "u64", schema.serialize(name.value).toBytes());
    return (await this.load(id, (0, import_bcs2.Field)(schema, type))).value;
  }
}
_dynamicFieldCache = new WeakMap();
//# sourceMappingURL=object-loader.js.map
