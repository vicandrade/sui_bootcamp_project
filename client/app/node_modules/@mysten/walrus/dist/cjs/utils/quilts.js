"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var quilts_exports = {};
__export(quilts_exports, {
  BLOB_IDENTIFIER_SIZE_BYTES_LENGTH: () => BLOB_IDENTIFIER_SIZE_BYTES_LENGTH,
  HAS_TAGS_FLAG: () => HAS_TAGS_FLAG,
  MAX_BLOB_IDENTIFIER_BYTES_LENGTH: () => MAX_BLOB_IDENTIFIER_BYTES_LENGTH,
  MAX_NUM_SLIVERS_FOR_QUILT_INDEX: () => MAX_NUM_SLIVERS_FOR_QUILT_INDEX,
  QUILT_INDEX_PREFIX_SIZE: () => QUILT_INDEX_PREFIX_SIZE,
  QUILT_INDEX_SIZE_BYTES_LENGTH: () => QUILT_INDEX_SIZE_BYTES_LENGTH,
  QUILT_PATCH_BLOB_HEADER_SIZE: () => QUILT_PATCH_BLOB_HEADER_SIZE,
  QUILT_VERSION_BYTES_LENGTH: () => QUILT_VERSION_BYTES_LENGTH,
  TAGS_SIZE_BYTES_LENGTH: () => TAGS_SIZE_BYTES_LENGTH,
  computeSymbolSize: () => computeSymbolSize,
  encodeQuilt: () => encodeQuilt,
  encodeQuiltPatchId: () => encodeQuiltPatchId,
  parseQuiltPatchId: () => parseQuiltPatchId,
  parseWalrusId: () => parseWalrusId
});
module.exports = __toCommonJS(quilts_exports);
var import_bcs = require("@mysten/bcs");
var import_bcs2 = require("./bcs.js");
var import_index = require("./index.js");
const QUILT_INDEX_SIZE_BYTES_LENGTH = 4;
const QUILT_VERSION_BYTES_LENGTH = 1;
const QUILT_INDEX_PREFIX_SIZE = QUILT_VERSION_BYTES_LENGTH + QUILT_INDEX_SIZE_BYTES_LENGTH;
const QUILT_PATCH_BLOB_HEADER_SIZE = 1 + 4 + 1;
const BLOB_IDENTIFIER_SIZE_BYTES_LENGTH = 2;
const TAGS_SIZE_BYTES_LENGTH = 2;
const MAX_BLOB_IDENTIFIER_BYTES_LENGTH = (1 << 8 * BLOB_IDENTIFIER_SIZE_BYTES_LENGTH) - 1;
const MAX_NUM_SLIVERS_FOR_QUILT_INDEX = 10;
const HAS_TAGS_FLAG = 1 << 0;
function computeSymbolSize(blobsSizes, nColumns, nRows, maxNumColumnsForQuiltIndex, encodingType = "RS2") {
  if (blobsSizes.length > nColumns) {
    throw new Error("Too many blobs, the number of blobs must be less than the number of columns");
  }
  if (blobsSizes.length === 0) {
    throw new Error("No blobs provided");
  }
  let minVal = Math.max(
    blobsSizes.reduce((acc, size) => acc + size, 0) / (nColumns * nRows),
    blobsSizes[0] / (nRows * maxNumColumnsForQuiltIndex),
    Math.ceil(QUILT_INDEX_PREFIX_SIZE / nRows)
  );
  let maxVal = Math.ceil(Math.max(...blobsSizes) / (nColumns / blobsSizes.length) * nRows);
  while (minVal < maxVal) {
    const mid = (minVal + maxVal) / 2;
    if (canBlobsFitIntoMatrix(blobsSizes, nColumns, mid * nRows)) {
      maxVal = mid;
    } else {
      minVal = mid + 1;
    }
  }
  const symbolSize = Math.ceil(minVal / import_index.REQUIRED_ALIGNMENT_BY_ENCODING_TYPE[encodingType]) * import_index.REQUIRED_ALIGNMENT_BY_ENCODING_TYPE[encodingType];
  if (!canBlobsFitIntoMatrix(blobsSizes, nColumns, symbolSize * nRows)) {
    throw new Error("Quilt oversize");
  }
  if (symbolSize > import_index.MAX_SYMBOL_SIZE_BY_ENCODING_TYPE[encodingType]) {
    throw new Error(
      `Quilt oversize: the resulting symbol size ${symbolSize} is larger than the maximum symbol size ${import_index.MAX_SYMBOL_SIZE_BY_ENCODING_TYPE[encodingType]}; remove some blobs`
    );
  }
  return symbolSize;
}
function canBlobsFitIntoMatrix(blobsSizes, nColumns, columnSize) {
  return blobsSizes.reduce((acc, size) => acc + Math.ceil(size / columnSize), 0) <= nColumns;
}
function parseQuiltPatchId(id) {
  return import_bcs2.QuiltPatchId.parse((0, import_index.fromUrlSafeBase64)(id));
}
function encodeQuiltPatchId(id) {
  return (0, import_index.urlSafeBase64)(import_bcs2.QuiltPatchId.serialize(id).toBytes());
}
function parseWalrusId(id) {
  const bytes = (0, import_index.fromUrlSafeBase64)(id);
  if (bytes.length === 32) {
    return {
      kind: "blob",
      id
    };
  }
  return {
    kind: "quiltPatch",
    id: parseQuiltPatchId(id)
  };
}
function encodeQuilt({ blobs, numShards, encodingType }) {
  const { primarySymbols: nRows, secondarySymbols: nCols } = (0, import_index.getSourceSymbols)(
    numShards,
    encodingType
  );
  const sortedBlobs = blobs.sort((a, b) => a.identifier < b.identifier ? -1 : 1);
  const identifiers = /* @__PURE__ */ new Set();
  const index = {
    patches: []
  };
  const tags = sortedBlobs.map(
    (blob) => blob.tags && Object.keys(blob.tags).length > 0 ? import_bcs2.QuiltPatchTags.serialize(blob.tags).toBytes() : null
  );
  for (const blob of sortedBlobs) {
    if (identifiers.has(blob.identifier)) {
      throw new Error(`Duplicate blob identifier: ${blob.identifier}`);
    }
    identifiers.add(blob.identifier);
    index.patches.push({
      startIndex: 0,
      endIndex: 0,
      identifier: blob.identifier,
      tags: blob.tags ?? {}
    });
  }
  const indexSize = QUILT_INDEX_PREFIX_SIZE + import_bcs2.QuiltIndexV1.serialize(index).toBytes().length;
  const blobMetadata = sortedBlobs.map((blob, i) => {
    const identifierBytes = import_bcs.bcs.string().serialize(blob.identifier).toBytes();
    let metadataSize = QUILT_PATCH_BLOB_HEADER_SIZE + BLOB_IDENTIFIER_SIZE_BYTES_LENGTH + identifierBytes.length;
    let mask = 0;
    let offset = 0;
    if (tags[i]) {
      metadataSize += TAGS_SIZE_BYTES_LENGTH + tags[i].length;
      mask |= HAS_TAGS_FLAG << 0;
    }
    const metadata = new Uint8Array(metadataSize);
    const metadataView = new DataView(metadata.buffer);
    const header = import_bcs2.QuiltPatchBlobHeader.serialize({
      version: 1,
      length: metadataSize - QUILT_PATCH_BLOB_HEADER_SIZE + blob.contents.length,
      mask
    }).toBytes();
    metadata.set(header, offset);
    offset += header.length;
    metadataView.setUint16(offset, identifierBytes.length, true);
    offset += BLOB_IDENTIFIER_SIZE_BYTES_LENGTH;
    metadata.set(identifierBytes, offset);
    offset += identifierBytes.length;
    if (tags[i]) {
      metadataView.setUint16(offset, tags[i].length, true);
      offset += TAGS_SIZE_BYTES_LENGTH;
      metadata.set(tags[i], offset);
      offset += tags[i].length;
    }
    return metadata;
  });
  const blobSizes = [
    indexSize,
    ...sortedBlobs.map((blob, i) => {
      if (blob.identifier.length > MAX_BLOB_IDENTIFIER_BYTES_LENGTH) {
        throw new Error(`Blob identifier too long: ${blob.identifier}`);
      }
      return blobMetadata[i].length + blob.contents.length;
    })
  ];
  const symbolSize = computeSymbolSize(
    blobSizes,
    nCols,
    nRows,
    MAX_NUM_SLIVERS_FOR_QUILT_INDEX,
    encodingType
  );
  const rowSize = symbolSize * nCols;
  const columnSize = symbolSize * nRows;
  const indexColumnsNeeded = Math.ceil(indexSize / columnSize);
  if (indexColumnsNeeded > MAX_NUM_SLIVERS_FOR_QUILT_INDEX) {
    throw new Error("Index too large");
  }
  const quilt = new Uint8Array(rowSize * nRows);
  let currentColumn = indexColumnsNeeded;
  for (let i = 0; i < sortedBlobs.length; i++) {
    const blob = sortedBlobs[i];
    index.patches[i].startIndex = currentColumn;
    currentColumn += writeBlobToQuilt(
      quilt,
      blob.contents,
      rowSize,
      columnSize,
      symbolSize,
      currentColumn,
      blobMetadata[i]
    );
    index.patches[i].endIndex = currentColumn;
  }
  const indexBytes = import_bcs2.QuiltIndexV1.serialize(index).toBytes();
  const quiltIndex = new Uint8Array(QUILT_INDEX_PREFIX_SIZE + indexBytes.length);
  const view = new DataView(quiltIndex.buffer);
  view.setUint8(0, 1);
  view.setUint32(1, indexBytes.length, true);
  quiltIndex.set(indexBytes, QUILT_INDEX_PREFIX_SIZE);
  writeBlobToQuilt(quilt, quiltIndex, rowSize, columnSize, symbolSize, 0);
  return { quilt, index };
}
function writeBlobToQuilt(quilt, blob, rowSize, columnSize, symbolSize, startColumn, prefix) {
  const nRows = columnSize / symbolSize;
  let bytesWritten = 0;
  if (rowSize % symbolSize !== 0) {
    throw new Error("Row size must be divisible by symbol size");
  }
  if (columnSize % symbolSize !== 0) {
    throw new Error("Column size must be divisible by symbol size");
  }
  if (prefix) {
    writeBytes(prefix);
  }
  writeBytes(blob);
  return Math.ceil(bytesWritten / columnSize);
  function writeBytes(bytes) {
    const offset = bytesWritten;
    const symbolsToSkip = Math.floor(offset / symbolSize);
    let remainingOffset = offset % symbolSize;
    let currentCol = startColumn + Math.floor(symbolsToSkip / nRows);
    let currentRow = symbolsToSkip % nRows;
    let index = 0;
    while (index < bytes.length) {
      const baseIndex = currentRow * rowSize + currentCol * symbolSize;
      const startIndex = baseIndex + remainingOffset;
      const len = Math.min(symbolSize - remainingOffset, bytes.length - index);
      for (let i = 0; i < len; i++) {
        quilt[startIndex + i] = bytes[index + i];
      }
      index += len;
      remainingOffset = 0;
      currentRow = (currentRow + 1) % nRows;
      if (currentRow === 0) {
        currentCol++;
      }
    }
    bytesWritten += bytes.length;
  }
}
//# sourceMappingURL=quilts.js.map
