"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var retry_exports = {};
__export(retry_exports, {
  retry: () => retry
});
module.exports = __toCommonJS(retry_exports);
async function retry(fn, options) {
  let remaining = options.count ?? 3;
  while (remaining > 0) {
    try {
      remaining -= 1;
      return await fn();
    } catch (error) {
      if (remaining <= 0 || options.condition && !options.condition(error)) {
        throw error;
      }
      if (options.delay) {
        await new Promise(
          (resolve) => setTimeout(
            resolve,
            (options.delay ?? 1e3) + (options.jitter ? Math.random() * options.jitter : 0)
          )
        );
      }
    }
  }
  throw new Error("Retry count exceeded");
}
//# sourceMappingURL=retry.js.map
