"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var client_exports = {};
__export(client_exports, {
  UploadRelayClient: () => UploadRelayClient
});
module.exports = __toCommonJS(client_exports);
var import_error = require("../storage-node/error.js");
var import_error2 = require("../storage-node/error.js");
var import_utils = require("../utils/index.js");
var _fetch, _timeout, _onError, _UploadRelayClient_instances, request_fn;
class UploadRelayClient {
  constructor({ host, fetch: overriddenFetch, timeout, onError }) {
    __privateAdd(this, _UploadRelayClient_instances);
    __privateAdd(this, _fetch);
    __privateAdd(this, _timeout);
    __privateAdd(this, _onError);
    this.host = host;
    __privateSet(this, _fetch, overriddenFetch ?? globalThis.fetch);
    __privateSet(this, _timeout, timeout ?? 3e4);
    __privateSet(this, _onError, onError);
  }
  async tipConfig() {
    const response = await __privateMethod(this, _UploadRelayClient_instances, request_fn).call(this, {
      method: "GET",
      path: "/v1/tip-config"
    });
    const data = await response.json();
    if (typeof data === "string") {
      return null;
    }
    if ("const" in data.send_tip.kind) {
      return {
        address: data.send_tip.address,
        kind: {
          const: data.send_tip.kind.const
        }
      };
    }
    return {
      address: data.send_tip.address,
      kind: {
        linear: {
          base: data.send_tip.kind.linear.base,
          perEncodedKib: data.send_tip.kind.linear.encoded_size_mul_per_kib
        }
      }
    };
  }
  async writeBlob({
    blobId,
    nonce,
    txDigest,
    blob,
    deletable,
    blobObjectId,
    requiresTip,
    encodingType,
    ...options
  }) {
    const query = new URLSearchParams({
      blob_id: blobId
    });
    if (requiresTip) {
      query.set("nonce", (0, import_utils.urlSafeBase64)(nonce));
      query.set("tx_id", txDigest);
    }
    if (deletable) {
      query.set("deletable_blob_object", blobObjectId);
    }
    if (encodingType) {
      query.set("encoding_type", encodingType);
    }
    const response = await __privateMethod(this, _UploadRelayClient_instances, request_fn).call(this, {
      method: "POST",
      path: `/v1/blob-upload-relay?${query.toString()}`,
      body: blob,
      ...options
    });
    const data = await response.json();
    return {
      blobId,
      certificate: {
        signers: data.confirmation_certificate.signers,
        serializedMessage: new Uint8Array(data.confirmation_certificate.serialized_message),
        signature: (0, import_utils.fromUrlSafeBase64)(data.confirmation_certificate.signature)
      }
    };
  }
}
_fetch = new WeakMap();
_timeout = new WeakMap();
_onError = new WeakMap();
_UploadRelayClient_instances = new WeakSet();
request_fn = async function(options) {
  var _a, _b, _c;
  const { signal, timeout, ...init } = options;
  if (signal?.aborted) {
    throw new import_error2.UserAbortError();
  }
  const timeoutSignal = AbortSignal.timeout(timeout ?? __privateGet(this, _timeout));
  let response;
  try {
    response = await (0, __privateGet(this, _fetch))(`${this.host}${options.path}`, {
      ...init,
      signal: signal ? AbortSignal.any([timeoutSignal, signal]) : timeoutSignal
    });
  } catch (error) {
    if (signal?.aborted) {
      throw new import_error2.UserAbortError();
    }
    if (error instanceof Error && error.name === "AbortError") {
      const error2 = new import_error.ConnectionTimeoutError();
      (_a = __privateGet(this, _onError)) == null ? void 0 : _a.call(this, error2);
      throw error2;
    }
    (_b = __privateGet(this, _onError)) == null ? void 0 : _b.call(this, error);
    throw error;
  }
  if (!response.ok) {
    const errorText = await response.text().catch((reason) => reason);
    const errorJSON = safeParseJSON(errorText);
    const errorMessage = errorJSON ? void 0 : errorText;
    const error = import_error.StorageNodeAPIError.generate(response.status, errorJSON, errorMessage);
    (_c = __privateGet(this, _onError)) == null ? void 0 : _c.call(this, error);
    throw error;
  }
  return response;
};
function safeParseJSON(value) {
  try {
    return JSON.parse(value);
  } catch {
    return void 0;
  }
}
//# sourceMappingURL=client.js.map
