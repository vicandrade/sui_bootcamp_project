"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var file_exports = {};
__export(file_exports, {
  WalrusFile: () => WalrusFile
});
module.exports = __toCommonJS(file_exports);
var import_local = require("./readers/local.js");
var _reader;
const _WalrusFile = class _WalrusFile {
  constructor({ reader }) {
    __privateAdd(this, _reader);
    __privateSet(this, _reader, reader);
  }
  static from(options) {
    return new _WalrusFile({
      reader: new import_local.LocalReader(options)
    });
  }
  getIdentifier() {
    return __privateGet(this, _reader).getIdentifier();
  }
  getTags() {
    return __privateGet(this, _reader).getTags();
  }
  bytes() {
    return __privateGet(this, _reader).getBytes();
  }
  async text() {
    const bytes = await this.bytes();
    return new TextDecoder().decode(bytes);
  }
  async json() {
    return JSON.parse(await this.text());
  }
};
_reader = new WeakMap();
let WalrusFile = _WalrusFile;
//# sourceMappingURL=file.js.map
