"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var blob_exports = {};
__export(blob_exports, {
  WalrusBlob: () => WalrusBlob
});
module.exports = __toCommonJS(blob_exports);
var import_file = require("./file.js");
var import_experimental = require("@mysten/sui/experimental");
var _reader, _client, _cache, _WalrusBlob_instances, blobStatus_fn;
class WalrusBlob {
  constructor({ reader, client }) {
    __privateAdd(this, _WalrusBlob_instances);
    __privateAdd(this, _reader);
    __privateAdd(this, _client);
    __privateAdd(this, _cache, new import_experimental.ClientCache());
    __privateSet(this, _reader, reader);
    __privateSet(this, _client, client);
  }
  // Get the blob as a file (i.e. do not use Quilt encoding)
  asFile() {
    return new import_file.WalrusFile({ reader: __privateGet(this, _reader) });
  }
  async blobId() {
    return __privateGet(this, _reader).blobId;
  }
  // Gets quilt-based files associated with this blob.
  async files(filters = {}) {
    const quiltReader = await __privateGet(this, _reader).getQuiltReader();
    const index = await quiltReader.readIndex();
    const files = [];
    for (const patch of index) {
      if (filters.ids && !filters.ids.includes(patch.patchId)) {
        continue;
      }
      if (filters.identifiers && !filters.identifiers.includes(patch.identifier)) {
        continue;
      }
      if (filters.tags && !filters.tags.some(
        (tags) => Object.entries(tags).every(([tagName, tagValue]) => patch.tags[tagName] === tagValue)
      )) {
        continue;
      }
      files.push(new import_file.WalrusFile({ reader: quiltReader.readerForPatchId(patch.patchId) }));
    }
    return files;
  }
  async exists() {
    const status = await __privateMethod(this, _WalrusBlob_instances, blobStatus_fn).call(this);
    return status.type === "permanent" || status.type === "deletable";
  }
  async storedUntil() {
    const status = await __privateMethod(this, _WalrusBlob_instances, blobStatus_fn).call(this);
    if (status.type === "permanent") {
      return status.endEpoch;
    }
    return null;
  }
}
_reader = new WeakMap();
_client = new WeakMap();
_cache = new WeakMap();
_WalrusBlob_instances = new WeakSet();
blobStatus_fn = async function() {
  return __privateGet(this, _cache).read(
    ["blobStatus", __privateGet(this, _reader).blobId],
    () => __privateGet(this, _client).getVerifiedBlobStatus({ blobId: __privateGet(this, _reader).blobId })
  );
};
//# sourceMappingURL=blob.js.map
