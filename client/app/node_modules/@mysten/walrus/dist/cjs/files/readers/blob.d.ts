import type { FileReader } from '../file.js';
import type { WalrusClient } from '../../client.js';
import { QuiltReader } from './quilt.js';
export interface BlobReaderOptions {
    client: WalrusClient;
    blobId: string;
    numShards: number;
}
export declare class BlobReader implements FileReader {
    #private;
    blobId: string;
    hasStartedLoadingFullBlob: boolean;
    constructor({ client, blobId, numShards }: BlobReaderOptions);
    getIdentifier(): Promise<null>;
    getTags(): Promise<{}>;
    getQuiltReader(): QuiltReader;
    getBytes(): Promise<Uint8Array<ArrayBufferLike>>;
    getMetadata(): {
        blobId: string;
        metadata: {
            V1: {
                encoding_type: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                    RedStuff: true;
                    RS2: true;
                }, "RedStuff" | "RS2">;
                unencoded_length: string;
                hashes: {
                    primary_hash: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                        Empty: true;
                        Digest: Uint8Array<ArrayBufferLike>;
                    }, "Empty" | "Digest">;
                    secondary_hash: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                        Empty: true;
                        Digest: Uint8Array<ArrayBufferLike>;
                    }, "Empty" | "Digest">;
                }[];
            };
            $kind: "V1";
        };
    } | Promise<{
        blobId: string;
        metadata: {
            V1: {
                encoding_type: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                    RedStuff: true;
                    RS2: true;
                }, "RedStuff" | "RS2">;
                unencoded_length: string;
                hashes: {
                    primary_hash: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                        Empty: true;
                        Digest: Uint8Array<ArrayBufferLike>;
                    }, "Empty" | "Digest">;
                    secondary_hash: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                        Empty: true;
                        Digest: Uint8Array<ArrayBufferLike>;
                    }, "Empty" | "Digest">;
                }[];
            };
            $kind: "V1";
        };
    }>;
    getColumnSize(): Promise<number>;
    getSymbolSize(): Promise<number>;
    getRowSize(): Promise<number>;
    getSecondarySliver({ sliverIndex, signal }: {
        sliverIndex: number;
        signal?: AbortSignal;
    }): Promise<Uint8Array<ArrayBufferLike>>;
}
