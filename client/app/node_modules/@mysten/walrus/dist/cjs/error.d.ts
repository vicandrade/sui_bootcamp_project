export declare class WalrusClientError extends Error {
}
export declare class RetryableWalrusClientError extends WalrusClientError {
}
/** Thrown when the client could not retrieve the status of a blob from any storage node. */
export declare class NoBlobStatusReceivedError extends WalrusClientError {
}
/** Thrown when the client could not retrieve a verified blob status for the blob. */
export declare class NoVerifiedBlobStatusReceivedError extends WalrusClientError {
}
/** Thrown when the client could not retrieve blob metadata from any storage node. */
export declare class NoBlobMetadataReceivedError extends RetryableWalrusClientError {
}
/** Thrown when the client could not retrieve enough slivers to reconstruct the blob. */
export declare class NotEnoughSliversReceivedError extends RetryableWalrusClientError {
}
/** Thrown when the client could not write enough slivers to upload the blob. */
export declare class NotEnoughBlobConfirmationsError extends RetryableWalrusClientError {
}
/** Thrown when the client is currently behind the current epoch. */
export declare class BehindCurrentEpochError extends RetryableWalrusClientError {
}
/** Thrown when a blob is not certified or determined to not exist. */
export declare class BlobNotCertifiedError extends RetryableWalrusClientError {
}
/** Thrown when a blob was determined to be incorrectly encoded. */
export declare class InconsistentBlobError extends WalrusClientError {
}
/** Thrown when blob is blocked by a quorum of storage nodes. */
export declare class BlobBlockedError extends Error {
}
