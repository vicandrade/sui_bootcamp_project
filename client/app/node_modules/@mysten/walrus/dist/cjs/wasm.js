"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var wasm_exports = {};
__export(wasm_exports, {
  getWasmBindings: () => getWasmBindings
});
module.exports = __toCommonJS(wasm_exports);
var import_bcs = require("@mysten/bcs");
var import_walrus_wasm = __toESM(require("@mysten/walrus-wasm"));
var import_bcs2 = require("./utils/bcs.js");
async function getWasmBindings(url) {
  await (0, import_walrus_wasm.default)({ module_or_path: url });
  function encodeBlob(nShards, bytes, encodingType = "RS2") {
    const encoder = new import_walrus_wasm.BlobEncoder(nShards);
    if (encodingType !== "RS2") {
      throw new Error(`Unsupported encoding type: ${encodingType}`);
    }
    const [sliverPairs, metadata, rootHash] = encoder.encode_with_metadata(bytes);
    return {
      sliverPairs,
      blobId: (0, import_bcs2.blobIdFromBytes)(new Uint8Array(metadata.blob_id)),
      metadata: metadata.metadata,
      rootHash: new Uint8Array(rootHash.Digest)
    };
  }
  function combineSignatures(confirmations, signerIndices) {
    const signature = (0, import_walrus_wasm.bls12381_min_pk_aggregate)(
      confirmations.map((confirmation) => (0, import_bcs.fromBase64)(confirmation.signature))
    );
    return {
      signers: signerIndices,
      serializedMessage: (0, import_bcs.fromBase64)(confirmations[0].serializedMessage),
      signature
    };
  }
  function decodePrimarySlivers(blobId, nShards, size, slivers, encodingType = "RS2") {
    const encoder = new import_walrus_wasm.BlobEncoder(nShards);
    if (encodingType !== "RS2") {
      throw new Error(`Unsupported encoding type: ${encodingType}`);
    }
    const [bytes] = encoder.decode(
      import_bcs2.BlobId.serialize(blobId).toBytes(),
      BigInt(size),
      slivers.map((sliver) => ({
        ...sliver,
        _sliver_type: void 0
      }))
    );
    return new Uint8Array(bytes);
  }
  function getVerifySignature() {
    return (confirmation, publicKey) => (0, import_walrus_wasm.bls12381_min_pk_verify)(
      (0, import_bcs.fromBase64)(confirmation.signature),
      publicKey,
      (0, import_bcs.fromBase64)(confirmation.serializedMessage)
    );
  }
  function computeMetadata(nShards, bytes, encodingType = "RS2") {
    const encoder = new import_walrus_wasm.BlobEncoder(nShards);
    const [metadata, rootHash] = encoder.compute_metadata(bytes);
    if (encodingType !== "RS2") {
      throw new Error(`Unsupported encoding type: ${encodingType}`);
    }
    return {
      ...metadata,
      blobId: (0, import_bcs2.blobIdFromBytes)(new Uint8Array(metadata.blob_id)),
      rootHash: new Uint8Array(rootHash.Digest)
    };
  }
  return {
    encodeBlob,
    combineSignatures,
    decodePrimarySlivers,
    getVerifySignature,
    computeMetadata
  };
}
//# sourceMappingURL=wasm.js.map
