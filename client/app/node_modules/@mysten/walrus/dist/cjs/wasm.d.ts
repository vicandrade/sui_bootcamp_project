import type { StorageConfirmation } from './storage-node/types.js';
import type { EncodingType, ProtocolMessageCertificate } from './types.js';
import type { BlobMetadata, BlobMetadataWithId, SliverData, SliverPair } from './utils/bcs.js';
export interface EncodedBlob {
    sliverPairs: (typeof SliverPair.$inferInput)[];
    blobId: string;
    metadata: typeof BlobMetadata.$inferInput;
    rootHash: Uint8Array;
}
export declare function getWasmBindings(url?: string): Promise<{
    encodeBlob: (nShards: number, bytes: Uint8Array, encodingType?: EncodingType) => EncodedBlob;
    combineSignatures: (confirmations: StorageConfirmation[], signerIndices: number[]) => ProtocolMessageCertificate;
    decodePrimarySlivers: (blobId: string, nShards: number, size: number | bigint | string, slivers: (typeof SliverData.$inferInput)[], encodingType?: EncodingType) => Uint8Array;
    getVerifySignature: () => (confirmation: StorageConfirmation, publicKey: Uint8Array) => boolean;
    computeMetadata: (nShards: number, bytes: Uint8Array, encodingType?: EncodingType) => typeof BlobMetadataWithId.$inferInput & {
        blobId: string;
        rootHash: Uint8Array;
    };
}>;
